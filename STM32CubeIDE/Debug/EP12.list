
EP12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006afc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cfc  08006cfc  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006cfc  08006cfc  00007cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d04  08006d04  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d04  08006d04  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d08  08006d08  00007d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d0c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000068  08006d74  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006d74  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d59  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003144  00000000  00000000  0001cde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0001ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e57  00000000  00000000  000211b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bae1  00000000  00000000  00022007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dc5  00000000  00000000  0003dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad754  00000000  00000000  000558ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103001  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  00103044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001079a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ba0 	.word	0x08006ba0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08006ba0 	.word	0x08006ba0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	0018      	movs	r0, r3
 800063a:	230c      	movs	r3, #12
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f005 fc6e 	bl	8005f20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000644:	4b35      	ldr	r3, [pc, #212]	@ (800071c <MX_ADC1_Init+0xec>)
 8000646:	4a36      	ldr	r2, [pc, #216]	@ (8000720 <MX_ADC1_Init+0xf0>)
 8000648:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <MX_ADC1_Init+0xec>)
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	05d2      	lsls	r2, r2, #23
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000652:	4b32      	ldr	r3, [pc, #200]	@ (800071c <MX_ADC1_Init+0xec>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b30      	ldr	r3, [pc, #192]	@ (800071c <MX_ADC1_Init+0xec>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800065e:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <MX_ADC1_Init+0xec>)
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	0392      	lsls	r2, r2, #14
 8000664:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <MX_ADC1_Init+0xec>)
 8000668:	2204      	movs	r2, #4
 800066a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <MX_ADC1_Init+0xec>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <MX_ADC1_Init+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <MX_ADC1_Init+0xec>)
 800067a:	2201      	movs	r2, #1
 800067c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <MX_ADC1_Init+0xec>)
 8000680:	2202      	movs	r2, #2
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <MX_ADC1_Init+0xec>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b24      	ldr	r3, [pc, #144]	@ (800071c <MX_ADC1_Init+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <MX_ADC1_Init+0xec>)
 8000692:	222c      	movs	r2, #44	@ 0x2c
 8000694:	2101      	movs	r1, #1
 8000696:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_ADC1_Init+0xec>)
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_ADC1_Init+0xec>)
 80006a0:	2203      	movs	r2, #3
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_ADC1_Init+0xec>)
 80006a6:	2207      	movs	r2, #7
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <MX_ADC1_Init+0xec>)
 80006ac:	223c      	movs	r2, #60	@ 0x3c
 80006ae:	2100      	movs	r1, #0
 80006b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_ADC1_Init+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_ADC1_Init+0xec>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fee0 	bl	8001480 <HAL_ADC_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 fa34 	bl	8000b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	1d3a      	adds	r2, r7, #4
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_ADC1_Init+0xec>)
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f985 	bl	80019f0 <HAL_ADC_ConfigChannel>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80006ea:	f000 fa21 	bl	8000b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <MX_ADC1_Init+0xf4>)
 80006f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2204      	movs	r2, #4
 80006f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <MX_ADC1_Init+0xf8>)
 80006fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_ADC1_Init+0xec>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f972 	bl	80019f0 <HAL_ADC_ConfigChannel>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000710:	f000 fa0e 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b004      	add	sp, #16
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000084 	.word	0x20000084
 8000720:	40012400 	.word	0x40012400
 8000724:	b0001000 	.word	0xb0001000
 8000728:	07ffff04 	.word	0x07ffff04

0800072c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08b      	sub	sp, #44	@ 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2414      	movs	r4, #20
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f005 fbee 	bl	8005f20 <memset>
  if(adcHandle->Instance==ADC1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a2d      	ldr	r2, [pc, #180]	@ (8000800 <HAL_ADC_MspInit+0xd4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d154      	bne.n	80007f8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 8000750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000752:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	0349      	lsls	r1, r1, #13
 8000758:	430a      	orrs	r2, r1
 800075a:	641a      	str	r2, [r3, #64]	@ 0x40
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 800075e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	035b      	lsls	r3, r3, #13
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 800076c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800076e:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	@ 0x34
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <HAL_ADC_MspInit+0xd8>)
 8000778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2201      	movs	r2, #1
 8000786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2203      	movs	r2, #3
 800078c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	193a      	adds	r2, r7, r4
 8000796:	23a0      	movs	r3, #160	@ 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f002 f9d9 	bl	8002b54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007a4:	4a19      	ldr	r2, [pc, #100]	@ (800080c <HAL_ADC_MspInit+0xe0>)
 80007a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007aa:	2205      	movs	r2, #5
 80007ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	0052      	lsls	r2, r2, #1
 80007c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007d2:	2220      	movs	r2, #32
 80007d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 ff04 	bl	80025ec <HAL_DMA_Init>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80007e8:	f000 f9a2 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a06      	ldr	r2, [pc, #24]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80007f2:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_ADC_MspInit+0xdc>)
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b00b      	add	sp, #44	@ 0x2c
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	40012400 	.word	0x40012400
 8000804:	40021000 	.word	0x40021000
 8000808:	200000e8 	.word	0x200000e8
 800080c:	40020008 	.word	0x40020008

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_DMA_Init+0x38>)
 8000818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_DMA_Init+0x38>)
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	639a      	str	r2, [r3, #56]	@ 0x38
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_DMA_Init+0x38>)
 8000824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2101      	movs	r1, #1
 8000832:	2009      	movs	r0, #9
 8000834:	f001 fea8 	bl	8002588 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000838:	2009      	movs	r0, #9
 800083a:	f001 feba 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	40021000 	.word	0x40021000

0800084c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_GPIO_Init+0x40>)
 8000854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_GPIO_Init+0x40>)
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_GPIO_Init+0x40>)
 8000860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_GPIO_Init+0x40>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_GPIO_Init+0x40>)
 8000870:	2102      	movs	r1, #2
 8000872:	430a      	orrs	r2, r1
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_GPIO_Init+0x40>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	2202      	movs	r2, #2
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *) &ch, 1, 100);
 8000898:	1d39      	adds	r1, r7, #4
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <__io_putchar+0x20>)
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	2201      	movs	r2, #1
 80008a0:	f004 fb6e 	bl	8004f80 <HAL_UART_Transmit>
	return ch;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	2000019c 	.word	0x2000019c

080008b4 <CalculateTemp>:

int32_t CalculateTemp(uint16_t TempSense)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	1dbb      	adds	r3, r7, #6
 80008be:	801a      	strh	r2, [r3, #0]
	int32_t temp;
	TempSense = (3300 * TempSense)/ 3000;
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <CalculateTemp+0x78>)
 80008c6:	4353      	muls	r3, r2
 80008c8:	4919      	ldr	r1, [pc, #100]	@ (8000930 <CalculateTemp+0x7c>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fcae 	bl	800022c <__divsi3>
 80008d0:	0003      	movs	r3, r0
 80008d2:	001a      	movs	r2, r3
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	801a      	strh	r2, [r3, #0]
	temp = __LL_ADC_CALC_TEMPERATURE(3000, TempSense,LL_ADC_RESOLUTION_12B);
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <CalculateTemp+0x80>)
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <CalculateTemp+0x84>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d01b      	beq.n	800091c <CalculateTemp+0x68>
 80008e4:	1dbb      	adds	r3, r7, #6
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <CalculateTemp+0x7c>)
 80008ea:	4353      	muls	r3, r2
 80008ec:	4910      	ldr	r1, [pc, #64]	@ (8000930 <CalculateTemp+0x7c>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff fc12 	bl	8000118 <__udivsi3>
 80008f4:	0003      	movs	r3, r0
 80008f6:	001a      	movs	r2, r3
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <CalculateTemp+0x84>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2264      	movs	r2, #100	@ 0x64
 8000900:	4353      	muls	r3, r2
 8000902:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <CalculateTemp+0x80>)
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	0011      	movs	r1, r2
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <CalculateTemp+0x84>)
 800090a:	8812      	ldrh	r2, [r2, #0]
 800090c:	1a8a      	subs	r2, r1, r2
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff fc8b 	bl	800022c <__divsi3>
 8000916:	0003      	movs	r3, r0
 8000918:	331e      	adds	r3, #30
 800091a:	e000      	b.n	800091e <CalculateTemp+0x6a>
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <CalculateTemp+0x88>)
 800091e:	60fb      	str	r3, [r7, #12]
	return temp;
 8000920:	68fb      	ldr	r3, [r7, #12]
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b004      	add	sp, #16
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	00000ce4 	.word	0x00000ce4
 8000930:	00000bb8 	.word	0x00000bb8
 8000934:	1fff75ca 	.word	0x1fff75ca
 8000938:	1fff75a8 	.word	0x1fff75a8
 800093c:	00007fff 	.word	0x00007fff

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fbac 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f850 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f7ff ff7e 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 8000950:	f7ff ff5e 	bl	8000810 <MX_DMA_Init>
  MX_ADC1_Init();
 8000954:	f7ff fe6c 	bl	8000630 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000958:	f000 fac6 	bl	8000ee8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800095c:	f000 f9e0 	bl	8000d20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <main+0x94>)
 8000962:	0018      	movs	r0, r3
 8000964:	f001 fc68 	bl	8002238 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)u16AdcBuf, 2);
 8000968:	491b      	ldr	r1, [pc, #108]	@ (80009d8 <main+0x98>)
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <main+0x94>)
 800096c:	2202      	movs	r2, #2
 800096e:	0018      	movs	r0, r3
 8000970:	f000 ff2e 	bl	80017d0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <main+0x9c>)
 8000976:	0018      	movs	r0, r3
 8000978:	f003 f970 	bl	8003c5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <main+0x9c>)
 800097e:	2108      	movs	r1, #8
 8000980:	0018      	movs	r0, r3
 8000982:	f003 fa27 	bl	8003dd4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(bPrintFlag)
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <main+0xa0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0fb      	beq.n	8000986 <main+0x46>
	  {
		  bPrintFlag = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <main+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]

		  printf("Duty Cycle: %lu %%\r\n", htim3.Instance->CCR3/100);
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <main+0x9c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800099a:	2164      	movs	r1, #100	@ 0x64
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fbbb 	bl	8000118 <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <main+0xa4>)
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f005 fa5c 	bl	8005e68 <iprintf>
		  printf("Temperature: %li degC \r\n", CalculateTemp(u16AdcBuf[1]));
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <main+0x98>)
 80009b2:	885b      	ldrh	r3, [r3, #2]
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ff7d 	bl	80008b4 <CalculateTemp>
 80009ba:	0002      	movs	r2, r0
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <main+0xa8>)
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f005 fa51 	bl	8005e68 <iprintf>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)u16AdcBuf, 2);
 80009c6:	4904      	ldr	r1, [pc, #16]	@ (80009d8 <main+0x98>)
 80009c8:	4b02      	ldr	r3, [pc, #8]	@ (80009d4 <main+0x94>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 feff 	bl	80017d0 <HAL_ADC_Start_DMA>
	  if(bPrintFlag)
 80009d2:	e7d8      	b.n	8000986 <main+0x46>
 80009d4:	20000084 	.word	0x20000084
 80009d8:	20000144 	.word	0x20000144
 80009dc:	20000150 	.word	0x20000150
 80009e0:	20000148 	.word	0x20000148
 80009e4:	08006bb8 	.word	0x08006bb8
 80009e8:	08006bd0 	.word	0x08006bd0

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b093      	sub	sp, #76	@ 0x4c
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	2410      	movs	r4, #16
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2338      	movs	r3, #56	@ 0x38
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f005 fa8f 	bl	8005f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a02:	003b      	movs	r3, r7
 8000a04:	0018      	movs	r0, r3
 8000a06:	2310      	movs	r3, #16
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f005 fa88 	bl	8005f20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f002 fa01 	bl	8002e1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a28:	0021      	movs	r1, r4
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2240      	movs	r2, #64	@ 0x40
 8000a34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2202      	movs	r2, #2
 8000a3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2202      	movs	r2, #2
 8000a40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	0292      	lsls	r2, r2, #10
 8000a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	0492      	lsls	r2, r2, #18
 8000a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	0592      	lsls	r2, r2, #22
 8000a64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fa23 	bl	8002eb4 <HAL_RCC_OscConfig>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a72:	f000 f85d 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	003b      	movs	r3, r7
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2102      	movs	r1, #2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fd28 	bl	80034e8 <HAL_RCC_ClockConfig>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a9c:	f000 f848 	bl	8000b30 <Error_Handler>
  }
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b013      	add	sp, #76	@ 0x4c
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	uint16_t pwmValue;
	// Map ADC value to PWM duty cycle
	pwmValue = (u16AdcBuf[0] * 9999) / 4095;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ab8:	4353      	muls	r3, r2
 8000aba:	490b      	ldr	r1, [pc, #44]	@ (8000ae8 <HAL_ADC_ConvCpltCallback+0x40>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff fbb5 	bl	800022c <__divsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	210e      	movs	r1, #14
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	801a      	strh	r2, [r3, #0]
	// Update PWM output
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwmValue);
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <HAL_ADC_ConvCpltCallback+0x44>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	187a      	adds	r2, r7, r1
 8000ad2:	8812      	ldrh	r2, [r2, #0]
 8000ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b004      	add	sp, #16
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	20000144 	.word	0x20000144
 8000ae4:	0000270f 	.word	0x0000270f
 8000ae8:	00000fff 	.word	0x00000fff
 8000aec:	20000150 	.word	0x20000150

08000af0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	static uint16_t  count = 0;
	if(count++ > 100)
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	b291      	uxth	r1, r2
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b02:	8011      	strh	r1, [r2, #0]
 8000b04:	2b64      	cmp	r3, #100	@ 0x64
 8000b06:	d909      	bls.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		bPrintFlag = 1;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		count = 0;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 fee8 	bl	80018ec <HAL_ADC_Stop_DMA>
	}
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000014a 	.word	0x2000014a
 8000b28:	20000148 	.word	0x20000148
 8000b2c:	20000084 	.word	0x20000084

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	0549      	lsls	r1, r1, #21
 8000b64:	430a      	orrs	r2, r1
 8000b66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_MspInit+0x44>)
 8000b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	055b      	lsls	r3, r3, #21
 8000b70:	4013      	ands	r3, r2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 fae2 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <DMA1_Channel1_IRQHandler+0x14>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fe86 	bl	80028d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	200000e8 	.word	0x200000e8

08000bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <TIM3_IRQHandler+0x14>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f003 f9e6 	bl	8003fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	20000150 	.word	0x20000150

08000be8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e00a      	b.n	8000c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfa:	e000      	b.n	8000bfe <_read+0x16>
 8000bfc:	bf00      	nop
 8000bfe:	0001      	movs	r1, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	b2ca      	uxtb	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf0      	blt.n	8000bfa <_read+0x12>
  }

  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b006      	add	sp, #24
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e009      	b.n	8000c48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fe27 	bl	8000890 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf1      	blt.n	8000c34 <_write+0x12>
  }
  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b006      	add	sp, #24
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:

int _close(int file)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	0192      	lsls	r2, r2, #6
 8000c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	0018      	movs	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_isatty>:

int _isatty(int file)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f005 f972 	bl	8005fcc <__errno>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d2      	adds	r2, r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <_sbrk+0x64>)
 8000d04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20009000 	.word	0x20009000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	2000014c 	.word	0x2000014c
 8000d1c:	20000380 	.word	0x20000380

08000d20 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	2328      	movs	r3, #40	@ 0x28
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f005 f8f5 	bl	8005f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	231c      	movs	r3, #28
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f005 f8ed 	bl	8005f20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	003b      	movs	r3, r7
 8000d48:	0018      	movs	r0, r3
 8000d4a:	231c      	movs	r3, #28
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f005 f8e6 	bl	8005f20 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d56:	4a30      	ldr	r2, [pc, #192]	@ (8000e18 <MX_TIM3_Init+0xf8>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d5c:	223f      	movs	r2, #63	@ 0x3f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d68:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <MX_TIM3_Init+0xfc>)
 8000d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f002 ff16 	bl	8003bac <HAL_TIM_Base_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d84:	f7ff fed4 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	2128      	movs	r1, #40	@ 0x28
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	0152      	lsls	r2, r2, #5
 8000d90:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d92:	187a      	adds	r2, r7, r1
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f003 fb0d 	bl	80043b8 <HAL_TIM_ConfigClockSource>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000da2:	f7ff fec5 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 ffb3 	bl	8003d14 <HAL_TIM_PWM_Init>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000db2:	f7ff febd 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	211c      	movs	r1, #28
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc4:	187a      	adds	r2, r7, r1
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000dc8:	0011      	movs	r1, r2
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f003 fffc 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000dd4:	f7ff feac 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd8:	003b      	movs	r3, r7
 8000dda:	2260      	movs	r2, #96	@ 0x60
 8000ddc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dde:	003b      	movs	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df0:	0039      	movs	r1, r7
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000df4:	2208      	movs	r2, #8
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 f9de 	bl	80041b8 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000e00:	f7ff fe96 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <MX_TIM3_Init+0xf4>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f830 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b00e      	add	sp, #56	@ 0x38
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000150 	.word	0x20000150
 8000e18:	40000400 	.word	0x40000400
 8000e1c:	0000270f 	.word	0x0000270f

08000e20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d113      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	2102      	movs	r1, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e42:	2202      	movs	r2, #2
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f001 fb9a 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e54:	2010      	movs	r0, #16
 8000e56:	f001 fbac 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40000400 	.word	0x40000400
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	240c      	movs	r4, #12
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f005 f84e 	bl	8005f20 <memset>
  if(timHandle->Instance==TIM3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <HAL_TIM_MspPostInit+0x70>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d121      	bne.n	8000ed2 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e94:	2102      	movs	r1, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_TIM_MspPostInit+0x74>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea6:	0021      	movs	r1, r4
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_TIM_MspPostInit+0x78>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f001 fe41 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b009      	add	sp, #36	@ 0x24
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	50000400 	.word	0x50000400

08000ee8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000eee:	4a24      	ldr	r2, [pc, #144]	@ (8000f80 <MX_USART2_UART_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000ef4:	22e1      	movs	r2, #225	@ 0xe1
 8000ef6:	0252      	lsls	r2, r2, #9
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f003 ffce 	bl	8004ed4 <HAL_UART_Init>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f3c:	f7ff fdf8 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	0018      	movs	r0, r3
 8000f46:	f004 fdeb 	bl	8005b20 <HAL_UARTEx_SetTxFifoThreshold>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f4e:	f7ff fdef 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f004 fe22 	bl	8005ba0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f60:	f7ff fde6 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <MX_USART2_UART_Init+0x94>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f004 fda0 	bl	8005aac <HAL_UARTEx_DisableFifoMode>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f70:	f7ff fdde 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	2000019c 	.word	0x2000019c
 8000f80:	40004400 	.word	0x40004400

08000f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b097      	sub	sp, #92	@ 0x5c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	2344      	movs	r3, #68	@ 0x44
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f004 ffc2 	bl	8005f20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	2410      	movs	r4, #16
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2334      	movs	r3, #52	@ 0x34
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f004 ffba 	bl	8005f20 <memset>
  if(uartHandle->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <HAL_UART_MspInit+0xb8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d13e      	bne.n	8001034 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2202      	movs	r2, #2
 8000fba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f002 fc39 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fce:	f7ff fdaf 	bl	8000b30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	0289      	lsls	r1, r1, #10
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_UART_MspInit+0xbc>)
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffe:	2201      	movs	r2, #1
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001006:	2144      	movs	r1, #68	@ 0x44
 8001008:	187b      	adds	r3, r7, r1
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2202      	movs	r2, #2
 8001012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2201      	movs	r2, #1
 8001024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	187a      	adds	r2, r7, r1
 8001028:	23a0      	movs	r3, #160	@ 0xa0
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	0011      	movs	r1, r2
 800102e:	0018      	movs	r0, r3
 8001030:	f001 fd90 	bl	8002b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b017      	add	sp, #92	@ 0x5c
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	40004400 	.word	0x40004400
 8001040:	40021000 	.word	0x40021000

08001044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001046:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001048:	f000 f825 	bl	8001096 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	@ (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001072:	f004 ffb1 	bl	8005fd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001076:	f7ff fc63 	bl	8000940 <main>

0800107a <LoopForever>:

LoopForever:
  b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   r0, =_estack
 800107c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001088:	08006d0c 	.word	0x08006d0c
  ldr r2, =_sbss
 800108c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001090:	20000380 	.word	0x20000380

08001094 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_COMP_IRQHandler>

08001096 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_Init+0x3c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_Init+0x3c>)
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	0049      	lsls	r1, r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 f810 	bl	80010e0 <HAL_InitTick>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d003      	beq.n	80010cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e001      	b.n	80010d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fd36 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <HAL_InitTick+0x88>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d02b      	beq.n	8001150 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_InitTick+0x8c>)
 80010fa:	681c      	ldr	r4, [r3, #0]
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <HAL_InitTick+0x88>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	0019      	movs	r1, r3
 8001102:	23fa      	movs	r3, #250	@ 0xfa
 8001104:	0098      	lsls	r0, r3, #2
 8001106:	f7ff f807 	bl	8000118 <__udivsi3>
 800110a:	0003      	movs	r3, r0
 800110c:	0019      	movs	r1, r3
 800110e:	0020      	movs	r0, r4
 8001110:	f7ff f802 	bl	8000118 <__udivsi3>
 8001114:	0003      	movs	r3, r0
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fa5b 	bl	80025d2 <HAL_SYSTICK_Config>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d112      	bne.n	8001146 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d80a      	bhi.n	800113c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	2301      	movs	r3, #1
 800112a:	425b      	negs	r3, r3
 800112c:	2200      	movs	r2, #0
 800112e:	0018      	movs	r0, r3
 8001130:	f001 fa2a 	bl	8002588 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <HAL_InitTick+0x90>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e00d      	b.n	8001158 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e008      	b.n	8001158 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001146:	230f      	movs	r3, #15
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e003      	b.n	8001158 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001158:	230f      	movs	r3, #15
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	781b      	ldrb	r3, [r3, #0]
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b005      	add	sp, #20
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	20000008 	.word	0x20000008
 800116c:	20000000 	.word	0x20000000
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_IncTick+0x1c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x20>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	18d2      	adds	r2, r2, r3
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_IncTick+0x20>)
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	20000008 	.word	0x20000008
 8001194:	20000230 	.word	0x20000230

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	20000230 	.word	0x20000230

080011ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80011bc:	401a      	ands	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	601a      	str	r2, [r3, #0]
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	fe3fffff 	.word	0xfe3fffff

080011d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	23e0      	movs	r3, #224	@ 0xe0
 80011e2:	045b      	lsls	r3, r3, #17
 80011e4:	4013      	ands	r3, r2
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	2104      	movs	r1, #4
 8001202:	400a      	ands	r2, r1
 8001204:	2107      	movs	r1, #7
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	43d2      	mvns	r2, r2
 800120c:	401a      	ands	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2104      	movs	r1, #4
 8001212:	400b      	ands	r3, r1
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4099      	lsls	r1, r3
 8001218:	000b      	movs	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}

08001228 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	2104      	movs	r1, #4
 800123a:	400a      	ands	r2, r1
 800123c:	2107      	movs	r1, #7
 800123e:	4091      	lsls	r1, r2
 8001240:	000a      	movs	r2, r1
 8001242:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2104      	movs	r1, #4
 8001248:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800124a:	40da      	lsrs	r2, r3
 800124c:	0013      	movs	r3, r2
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}

08001256 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	23c0      	movs	r3, #192	@ 0xc0
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4013      	ands	r3, r2
 8001268:	d101      	bne.n	800126e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800126e:	2300      	movs	r3, #0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	211f      	movs	r1, #31
 800128c:	400a      	ands	r2, r1
 800128e:	210f      	movs	r1, #15
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	43d2      	mvns	r2, r2
 8001296:	401a      	ands	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0e9b      	lsrs	r3, r3, #26
 800129c:	210f      	movs	r1, #15
 800129e:	4019      	ands	r1, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	201f      	movs	r0, #31
 80012a4:	4003      	ands	r3, r0
 80012a6:	4099      	lsls	r1, r3
 80012a8:	000b      	movs	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	035b      	lsls	r3, r3, #13
 80012ca:	0b5b      	lsrs	r3, r3, #13
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	0352      	lsls	r2, r2, #13
 80012ec:	0b52      	lsrs	r2, r2, #13
 80012ee:	43d2      	mvns	r2, r2
 80012f0:	401a      	ands	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b002      	add	sp, #8
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	400b      	ands	r3, r1
 8001320:	4904      	ldr	r1, [pc, #16]	@ (8001334 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001322:	400b      	ands	r3, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b004      	add	sp, #16
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	07ffff00 	.word	0x07ffff00

08001338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	4a05      	ldr	r2, [pc, #20]	@ (800135c <LL_ADC_EnableInternalRegulator+0x24>)
 8001346:	4013      	ands	r3, r2
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	0552      	lsls	r2, r2, #21
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	6fffffe8 	.word	0x6fffffe8

08001360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	055b      	lsls	r3, r3, #21
 8001370:	401a      	ands	r2, r3
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	055b      	lsls	r3, r3, #21
 8001376:	429a      	cmp	r2, r3
 8001378:	d101      	bne.n	800137e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <LL_ADC_Enable+0x20>)
 8001396:	4013      	ands	r3, r2
 8001398:	2201      	movs	r2, #1
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	7fffffe8 	.word	0x7fffffe8

080013ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <LL_ADC_Disable+0x20>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2202      	movs	r2, #2
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	7fffffe8 	.word	0x7fffffe8

080013d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <LL_ADC_IsEnabled+0x18>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <LL_ADC_IsEnabled+0x1a>
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d101      	bne.n	800140a <LL_ADC_IsDisableOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_IsDisableOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <LL_ADC_REG_StartConversion+0x20>)
 8001422:	4013      	ands	r3, r2
 8001424:	2204      	movs	r2, #4
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}
 8001434:	7fffffe8 	.word	0x7fffffe8

08001438 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <LL_ADC_REG_StopConversion+0x20>)
 8001446:	4013      	ands	r3, r2
 8001448:	2210      	movs	r2, #16
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}
 8001458:	7fffffe8 	.word	0x7fffffe8

0800145c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2204      	movs	r2, #4
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d101      	bne.n	8001474 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b002      	add	sp, #8
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	231f      	movs	r3, #31
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e17f      	b.n	80017a6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10a      	bne.n	80014c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff f93b 	bl	800072c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2254      	movs	r2, #84	@ 0x54
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff49 	bl	8001360 <LL_ADC_IsInternalRegulatorEnabled>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d115      	bne.n	80014fe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff ff2e 	bl	8001338 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014dc:	4bb4      	ldr	r3, [pc, #720]	@ (80017b0 <HAL_ADC_Init+0x330>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	49b4      	ldr	r1, [pc, #720]	@ (80017b4 <HAL_ADC_Init+0x334>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7fe fe18 	bl	8000118 <__udivsi3>
 80014e8:	0003      	movs	r3, r0
 80014ea:	3301      	adds	r3, #1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff2c 	bl	8001360 <LL_ADC_IsInternalRegulatorEnabled>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d10f      	bne.n	800152c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001510:	2210      	movs	r2, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	2201      	movs	r2, #1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001524:	231f      	movs	r3, #31
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff93 	bl	800145c <LL_ADC_REG_IsConversionOngoing>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	2210      	movs	r2, #16
 8001540:	4013      	ands	r3, r2
 8001542:	d000      	beq.n	8001546 <HAL_ADC_Init+0xc6>
 8001544:	e122      	b.n	800178c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d000      	beq.n	800154e <HAL_ADC_Init+0xce>
 800154c:	e11e      	b.n	800178c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a99      	ldr	r2, [pc, #612]	@ (80017b8 <HAL_ADC_Init+0x338>)
 8001554:	4013      	ands	r3, r2
 8001556:	2202      	movs	r2, #2
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff ff34 	bl	80013d0 <LL_ADC_IsEnabled>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d000      	beq.n	800156e <HAL_ADC_Init+0xee>
 800156c:	e0ad      	b.n	80016ca <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e1b      	ldrb	r3, [r3, #24]
 8001576:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001578:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7e5b      	ldrb	r3, [r3, #25]
 800157e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001580:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7e9b      	ldrb	r3, [r3, #26]
 8001586:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001588:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_ADC_Init+0x118>
 8001592:	2380      	movs	r3, #128	@ 0x80
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	e000      	b.n	800159a <HAL_ADC_Init+0x11a>
 8001598:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800159a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015a0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da04      	bge.n	80015b4 <HAL_ADC_Init+0x134>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	e001      	b.n	80015b8 <HAL_ADC_Init+0x138>
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80015b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	212c      	movs	r1, #44	@ 0x2c
 80015be:	5c5b      	ldrb	r3, [r3, r1]
 80015c0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015c2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	5c9b      	ldrb	r3, [r3, r2]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d115      	bne.n	8001600 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e9b      	ldrb	r3, [r3, #26]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d105      	bne.n	80015e8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2280      	movs	r2, #128	@ 0x80
 80015e0:	0252      	lsls	r2, r2, #9
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e00b      	b.n	8001600 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ec:	2220      	movs	r2, #32
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	2201      	movs	r2, #1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00a      	beq.n	800161e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800160c:	23e0      	movs	r3, #224	@ 0xe0
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001616:	4313      	orrs	r3, r2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a65      	ldr	r2, [pc, #404]	@ (80017bc <HAL_ADC_Init+0x33c>)
 8001626:	4013      	ands	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	430a      	orrs	r2, r1
 8001632:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0f9b      	lsrs	r3, r3, #30
 800163a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001640:	4313      	orrs	r3, r2
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4313      	orrs	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	223c      	movs	r2, #60	@ 0x3c
 800164c:	5c9b      	ldrb	r3, [r3, r2]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d111      	bne.n	8001676 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0f9b      	lsrs	r3, r3, #30
 8001658:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800165e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001664:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800166a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4313      	orrs	r3, r2
 8001670:	2201      	movs	r2, #1
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_ADC_Init+0x340>)
 800167e:	4013      	ands	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	430a      	orrs	r2, r1
 800168a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	23c0      	movs	r3, #192	@ 0xc0
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	429a      	cmp	r2, r3
 8001696:	d018      	beq.n	80016ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800169c:	2380      	movs	r3, #128	@ 0x80
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d012      	beq.n	80016ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	061b      	lsls	r3, r3, #24
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d00c      	beq.n	80016ca <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016b0:	4b44      	ldr	r3, [pc, #272]	@ (80017c4 <HAL_ADC_Init+0x344>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <HAL_ADC_Init+0x348>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	23f0      	movs	r3, #240	@ 0xf0
 80016c0:	039b      	lsls	r3, r3, #14
 80016c2:	401a      	ands	r2, r3
 80016c4:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <HAL_ADC_Init+0x344>)
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f7ff fd8a 	bl	80011ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e2:	493a      	ldr	r1, [pc, #232]	@ (80017cc <HAL_ADC_Init+0x34c>)
 80016e4:	001a      	movs	r2, r3
 80016e6:	f7ff fd82 	bl	80011ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2110      	movs	r1, #16
 80016fe:	4249      	negs	r1, r1
 8001700:	430a      	orrs	r2, r1
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
 8001704:	e018      	b.n	8001738 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	039b      	lsls	r3, r3, #14
 800170e:	429a      	cmp	r2, r3
 8001710:	d112      	bne.n	8001738 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	3b01      	subs	r3, #1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	221c      	movs	r2, #28
 8001722:	4013      	ands	r3, r2
 8001724:	2210      	movs	r2, #16
 8001726:	4252      	negs	r2, r2
 8001728:	409a      	lsls	r2, r3
 800172a:	0011      	movs	r1, r2
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2100      	movs	r1, #0
 800173e:	0018      	movs	r0, r3
 8001740:	f7ff fd72 	bl	8001228 <LL_ADC_GetSamplingTimeCommonChannels>
 8001744:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800174a:	429a      	cmp	r2, r3
 800174c:	d10b      	bne.n	8001766 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	2203      	movs	r2, #3
 800175a:	4393      	bics	r3, r2
 800175c:	2201      	movs	r2, #1
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001764:	e01c      	b.n	80017a0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	2212      	movs	r2, #18
 800176c:	4393      	bics	r3, r2
 800176e:	2210      	movs	r2, #16
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177a:	2201      	movs	r2, #1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001782:	231f      	movs	r3, #31
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800178a:	e009      	b.n	80017a0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	2210      	movs	r2, #16
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001798:	231f      	movs	r3, #31
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017a0:	231f      	movs	r3, #31
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b008      	add	sp, #32
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	20000000 	.word	0x20000000
 80017b4:	00030d40 	.word	0x00030d40
 80017b8:	fffffefd 	.word	0xfffffefd
 80017bc:	ffde0201 	.word	0xffde0201
 80017c0:	1ffffc02 	.word	0x1ffffc02
 80017c4:	40012708 	.word	0x40012708
 80017c8:	ffc3ffff 	.word	0xffc3ffff
 80017cc:	07ffff04 	.word	0x07ffff04

080017d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff fe3b 	bl	800145c <LL_ADC_REG_IsConversionOngoing>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d16c      	bne.n	80018c4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2254      	movs	r2, #84	@ 0x54
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_Start_DMA+0x28>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e06c      	b.n	80018d2 <HAL_ADC_Start_DMA+0x102>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2254      	movs	r2, #84	@ 0x54
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	d113      	bne.n	8001834 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff fddd 	bl	80013d0 <LL_ADC_IsEnabled>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d004      	beq.n	8001824 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff fdc4 	bl	80013ac <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001834:	2517      	movs	r5, #23
 8001836:	197c      	adds	r4, r7, r5
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	0018      	movs	r0, r3
 800183c:	f000 faf2 	bl	8001e24 <ADC_Enable>
 8001840:	0003      	movs	r3, r0
 8001842:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001844:	002c      	movs	r4, r5
 8001846:	193b      	adds	r3, r7, r4
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d13e      	bne.n	80018cc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_ADC_Start_DMA+0x10c>)
 8001854:	4013      	ands	r3, r2
 8001856:	2280      	movs	r2, #128	@ 0x80
 8001858:	0052      	lsls	r2, r2, #1
 800185a:	431a      	orrs	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800186a:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <HAL_ADC_Start_DMA+0x110>)
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001872:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <HAL_ADC_Start_DMA+0x114>)
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800187a:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <HAL_ADC_Start_DMA+0x118>)
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	221c      	movs	r2, #28
 8001884:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2254      	movs	r2, #84	@ 0x54
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2110      	movs	r1, #16
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3340      	adds	r3, #64	@ 0x40
 80018a8:	0019      	movs	r1, r3
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	193c      	adds	r4, r7, r4
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f000 ff26 	bl	8002700 <HAL_DMA_Start_IT>
 80018b4:	0003      	movs	r3, r0
 80018b6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fda9 	bl	8001414 <LL_ADC_REG_StartConversion>
 80018c2:	e003      	b.n	80018cc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018c4:	2317      	movs	r3, #23
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	2202      	movs	r2, #2
 80018ca:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018cc:	2317      	movs	r3, #23
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	781b      	ldrb	r3, [r3, #0]
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b006      	add	sp, #24
 80018d8:	bdb0      	pop	{r4, r5, r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	fffff0fe 	.word	0xfffff0fe
 80018e0:	08001fed 	.word	0x08001fed
 80018e4:	080020b5 	.word	0x080020b5
 80018e8:	080020d3 	.word	0x080020d3

080018ec <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2254      	movs	r2, #84	@ 0x54
 80018f8:	5c9b      	ldrb	r3, [r3, r2]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Stop_DMA+0x16>
 80018fe:	2302      	movs	r3, #2
 8001900:	e05f      	b.n	80019c2 <HAL_ADC_Stop_DMA+0xd6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2254      	movs	r2, #84	@ 0x54
 8001906:	2101      	movs	r1, #1
 8001908:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800190a:	250f      	movs	r5, #15
 800190c:	197c      	adds	r4, r7, r5
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 fa45 	bl	8001da0 <ADC_ConversionStop>
 8001916:	0003      	movs	r3, r0
 8001918:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800191a:	0029      	movs	r1, r5
 800191c:	187b      	adds	r3, r7, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d147      	bne.n	80019b4 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001928:	2225      	movs	r2, #37	@ 0x25
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d112      	bne.n	8001958 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001936:	000d      	movs	r5, r1
 8001938:	187c      	adds	r4, r7, r1
 800193a:	0018      	movs	r0, r3
 800193c:	f000 ff66 	bl	800280c <HAL_DMA_Abort>
 8001940:	0003      	movs	r3, r0
 8001942:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001944:	197b      	adds	r3, r7, r5
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	2240      	movs	r2, #64	@ 0x40
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2110      	movs	r1, #16
 8001964:	438a      	bics	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001968:	220f      	movs	r2, #15
 800196a:	18bb      	adds	r3, r7, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001972:	18bc      	adds	r4, r7, r2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0018      	movs	r0, r3
 8001978:	f000 fada 	bl	8001f30 <ADC_Disable>
 800197c:	0003      	movs	r3, r0
 800197e:	7023      	strb	r3, [r4, #0]
 8001980:	e003      	b.n	800198a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	0018      	movs	r0, r3
 8001986:	f000 fad3 	bl	8001f30 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800198a:	230f      	movs	r3, #15
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <HAL_ADC_Stop_DMA+0xe0>)
 800199a:	4013      	ands	r3, r2
 800199c:	2201      	movs	r2, #1
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2101      	movs	r1, #1
 80019b0:	438a      	bics	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2254      	movs	r2, #84	@ 0x54
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80019bc:	230f      	movs	r3, #15
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	fffffefe 	.word	0xfffffefe

080019d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fa:	2317      	movs	r3, #23
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2254      	movs	r2, #84	@ 0x54
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x24>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e1c0      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x3a6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2254      	movs	r2, #84	@ 0x54
 8001a18:	2101      	movs	r1, #1
 8001a1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fd1b 	bl	800145c <LL_ADC_REG_IsConversionOngoing>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d000      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x3c>
 8001a2a:	e1a3      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d100      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x46>
 8001a34:	e143      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a46:	4ac1      	ldr	r2, [pc, #772]	@ (8001d4c <HAL_ADC_ConfigChannel+0x35c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0019      	movs	r1, r3
 8001a56:	0010      	movs	r0, r2
 8001a58:	f7ff fc2e 	bl	80012b8 <LL_ADC_REG_SetSequencerChAdd>
 8001a5c:	e0c9      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	211f      	movs	r1, #31
 8001a68:	400b      	ands	r3, r1
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	4099      	lsls	r1, r3
 8001a6e:	000b      	movs	r3, r1
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	035b      	lsls	r3, r3, #13
 8001a7c:	0b5b      	lsrs	r3, r3, #13
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x9c>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	221f      	movs	r2, #31
 8001a88:	4013      	ands	r3, r2
 8001a8a:	e098      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d000      	beq.n	8001a98 <HAL_ADC_ConfigChannel+0xa8>
 8001a96:	e091      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1cc>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d000      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xb4>
 8001aa2:	e089      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x1c8>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d000      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0xc0>
 8001aae:	e081      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x1c4>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d000      	beq.n	8001abc <HAL_ADC_ConfigChannel+0xcc>
 8001aba:	e079      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1c0>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d000      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0xd8>
 8001ac6:	e071      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1bc>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d000      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0xe4>
 8001ad2:	e069      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x1b8>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2240      	movs	r2, #64	@ 0x40
 8001ada:	4013      	ands	r3, r2
 8001adc:	d000      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0xf0>
 8001ade:	e061      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x1b4>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2280      	movs	r2, #128	@ 0x80
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d000      	beq.n	8001aec <HAL_ADC_ConfigChannel+0xfc>
 8001aea:	e059      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x1b0>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d151      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x1ac>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d149      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x1a8>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d141      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x1a4>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d139      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1a0>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	015b      	lsls	r3, r3, #5
 8001b24:	4013      	ands	r3, r2
 8001b26:	d131      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x19c>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	019b      	lsls	r3, r3, #6
 8001b30:	4013      	ands	r3, r2
 8001b32:	d129      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x198>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d121      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x194>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d119      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x190>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	025b      	lsls	r3, r3, #9
 8001b54:	4013      	ands	r3, r2
 8001b56:	d111      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x18c>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	029b      	lsls	r3, r3, #10
 8001b60:	4013      	ands	r3, r2
 8001b62:	d109      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x188>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	02db      	lsls	r3, r3, #11
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d001      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x184>
 8001b70:	2312      	movs	r3, #18
 8001b72:	e024      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e022      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2311      	movs	r3, #17
 8001b7a:	e020      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	e01e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	230f      	movs	r3, #15
 8001b82:	e01c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	230e      	movs	r3, #14
 8001b86:	e01a      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	230d      	movs	r3, #13
 8001b8a:	e018      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	e016      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b90:	230b      	movs	r3, #11
 8001b92:	e014      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b94:	230a      	movs	r3, #10
 8001b96:	e012      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	2309      	movs	r3, #9
 8001b9a:	e010      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	e00e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e00a      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2305      	movs	r3, #5
 8001baa:	e008      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e006      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6852      	ldr	r2, [r2, #4]
 8001bc2:	201f      	movs	r0, #31
 8001bc4:	4002      	ands	r2, r0
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	000a      	movs	r2, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d808      	bhi.n	8001bf2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	001a      	movs	r2, r3
 8001bee:	f7ff fb43 	bl	8001278 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	001a      	movs	r2, r3
 8001c00:	f7ff fb7e 	bl	8001300 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db00      	blt.n	8001c0e <HAL_ADC_ConfigChannel+0x21e>
 8001c0c:	e0bc      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0e:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fadf 	bl	80011d4 <LL_ADC_GetCommonPathInternalCh>
 8001c16:	0003      	movs	r3, r0
 8001c18:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d54 <HAL_ADC_ConfigChannel+0x364>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d122      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c2c:	d11d      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0412      	lsls	r2, r2, #16
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4a46      	ldr	r2, [pc, #280]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001c38:	0019      	movs	r1, r3
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	f7ff fab6 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c40:	4b45      	ldr	r3, [pc, #276]	@ (8001d58 <HAL_ADC_ConfigChannel+0x368>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4945      	ldr	r1, [pc, #276]	@ (8001d5c <HAL_ADC_ConfigChannel+0x36c>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7fe fa66 	bl	8000118 <__udivsi3>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	0013      	movs	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c5a:	e002      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c68:	e08e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d60 <HAL_ADC_ConfigChannel+0x370>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10e      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	045b      	lsls	r3, r3, #17
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d109      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	0452      	lsls	r2, r2, #17
 8001c84:	4313      	orrs	r3, r2
 8001c86:	4a32      	ldr	r2, [pc, #200]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0010      	movs	r0, r2
 8001c8c:	f7ff fa8e 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
 8001c90:	e07a      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a33      	ldr	r2, [pc, #204]	@ (8001d64 <HAL_ADC_ConfigChannel+0x374>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d000      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x2ae>
 8001c9c:	e074      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	03db      	lsls	r3, r3, #15
 8001ca4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ca6:	d000      	beq.n	8001caa <HAL_ADC_ConfigChannel+0x2ba>
 8001ca8:	e06e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2280      	movs	r2, #128	@ 0x80
 8001cae:	03d2      	lsls	r2, r2, #15
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	4a27      	ldr	r2, [pc, #156]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f7ff fa78 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
 8001cbc:	e064      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d004      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_ADC_ConfigChannel+0x35c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d107      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0019      	movs	r1, r3
 8001cde:	0010      	movs	r0, r2
 8001ce0:	f7ff fafb 	bl	80012da <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da4d      	bge.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fa70 	bl	80011d4 <LL_ADC_GetCommonPathInternalCh>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <HAL_ADC_ConfigChannel+0x364>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d108      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a18      	ldr	r2, [pc, #96]	@ (8001d68 <HAL_ADC_ConfigChannel+0x378>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a11      	ldr	r2, [pc, #68]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	0010      	movs	r0, r2
 8001d0e:	f7ff fa4d 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
 8001d12:	e039      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_ADC_ConfigChannel+0x370>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d108      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <HAL_ADC_ConfigChannel+0x37c>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f7ff fa3f 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
 8001d2e:	e02b      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_ADC_ConfigChannel+0x374>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d126      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <HAL_ADC_ConfigChannel+0x380>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	4a03      	ldr	r2, [pc, #12]	@ (8001d50 <HAL_ADC_ConfigChannel+0x360>)
 8001d42:	0019      	movs	r1, r3
 8001d44:	0010      	movs	r0, r2
 8001d46:	f7ff fa31 	bl	80011ac <LL_ADC_SetCommonPathInternalCh>
 8001d4a:	e01d      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x398>
 8001d4c:	80000004 	.word	0x80000004
 8001d50:	40012708 	.word	0x40012708
 8001d54:	b0001000 	.word	0xb0001000
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	00030d40 	.word	0x00030d40
 8001d60:	b8004000 	.word	0xb8004000
 8001d64:	b4002000 	.word	0xb4002000
 8001d68:	ff7fffff 	.word	0xff7fffff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	2220      	movs	r2, #32
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d80:	2317      	movs	r3, #23
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2254      	movs	r2, #84	@ 0x54
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
}
 8001d96:	0018      	movs	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b006      	add	sp, #24
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)

08001da0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fb55 	bl	800145c <LL_ADC_REG_IsConversionOngoing>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d031      	beq.n	8001e1a <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff fb19 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d104      	bne.n	8001dce <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff fb35 	bl	8001438 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dce:	f7ff f9e3 	bl	8001198 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001dd6:	e01a      	b.n	8001e0e <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001dd8:	f7ff f9de 	bl	8001198 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d913      	bls.n	8001e0e <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	2210      	movs	r2, #16
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e02:	2201      	movs	r2, #1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e006      	b.n	8001e1c <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2204      	movs	r2, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d1de      	bne.n	8001dd8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff facb 	bl	80013d0 <LL_ADC_IsEnabled>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d000      	beq.n	8001e40 <ADC_Enable+0x1c>
 8001e3e:	e069      	b.n	8001f14 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4a36      	ldr	r2, [pc, #216]	@ (8001f20 <ADC_Enable+0xfc>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d00d      	beq.n	8001e68 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	2210      	movs	r2, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e056      	b.n	8001f16 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fa8b 	bl	8001388 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e72:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <ADC_Enable+0x100>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff f9ad 	bl	80011d4 <LL_ADC_GetCommonPathInternalCh>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	4013      	ands	r3, r2
 8001e82:	d00f      	beq.n	8001ea4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e84:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <ADC_Enable+0x104>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4928      	ldr	r1, [pc, #160]	@ (8001f2c <ADC_Enable+0x108>)
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7fe f944 	bl	8000118 <__udivsi3>
 8001e90:	0003      	movs	r3, r0
 8001e92:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001e94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e96:	e002      	b.n	8001e9e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e5b      	ldrb	r3, [r3, #25]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d033      	beq.n	8001f14 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001eac:	f7ff f974 	bl	8001198 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb4:	e027      	b.n	8001f06 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff fa88 	bl	80013d0 <LL_ADC_IsEnabled>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d104      	bne.n	8001ece <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fa5d 	bl	8001388 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ece:	f7ff f963 	bl	8001198 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d914      	bls.n	8001f06 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d00d      	beq.n	8001f06 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	2210      	movs	r2, #16
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	2201      	movs	r2, #1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d1d0      	bne.n	8001eb6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	80000017 	.word	0x80000017
 8001f24:	40012708 	.word	0x40012708
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	00030d40 	.word	0x00030d40

08001f30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fa58 	bl	80013f2 <LL_ADC_IsDisableOngoing>
 8001f42:	0003      	movs	r3, r0
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff fa40 	bl	80013d0 <LL_ADC_IsEnabled>
 8001f50:	1e03      	subs	r3, r0, #0
 8001f52:	d046      	beq.n	8001fe2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d143      	bne.n	8001fe2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2205      	movs	r2, #5
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10d      	bne.n	8001f84 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fa1d 	bl	80013ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2203      	movs	r2, #3
 8001f78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f7a:	f7ff f90d 	bl	8001198 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f82:	e028      	b.n	8001fd6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	2210      	movs	r2, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2201      	movs	r2, #1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e021      	b.n	8001fe4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fa0:	f7ff f8fa 	bl	8001198 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d913      	bls.n	8001fd6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e006      	b.n	8001fe4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d1de      	bne.n	8001fa0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bd80      	pop	{r7, pc}

08001fec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	2250      	movs	r2, #80	@ 0x50
 8002000:	4013      	ands	r3, r2
 8002002:	d141      	bne.n	8002088 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff f91d 	bl	8001256 <LL_ADC_REG_IsTriggerSourceSWStart>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d02e      	beq.n	800207e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	7e9b      	ldrb	r3, [r3, #26]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12a      	bne.n	800207e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2208      	movs	r2, #8
 8002030:	4013      	ands	r3, r2
 8002032:	2b08      	cmp	r3, #8
 8002034:	d123      	bne.n	800207e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff fa0e 	bl	800145c <LL_ADC_REG_IsConversionOngoing>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d110      	bne.n	8002066 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	210c      	movs	r1, #12
 8002050:	438a      	bics	r2, r1
 8002052:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <ADC_DMAConvCplt+0xc4>)
 800205a:	4013      	ands	r3, r2
 800205c:	2201      	movs	r2, #1
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	659a      	str	r2, [r3, #88]	@ 0x58
 8002064:	e00b      	b.n	800207e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	2220      	movs	r2, #32
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2201      	movs	r2, #1
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fd11 	bl	8000aa8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002086:	e00f      	b.n	80020a8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	2210      	movs	r2, #16
 800208e:	4013      	ands	r3, r2
 8002090:	d004      	beq.n	800209c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff fca3 	bl	80019e0 <HAL_ADC_ErrorCallback>
}
 800209a:	e005      	b.n	80020a8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	0010      	movs	r0, r2
 80020a6:	4798      	blx	r3
}
 80020a8:	46c0      	nop			@ (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	fffffefe 	.word	0xfffffefe

080020b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff fc83 	bl	80019d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	431a      	orrs	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2204      	movs	r2, #4
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fc70 	bl	80019e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002100:	46c0      	nop			@ (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}

08002108 <LL_ADC_GetCommonClock>:
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	23f0      	movs	r3, #240	@ 0xf0
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	4013      	ands	r3, r2
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <LL_ADC_GetClock>:
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	0f9b      	lsrs	r3, r3, #30
 8002130:	079b      	lsls	r3, r3, #30
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}

0800213a <LL_ADC_SetCalibrationFactor>:
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	22b4      	movs	r2, #180	@ 0xb4
 8002148:	589b      	ldr	r3, [r3, r2]
 800214a:	227f      	movs	r2, #127	@ 0x7f
 800214c:	4393      	bics	r3, r2
 800214e:	001a      	movs	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	21b4      	movs	r1, #180	@ 0xb4
 8002158:	505a      	str	r2, [r3, r1]
}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}

08002162 <LL_ADC_GetCalibrationFactor>:
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	22b4      	movs	r2, #180	@ 0xb4
 800216e:	589b      	ldr	r3, [r3, r2]
 8002170:	227f      	movs	r2, #127	@ 0x7f
 8002172:	4013      	ands	r3, r2
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <LL_ADC_Enable>:
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <LL_ADC_Enable+0x20>)
 800218a:	4013      	ands	r3, r2
 800218c:	2201      	movs	r2, #1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	46c0      	nop			@ (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}
 800219c:	7fffffe8 	.word	0x7fffffe8

080021a0 <LL_ADC_Disable>:
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <LL_ADC_Disable+0x20>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	2202      	movs	r2, #2
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	7fffffe8 	.word	0x7fffffe8

080021c4 <LL_ADC_IsEnabled>:
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <LL_ADC_IsEnabled+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_IsEnabled+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <LL_ADC_StartCalibration>:
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a05      	ldr	r2, [pc, #20]	@ (800220c <LL_ADC_StartCalibration+0x24>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	0612      	lsls	r2, r2, #24
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	609a      	str	r2, [r3, #8]
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	7fffffe8 	.word	0x7fffffe8

08002210 <LL_ADC_IsCalibrationOnGoing>:
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	0fdb      	lsrs	r3, r3, #31
 800221e:	07da      	lsls	r2, r3, #31
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	429a      	cmp	r2, r3
 8002226:	d101      	bne.n	800222c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800222c:	2300      	movs	r3, #0
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b08b      	sub	sp, #44	@ 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2254      	movs	r2, #84	@ 0x54
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADCEx_Calibration_Start+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e0dd      	b.n	8002412 <HAL_ADCEx_Calibration_Start+0x1da>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2254      	movs	r2, #84	@ 0x54
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800225e:	231f      	movs	r3, #31
 8002260:	18fc      	adds	r4, r7, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff fe63 	bl	8001f30 <ADC_Disable>
 800226a:	0003      	movs	r3, r0
 800226c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff ffa6 	bl	80021c4 <LL_ADC_IsEnabled>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d000      	beq.n	800227e <HAL_ADCEx_Calibration_Start+0x46>
 800227c:	e0bc      	b.n	80023f8 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	4a66      	ldr	r2, [pc, #408]	@ (800241c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002284:	4013      	ands	r3, r2
 8002286:	2202      	movs	r2, #2
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a62      	ldr	r2, [pc, #392]	@ (8002420 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	495f      	ldr	r1, [pc, #380]	@ (8002424 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80022a6:	400a      	ands	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ae:	e02d      	b.n	800230c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ff97 	bl	80021e8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022ba:	e014      	b.n	80022e6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d90d      	bls.n	80022e6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	2212      	movs	r2, #18
 80022d0:	4393      	bics	r3, r2
 80022d2:	2210      	movs	r2, #16
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2254      	movs	r2, #84	@ 0x54
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e095      	b.n	8002412 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ff90 	bl	8002210 <LL_ADC_IsCalibrationOnGoing>
 80022f0:	1e03      	subs	r3, r0, #0
 80022f2:	d1e3      	bne.n	80022bc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff ff32 	bl	8002162 <LL_ADC_GetCalibrationFactor>
 80022fe:	0002      	movs	r2, r0
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	189b      	adds	r3, r3, r2
 8002304:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	3301      	adds	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	2b07      	cmp	r3, #7
 8002310:	d9ce      	bls.n	80022b0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002312:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fd feff 	bl	8000118 <__udivsi3>
 800231a:	0003      	movs	r3, r0
 800231c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff ff2a 	bl	800217c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fef8 	bl	8002122 <LL_ADC_GetClock>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d11b      	bne.n	800236e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002336:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff fee5 	bl	8002108 <LL_ADC_GetCommonClock>
 800233e:	0003      	movs	r3, r0
 8002340:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	23e0      	movs	r3, #224	@ 0xe0
 8002346:	035b      	lsls	r3, r3, #13
 8002348:	429a      	cmp	r2, r3
 800234a:	d310      	bcc.n	800236e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	3b03      	subs	r3, #3
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	0013      	movs	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002360:	e002      	b.n	8002368 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a3a      	ldr	r2, [r7, #32]
 8002374:	0011      	movs	r1, r2
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff fedf 	bl	800213a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ff0d 	bl	80021a0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002386:	f7fe ff07 	bl	8001198 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800238e:	e01b      	b.n	80023c8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002390:	f7fe ff02 	bl	8001198 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d914      	bls.n	80023c8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff ff0e 	bl	80021c4 <LL_ADC_IsEnabled>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	2210      	movs	r2, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e024      	b.n	8002412 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff fef9 	bl	80021c4 <LL_ADC_IsEnabled>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d1dc      	bne.n	8002390 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	2203      	movs	r2, #3
 80023ec:	4393      	bics	r3, r2
 80023ee:	2201      	movs	r2, #1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023f6:	e005      	b.n	8002404 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	2210      	movs	r2, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2254      	movs	r2, #84	@ 0x54
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800240c:	231f      	movs	r3, #31
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781b      	ldrb	r3, [r3, #0]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b00b      	add	sp, #44	@ 0x2c
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	fffffefd 	.word	0xfffffefd
 8002420:	00008003 	.word	0x00008003
 8002424:	ffff7ffc 	.word	0xffff7ffc
 8002428:	0002f1ff 	.word	0x0002f1ff
 800242c:	40012708 	.word	0x40012708

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	0002      	movs	r2, r0
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7f      	cmp	r3, #127	@ 0x7f
 8002442:	d809      	bhi.n	8002458 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	001a      	movs	r2, r3
 800244a:	231f      	movs	r3, #31
 800244c:	401a      	ands	r2, r3
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__NVIC_EnableIRQ+0x30>)
 8002450:	2101      	movs	r1, #1
 8002452:	4091      	lsls	r1, r2
 8002454:	000a      	movs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b7f      	cmp	r3, #127	@ 0x7f
 8002478:	d828      	bhi.n	80024cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <__NVIC_SetPriority+0xd4>)
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	33c0      	adds	r3, #192	@ 0xc0
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	589b      	ldr	r3, [r3, r2]
 800248a:	1dfa      	adds	r2, r7, #7
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	0011      	movs	r1, r2
 8002490:	2203      	movs	r2, #3
 8002492:	400a      	ands	r2, r1
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	21ff      	movs	r1, #255	@ 0xff
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	43d2      	mvns	r2, r2
 800249e:	401a      	ands	r2, r3
 80024a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	22ff      	movs	r2, #255	@ 0xff
 80024a8:	401a      	ands	r2, r3
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	0018      	movs	r0, r3
 80024b0:	2303      	movs	r3, #3
 80024b2:	4003      	ands	r3, r0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b8:	481f      	ldr	r0, [pc, #124]	@ (8002538 <__NVIC_SetPriority+0xd4>)
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	430a      	orrs	r2, r1
 80024c4:	33c0      	adds	r3, #192	@ 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ca:	e031      	b.n	8002530 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024cc:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <__NVIC_SetPriority+0xd8>)
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0019      	movs	r1, r3
 80024d4:	230f      	movs	r3, #15
 80024d6:	400b      	ands	r3, r1
 80024d8:	3b08      	subs	r3, #8
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3306      	adds	r3, #6
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1dfa      	adds	r2, r7, #7
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	0011      	movs	r1, r2
 80024ec:	2203      	movs	r2, #3
 80024ee:	400a      	ands	r2, r1
 80024f0:	00d2      	lsls	r2, r2, #3
 80024f2:	21ff      	movs	r1, #255	@ 0xff
 80024f4:	4091      	lsls	r1, r2
 80024f6:	000a      	movs	r2, r1
 80024f8:	43d2      	mvns	r2, r2
 80024fa:	401a      	ands	r2, r3
 80024fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	22ff      	movs	r2, #255	@ 0xff
 8002504:	401a      	ands	r2, r3
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	2303      	movs	r3, #3
 800250e:	4003      	ands	r3, r0
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002514:	4809      	ldr	r0, [pc, #36]	@ (800253c <__NVIC_SetPriority+0xd8>)
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	001c      	movs	r4, r3
 800251c:	230f      	movs	r3, #15
 800251e:	4023      	ands	r3, r4
 8002520:	3b08      	subs	r3, #8
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	430a      	orrs	r2, r1
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	18c3      	adds	r3, r0, r3
 800252c:	3304      	adds	r3, #4
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b003      	add	sp, #12
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	045b      	lsls	r3, r3, #17
 8002550:	429a      	cmp	r2, r3
 8002552:	d301      	bcc.n	8002558 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002554:	2301      	movs	r3, #1
 8002556:	e010      	b.n	800257a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <SysTick_Config+0x44>)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	3a01      	subs	r2, #1
 800255e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002560:	2301      	movs	r3, #1
 8002562:	425b      	negs	r3, r3
 8002564:	2103      	movs	r1, #3
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff ff7c 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <SysTick_Config+0x44>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <SysTick_Config+0x44>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	210f      	movs	r1, #15
 8002594:	187b      	adds	r3, r7, r1
 8002596:	1c02      	adds	r2, r0, #0
 8002598:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	187b      	adds	r3, r7, r1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b004      	add	sp, #16
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	0002      	movs	r2, r0
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff33 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ffaf 	bl	8002540 <SysTick_Config>
 80025e2:	0003      	movs	r3, r0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e077      	b.n	80026ee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a3d      	ldr	r2, [pc, #244]	@ (80026f8 <HAL_DMA_Init+0x10c>)
 8002604:	4694      	mov	ip, r2
 8002606:	4463      	add	r3, ip
 8002608:	2114      	movs	r1, #20
 800260a:	0018      	movs	r0, r3
 800260c:	f7fd fd84 	bl	8000118 <__udivsi3>
 8002610:	0003      	movs	r3, r0
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2225      	movs	r2, #37	@ 0x25
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4934      	ldr	r1, [pc, #208]	@ (80026fc <HAL_DMA_Init+0x110>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa23 	bl	8002ab4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	429a      	cmp	r2, r3
 8002678:	d102      	bne.n	8002680 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	213f      	movs	r1, #63	@ 0x3f
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002696:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d011      	beq.n	80026c4 <HAL_DMA_Init+0xd8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d80d      	bhi.n	80026c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fa2e 	bl	8002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e008      	b.n	80026d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2225      	movs	r2, #37	@ 0x25
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	@ 0x24
 80026e8:	2100      	movs	r1, #0
 80026ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	bffdfff8 	.word	0xbffdfff8
 80026fc:	ffff800f 	.word	0xffff800f

08002700 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2317      	movs	r3, #23
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2224      	movs	r2, #36	@ 0x24
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Start_IT+0x24>
 8002720:	2302      	movs	r3, #2
 8002722:	e06f      	b.n	8002804 <HAL_DMA_Start_IT+0x104>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	2101      	movs	r1, #1
 800272a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2225      	movs	r2, #37	@ 0x25
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d157      	bne.n	80027e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2225      	movs	r2, #37	@ 0x25
 800273c:	2102      	movs	r1, #2
 800273e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	438a      	bics	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f969 	bl	8002a34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	210e      	movs	r1, #14
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00f      	b.n	800279c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2104      	movs	r1, #4
 8002788:	438a      	bics	r2, r1
 800278a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	210a      	movs	r1, #10
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	025b      	lsls	r3, r3, #9
 80027a6:	4013      	ands	r3, r2
 80027a8:	d008      	beq.n	80027bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b4:	2180      	movs	r1, #128	@ 0x80
 80027b6:	0049      	lsls	r1, r1, #1
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	0049      	lsls	r1, r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e00a      	b.n	80027fe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2224      	movs	r2, #36	@ 0x24
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80027f6:	2317      	movs	r3, #23
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80027fe:	2317      	movs	r3, #23
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e050      	b.n	80028c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2225      	movs	r2, #37	@ 0x25
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d008      	beq.n	800283c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e041      	b.n	80028c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	210e      	movs	r1, #14
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	491c      	ldr	r1, [pc, #112]	@ (80028c8 <HAL_DMA_Abort+0xbc>)
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800286c:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <HAL_DMA_Abort+0xc0>)
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	221c      	movs	r2, #28
 8002876:	4013      	ands	r3, r2
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_DMA_Abort+0xc0>)
 800287e:	430a      	orrs	r2, r1
 8002880:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800288a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289e:	490a      	ldr	r1, [pc, #40]	@ (80028c8 <HAL_DMA_Abort+0xbc>)
 80028a0:	400a      	ands	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2225      	movs	r2, #37	@ 0x25
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2224      	movs	r2, #36	@ 0x24
 80028ba:	2100      	movs	r1, #0
 80028bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	fffffeff 	.word	0xfffffeff
 80028cc:	40020000 	.word	0x40020000

080028d0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80028d8:	4b55      	ldr	r3, [pc, #340]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	221c      	movs	r2, #28
 80028ec:	4013      	ands	r3, r2
 80028ee:	2204      	movs	r2, #4
 80028f0:	409a      	lsls	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	d027      	beq.n	800294a <HAL_DMA_IRQHandler+0x7a>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4013      	ands	r3, r2
 8002900:	d023      	beq.n	800294a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2220      	movs	r2, #32
 800290a:	4013      	ands	r3, r2
 800290c:	d107      	bne.n	800291e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2104      	movs	r1, #4
 800291a:	438a      	bics	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800291e:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	221c      	movs	r2, #28
 8002928:	4013      	ands	r3, r2
 800292a:	2204      	movs	r2, #4
 800292c:	409a      	lsls	r2, r3
 800292e:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	2b00      	cmp	r3, #0
 800293a:	d100      	bne.n	800293e <HAL_DMA_IRQHandler+0x6e>
 800293c:	e073      	b.n	8002a26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	0010      	movs	r0, r2
 8002946:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002948:	e06d      	b.n	8002a26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	221c      	movs	r2, #28
 8002950:	4013      	ands	r3, r2
 8002952:	2202      	movs	r2, #2
 8002954:	409a      	lsls	r2, r3
 8002956:	0013      	movs	r3, r2
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	d02e      	beq.n	80029bc <HAL_DMA_IRQHandler+0xec>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2202      	movs	r2, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d02a      	beq.n	80029bc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	4013      	ands	r3, r2
 8002970:	d10b      	bne.n	800298a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	210a      	movs	r1, #10
 800297e:	438a      	bics	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2225      	movs	r2, #37	@ 0x25
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800298a:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	221c      	movs	r2, #28
 8002994:	4013      	ands	r3, r2
 8002996:	2202      	movs	r2, #2
 8002998:	409a      	lsls	r2, r3
 800299a:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	@ 0x24
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03a      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	0010      	movs	r0, r2
 80029b8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80029ba:	e034      	b.n	8002a26 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	221c      	movs	r2, #28
 80029c2:	4013      	ands	r3, r2
 80029c4:	2208      	movs	r2, #8
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4013      	ands	r3, r2
 80029ce:	d02b      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x158>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	d027      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	210e      	movs	r1, #14
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	221c      	movs	r2, #28
 80029f2:	4013      	ands	r3, r2
 80029f4:	2201      	movs	r2, #1
 80029f6:	409a      	lsls	r2, r3
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_DMA_IRQHandler+0x160>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2225      	movs	r2, #37	@ 0x25
 8002a08:	2101      	movs	r1, #1
 8002a0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	@ 0x24
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	0010      	movs	r0, r2
 8002a24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	46c0      	nop			@ (mov r8, r8)
}
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40020000 	.word	0x40020000

08002a34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <DMA_SetConfig+0x7c>)
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	221c      	movs	r2, #28
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <DMA_SetConfig+0x7c>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d108      	bne.n	8002a96 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a94:	e007      	b.n	8002aa6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	60da      	str	r2, [r3, #12]
}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	4a10      	ldr	r2, [pc, #64]	@ (8002b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ac4:	4694      	mov	ip, r2
 8002ac6:	4463      	add	r3, ip
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	001a      	movs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	23ff      	movs	r3, #255	@ 0xff
 8002ad8:	4013      	ands	r3, r2
 8002ada:	3b08      	subs	r3, #8
 8002adc:	2114      	movs	r1, #20
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd fb1a 	bl	8000118 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002aec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	221f      	movs	r2, #31
 8002af2:	4013      	ands	r3, r2
 8002af4:	2201      	movs	r2, #1
 8002af6:	409a      	lsls	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	10008200 	.word	0x10008200
 8002b08:	40020880 	.word	0x40020880

08002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	223f      	movs	r2, #63	@ 0x3f
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b22:	4694      	mov	ip, r2
 8002b24:	4463      	add	r3, ip
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	001a      	movs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	1000823f 	.word	0x1000823f
 8002b50:	40020940 	.word	0x40020940

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b62:	e147      	b.n	8002df4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4091      	lsls	r1, r2
 8002b6e:	000a      	movs	r2, r1
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d100      	bne.n	8002b7c <HAL_GPIO_Init+0x28>
 8002b7a:	e138      	b.n	8002dee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d005      	beq.n	8002b94 <HAL_GPIO_Init+0x40>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d130      	bne.n	8002bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bca:	2201      	movs	r2, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	2201      	movs	r2, #1
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d017      	beq.n	8002c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	43da      	mvns	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2203      	movs	r2, #3
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d123      	bne.n	8002c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	58d3      	ldr	r3, [r2, r3]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2207      	movs	r2, #7
 8002c50:	4013      	ands	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2107      	movs	r1, #7
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	6939      	ldr	r1, [r7, #16]
 8002c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	409a      	lsls	r2, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	43da      	mvns	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	0013      	movs	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	23c0      	movs	r3, #192	@ 0xc0
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d100      	bne.n	8002cc8 <HAL_GPIO_Init+0x174>
 8002cc6:	e092      	b.n	8002dee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cc8:	4a50      	ldr	r2, [pc, #320]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3318      	adds	r3, #24
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	589b      	ldr	r3, [r3, r2]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4013      	ands	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	220f      	movs	r2, #15
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	0013      	movs	r3, r2
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	23a0      	movs	r3, #160	@ 0xa0
 8002cf0:	05db      	lsls	r3, r3, #23
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x1ca>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a45      	ldr	r2, [pc, #276]	@ (8002e10 <HAL_GPIO_Init+0x2bc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x1c6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a44      	ldr	r2, [pc, #272]	@ (8002e14 <HAL_GPIO_Init+0x2c0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x1c2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <HAL_GPIO_Init+0x2c4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x1be>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e006      	b.n	8002d20 <HAL_GPIO_Init+0x1cc>
 8002d12:	2305      	movs	r3, #5
 8002d14:	e004      	b.n	8002d20 <HAL_GPIO_Init+0x1cc>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e002      	b.n	8002d20 <HAL_GPIO_Init+0x1cc>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_GPIO_Init+0x1cc>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	2103      	movs	r1, #3
 8002d24:	400a      	ands	r2, r1
 8002d26:	00d2      	lsls	r2, r2, #3
 8002d28:	4093      	lsls	r3, r2
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d30:	4936      	ldr	r1, [pc, #216]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3318      	adds	r3, #24
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d3e:	4b33      	ldr	r3, [pc, #204]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	035b      	lsls	r3, r3, #13
 8002d56:	4013      	ands	r3, r2
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d62:	4b2a      	ldr	r3, [pc, #168]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d68:	4b28      	ldr	r3, [pc, #160]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43da      	mvns	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	039b      	lsls	r3, r3, #14
 8002d80:	4013      	ands	r3, r2
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d92:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002d94:	2384      	movs	r3, #132	@ 0x84
 8002d96:	58d3      	ldr	r3, [r2, r3]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002db8:	4914      	ldr	r1, [pc, #80]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002dba:	2284      	movs	r2, #132	@ 0x84
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002dc0:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	58d3      	ldr	r3, [r2, r3]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	025b      	lsls	r3, r3, #9
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002de6:	4909      	ldr	r1, [pc, #36]	@ (8002e0c <HAL_GPIO_Init+0x2b8>)
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	40da      	lsrs	r2, r3
 8002dfc:	1e13      	subs	r3, r2, #0
 8002dfe:	d000      	beq.n	8002e02 <HAL_GPIO_Init+0x2ae>
 8002e00:	e6b0      	b.n	8002b64 <HAL_GPIO_Init+0x10>
  }
}
 8002e02:	46c0      	nop			@ (mov r8, r8)
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b006      	add	sp, #24
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021800 	.word	0x40021800
 8002e10:	50000400 	.word	0x50000400
 8002e14:	50000800 	.word	0x50000800
 8002e18:	50000c00 	.word	0x50000c00

08002e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e24:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11f      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e40:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	0013      	movs	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4912      	ldr	r1, [pc, #72]	@ (8002e98 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd f962 	bl	8000118 <__udivsi3>
 8002e54:	0003      	movs	r3, r0
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e5a:	e008      	b.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e001      	b.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e009      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e6e:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	401a      	ands	r2, r3
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d0ed      	beq.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	fffff9ff 	.word	0xfffff9ff
 8002e94:	20000000 	.word	0x20000000
 8002e98:	000f4240 	.word	0x000f4240

08002e9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	23e0      	movs	r3, #224	@ 0xe0
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4013      	ands	r3, r2
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e2fe      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x1e>
 8002ed0:	e07c      	b.n	8002fcc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed2:	4bc3      	ldr	r3, [pc, #780]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2238      	movs	r2, #56	@ 0x38
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002edc:	4bc0      	ldr	r3, [pc, #768]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x3e>
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4013      	ands	r3, r2
 8002f02:	d062      	beq.n	8002fca <HAL_RCC_OscConfig+0x116>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d15e      	bne.n	8002fca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e2d9      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	025b      	lsls	r3, r3, #9
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x78>
 8002f1c:	4bb0      	ldr	r3, [pc, #704]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4baf      	ldr	r3, [pc, #700]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	2180      	movs	r1, #128	@ 0x80
 8002f24:	0249      	lsls	r1, r1, #9
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e020      	b.n	8002f6e <HAL_RCC_OscConfig+0xba>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	23a0      	movs	r3, #160	@ 0xa0
 8002f32:	02db      	lsls	r3, r3, #11
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10e      	bne.n	8002f56 <HAL_RCC_OscConfig+0xa2>
 8002f38:	4ba9      	ldr	r3, [pc, #676]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4ba8      	ldr	r3, [pc, #672]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	02c9      	lsls	r1, r1, #11
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	4ba6      	ldr	r3, [pc, #664]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4ba5      	ldr	r3, [pc, #660]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f4c:	2180      	movs	r1, #128	@ 0x80
 8002f4e:	0249      	lsls	r1, r1, #9
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e00b      	b.n	8002f6e <HAL_RCC_OscConfig+0xba>
 8002f56:	4ba2      	ldr	r3, [pc, #648]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4ba1      	ldr	r3, [pc, #644]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f5c:	49a1      	ldr	r1, [pc, #644]	@ (80031e4 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	4b9f      	ldr	r3, [pc, #636]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b9e      	ldr	r3, [pc, #632]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	499f      	ldr	r1, [pc, #636]	@ (80031e8 <HAL_RCC_OscConfig+0x334>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d014      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f7fe f90f 	bl	8001198 <HAL_GetTick>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe f90a 	bl	8001198 <HAL_GetTick>
 8002f84:	0002      	movs	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e298      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4b93      	ldr	r3, [pc, #588]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	029b      	lsls	r3, r3, #10
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xcc>
 8002f9e:	e015      	b.n	8002fcc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f8fa 	bl	8001198 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002faa:	f7fe f8f5 	bl	8001198 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	@ 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e283      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	029b      	lsls	r3, r3, #10
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0xf6>
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d100      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x124>
 8002fd6:	e099      	b.n	800310c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd8:	4b81      	ldr	r3, [pc, #516]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2238      	movs	r2, #56	@ 0x38
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d102      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x144>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d002      	beq.n	8002ffe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d135      	bne.n	800306a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffe:	4b78      	ldr	r3, [pc, #480]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4013      	ands	r3, r2
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x162>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e256      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b72      	ldr	r3, [pc, #456]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a74      	ldr	r2, [pc, #464]	@ (80031ec <HAL_RCC_OscConfig+0x338>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	4b6e      	ldr	r3, [pc, #440]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d112      	bne.n	8003058 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003032:	4b6b      	ldr	r3, [pc, #428]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6e      	ldr	r2, [pc, #440]	@ (80031f0 <HAL_RCC_OscConfig+0x33c>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	4b67      	ldr	r3, [pc, #412]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003046:	4b66      	ldr	r3, [pc, #408]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	0adb      	lsrs	r3, r3, #11
 800304c:	2207      	movs	r2, #7
 800304e:	4013      	ands	r3, r2
 8003050:	4a68      	ldr	r2, [pc, #416]	@ (80031f4 <HAL_RCC_OscConfig+0x340>)
 8003052:	40da      	lsrs	r2, r3
 8003054:	4b68      	ldr	r3, [pc, #416]	@ (80031f8 <HAL_RCC_OscConfig+0x344>)
 8003056:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003058:	4b68      	ldr	r3, [pc, #416]	@ (80031fc <HAL_RCC_OscConfig+0x348>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe f83f 	bl	80010e0 <HAL_InitTick>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d051      	beq.n	800310a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e22c      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d030      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003072:	4b5b      	ldr	r3, [pc, #364]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5e      	ldr	r2, [pc, #376]	@ (80031f0 <HAL_RCC_OscConfig+0x33c>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	4b57      	ldr	r3, [pc, #348]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	4b56      	ldr	r3, [pc, #344]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b55      	ldr	r3, [pc, #340]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	0049      	lsls	r1, r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f880 	bl	8001198 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe f87b 	bl	8001198 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e209      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	4b4b      	ldr	r3, [pc, #300]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4013      	ands	r3, r2
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b48      	ldr	r3, [pc, #288]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a4a      	ldr	r2, [pc, #296]	@ (80031ec <HAL_RCC_OscConfig+0x338>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	021a      	lsls	r2, r3, #8
 80030cc:	4b44      	ldr	r3, [pc, #272]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b42      	ldr	r3, [pc, #264]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030da:	4949      	ldr	r1, [pc, #292]	@ (8003200 <HAL_RCC_OscConfig+0x34c>)
 80030dc:	400a      	ands	r2, r1
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f85a 	bl	8001198 <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fe f855 	bl	8001198 <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e1e3      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fc:	4b38      	ldr	r3, [pc, #224]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4013      	ands	r3, r2
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x236>
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2208      	movs	r2, #8
 8003112:	4013      	ands	r3, r2
 8003114:	d047      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003116:	4b32      	ldr	r3, [pc, #200]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2238      	movs	r2, #56	@ 0x38
 800311c:	4013      	ands	r3, r2
 800311e:	2b18      	cmp	r3, #24
 8003120:	d10a      	bne.n	8003138 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003122:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	d03c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x2f2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d138      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e1c5      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d019      	beq.n	8003174 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003142:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003144:	4b26      	ldr	r3, [pc, #152]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003146:	2101      	movs	r1, #1
 8003148:	430a      	orrs	r2, r1
 800314a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f824 	bl	8001198 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003156:	f7fe f81f 	bl	8001198 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1ad      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d0f1      	beq.n	8003156 <HAL_RCC_OscConfig+0x2a2>
 8003172:	e018      	b.n	80031a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003174:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 8003176:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 800317a:	2101      	movs	r1, #1
 800317c:	438a      	bics	r2, r1
 800317e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe f80a 	bl	8001198 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7fe f805 	bl	8001198 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e193      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1f1      	bne.n	800318a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2204      	movs	r2, #4
 80031ac:	4013      	ands	r3, r2
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2fe>
 80031b0:	e0c6      	b.n	8003340 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	231f      	movs	r3, #31
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2238      	movs	r2, #56	@ 0x38
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d11e      	bne.n	8003204 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x32c>)
 80031c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ca:	2202      	movs	r2, #2
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x31e>
 80031d0:	e0b6      	b.n	8003340 <HAL_RCC_OscConfig+0x48c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d000      	beq.n	80031dc <HAL_RCC_OscConfig+0x328>
 80031da:	e0b1      	b.n	8003340 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e171      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	fffeffff 	.word	0xfffeffff
 80031e8:	fffbffff 	.word	0xfffbffff
 80031ec:	ffff80ff 	.word	0xffff80ff
 80031f0:	ffffc7ff 	.word	0xffffc7ff
 80031f4:	00f42400 	.word	0x00f42400
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004
 8003200:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003204:	4bb1      	ldr	r3, [pc, #708]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	055b      	lsls	r3, r3, #21
 800320c:	4013      	ands	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_RCC_OscConfig+0x360>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x362>
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d011      	beq.n	800323e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4bac      	ldr	r3, [pc, #688]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800321c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800321e:	4bab      	ldr	r3, [pc, #684]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	0549      	lsls	r1, r1, #21
 8003224:	430a      	orrs	r2, r1
 8003226:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003228:	4ba8      	ldr	r3, [pc, #672]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800322a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800322c:	2380      	movs	r3, #128	@ 0x80
 800322e:	055b      	lsls	r3, r3, #21
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003236:	231f      	movs	r3, #31
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	4ba4      	ldr	r3, [pc, #656]	@ (80034d0 <HAL_RCC_OscConfig+0x61c>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4013      	ands	r3, r2
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324a:	4ba1      	ldr	r3, [pc, #644]	@ (80034d0 <HAL_RCC_OscConfig+0x61c>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4ba0      	ldr	r3, [pc, #640]	@ (80034d0 <HAL_RCC_OscConfig+0x61c>)
 8003250:	2180      	movs	r1, #128	@ 0x80
 8003252:	0049      	lsls	r1, r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003258:	f7fd ff9e 	bl	8001198 <HAL_GetTick>
 800325c:	0003      	movs	r3, r0
 800325e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd ff99 	bl	8001198 <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e127      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003274:	4b96      	ldr	r3, [pc, #600]	@ (80034d0 <HAL_RCC_OscConfig+0x61c>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x3e2>
 8003288:	4b90      	ldr	r3, [pc, #576]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800328a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800328c:	4b8f      	ldr	r3, [pc, #572]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800328e:	2101      	movs	r1, #1
 8003290:	430a      	orrs	r2, r1
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x41c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x404>
 800329e:	4b8b      	ldr	r3, [pc, #556]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032a2:	4b8a      	ldr	r3, [pc, #552]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032a4:	2104      	movs	r1, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032ae:	4b87      	ldr	r3, [pc, #540]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	430a      	orrs	r2, r1
 80032b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x41c>
 80032b8:	4b84      	ldr	r3, [pc, #528]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032bc:	4b83      	ldr	r3, [pc, #524]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032be:	2101      	movs	r1, #1
 80032c0:	438a      	bics	r2, r1
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032c4:	4b81      	ldr	r3, [pc, #516]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032c8:	4b80      	ldr	r3, [pc, #512]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032ca:	2104      	movs	r1, #4
 80032cc:	438a      	bics	r2, r1
 80032ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d014      	beq.n	8003302 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff5e 	bl	8001198 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e0:	e009      	b.n	80032f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd ff59 	bl	8001198 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	4a79      	ldr	r2, [pc, #484]	@ (80034d4 <HAL_RCC_OscConfig+0x620>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0e6      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	4b75      	ldr	r3, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	2202      	movs	r2, #2
 80032fc:	4013      	ands	r3, r2
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x42e>
 8003300:	e013      	b.n	800332a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd ff49 	bl	8001198 <HAL_GetTick>
 8003306:	0003      	movs	r3, r0
 8003308:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800330a:	e009      	b.n	8003320 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fd ff44 	bl	8001198 <HAL_GetTick>
 8003310:	0002      	movs	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	4a6f      	ldr	r2, [pc, #444]	@ (80034d4 <HAL_RCC_OscConfig+0x620>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0d1      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4b6a      	ldr	r3, [pc, #424]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800332a:	231f      	movs	r3, #31
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003338:	4b64      	ldr	r3, [pc, #400]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800333a:	4967      	ldr	r1, [pc, #412]	@ (80034d8 <HAL_RCC_OscConfig+0x624>)
 800333c:	400a      	ands	r2, r1
 800333e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d100      	bne.n	800334a <HAL_RCC_OscConfig+0x496>
 8003348:	e0bb      	b.n	80034c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334a:	4b60      	ldr	r3, [pc, #384]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2238      	movs	r2, #56	@ 0x38
 8003350:	4013      	ands	r3, r2
 8003352:	2b10      	cmp	r3, #16
 8003354:	d100      	bne.n	8003358 <HAL_RCC_OscConfig+0x4a4>
 8003356:	e07b      	b.n	8003450 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d156      	bne.n	800340e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b5a      	ldr	r3, [pc, #360]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003366:	495d      	ldr	r1, [pc, #372]	@ (80034dc <HAL_RCC_OscConfig+0x628>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd ff14 	bl	8001198 <HAL_GetTick>
 8003370:	0003      	movs	r3, r0
 8003372:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd ff0f 	bl	8001198 <HAL_GetTick>
 800337a:	0002      	movs	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e09d      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	@ 0x80
 800338e:	049b      	lsls	r3, r3, #18
 8003390:	4013      	ands	r3, r2
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a51      	ldr	r2, [pc, #324]	@ (80034e0 <HAL_RCC_OscConfig+0x62c>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	431a      	orrs	r2, r3
 80033c2:	4b42      	ldr	r3, [pc, #264]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c8:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	0449      	lsls	r1, r1, #17
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b3c      	ldr	r3, [pc, #240]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	0549      	lsls	r1, r1, #21
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fd fed8 	bl	8001198 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fd fed3 	bl	8001198 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e061      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003400:	4b32      	ldr	r3, [pc, #200]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	049b      	lsls	r3, r3, #18
 8003408:	4013      	ands	r3, r2
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x53a>
 800340c:	e059      	b.n	80034c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b2f      	ldr	r3, [pc, #188]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b2e      	ldr	r3, [pc, #184]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003414:	4931      	ldr	r1, [pc, #196]	@ (80034dc <HAL_RCC_OscConfig+0x628>)
 8003416:	400a      	ands	r2, r1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd febd 	bl	8001198 <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd feb8 	bl	8001198 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e046      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003436:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	049b      	lsls	r3, r3, #18
 800343e:	4013      	ands	r3, r2
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b21      	ldr	r3, [pc, #132]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 8003448:	4926      	ldr	r1, [pc, #152]	@ (80034e4 <HAL_RCC_OscConfig+0x630>)
 800344a:	400a      	ands	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e038      	b.n	80034c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e033      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x618>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2203      	movs	r2, #3
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	429a      	cmp	r2, r3
 800346e:	d126      	bne.n	80034be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2270      	movs	r2, #112	@ 0x70
 8003474:	401a      	ands	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d11f      	bne.n	80034be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	23fe      	movs	r3, #254	@ 0xfe
 8003482:	01db      	lsls	r3, r3, #7
 8003484:	401a      	ands	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d116      	bne.n	80034be <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	23f8      	movs	r3, #248	@ 0xf8
 8003494:	039b      	lsls	r3, r3, #14
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d10e      	bne.n	80034be <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	23e0      	movs	r3, #224	@ 0xe0
 80034a4:	051b      	lsls	r3, r3, #20
 80034a6:	401a      	ands	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	0f5b      	lsrs	r3, r3, #29
 80034b4:	075a      	lsls	r2, r3, #29
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b008      	add	sp, #32
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	00001388 	.word	0x00001388
 80034d8:	efffffff 	.word	0xefffffff
 80034dc:	feffffff 	.word	0xfeffffff
 80034e0:	11c1808c 	.word	0x11c1808c
 80034e4:	eefefffc 	.word	0xeefefffc

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0e9      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034fc:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2207      	movs	r2, #7
 8003502:	4013      	ands	r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d91e      	bls.n	8003548 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b73      	ldr	r3, [pc, #460]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2207      	movs	r2, #7
 8003510:	4393      	bics	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	4b70      	ldr	r3, [pc, #448]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800351c:	f7fd fe3c 	bl	8001198 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003524:	e009      	b.n	800353a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003526:	f7fd fe37 	bl	8001198 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	4a6a      	ldr	r2, [pc, #424]	@ (80036dc <HAL_RCC_ClockConfig+0x1f4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0ca      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2207      	movs	r2, #7
 8003540:	4013      	ands	r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2202      	movs	r2, #2
 800354e:	4013      	ands	r3, r2
 8003550:	d015      	beq.n	800357e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
 800355a:	d006      	beq.n	800356a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800355c:	4b60      	ldr	r3, [pc, #384]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b5f      	ldr	r3, [pc, #380]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003562:	21e0      	movs	r1, #224	@ 0xe0
 8003564:	01c9      	lsls	r1, r1, #7
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356a:	4b5d      	ldr	r3, [pc, #372]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	4a5d      	ldr	r2, [pc, #372]	@ (80036e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b59      	ldr	r3, [pc, #356]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	4013      	ands	r3, r2
 8003586:	d057      	beq.n	8003638 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003590:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	@ 0x80
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	4013      	ands	r3, r2
 800359a:	d12b      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e097      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035a8:	4b4d      	ldr	r3, [pc, #308]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	049b      	lsls	r3, r3, #18
 80035b0:	4013      	ands	r3, r2
 80035b2:	d11f      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e08b      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c0:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4013      	ands	r3, r2
 80035ca:	d113      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e07f      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d8:	4b41      	ldr	r3, [pc, #260]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035dc:	2202      	movs	r2, #2
 80035de:	4013      	ands	r3, r2
 80035e0:	d108      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e074      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	4b3e      	ldr	r3, [pc, #248]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	2202      	movs	r2, #2
 80035ec:	4013      	ands	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e06d      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f4:	4b3a      	ldr	r3, [pc, #232]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2207      	movs	r2, #7
 80035fa:	4393      	bics	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fdc6 	bl	8001198 <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003610:	e009      	b.n	8003626 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003612:	f7fd fdc1 	bl	8001198 <HAL_GetTick>
 8003616:	0002      	movs	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	4a2f      	ldr	r2, [pc, #188]	@ (80036dc <HAL_RCC_ClockConfig+0x1f4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e054      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2238      	movs	r2, #56	@ 0x38
 800362c:	401a      	ands	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	429a      	cmp	r2, r3
 8003636:	d1ec      	bne.n	8003612 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2207      	movs	r2, #7
 800363e:	4013      	ands	r3, r2
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d21e      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2207      	movs	r2, #7
 800364c:	4393      	bics	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	4b21      	ldr	r3, [pc, #132]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003658:	f7fd fd9e 	bl	8001198 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003660:	e009      	b.n	8003676 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fd fd99 	bl	8001198 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a1b      	ldr	r2, [pc, #108]	@ (80036dc <HAL_RCC_ClockConfig+0x1f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e02c      	b.n	80036d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003676:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2207      	movs	r2, #7
 800367c:	4013      	ands	r3, r2
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d1ee      	bne.n	8003662 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2204      	movs	r2, #4
 800368a:	4013      	ands	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800368e:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <HAL_RCC_ClockConfig+0x200>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036a2:	f000 f829 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036a6:	0001      	movs	r1, r0
 80036a8:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_RCC_ClockConfig+0x1f8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	220f      	movs	r2, #15
 80036b0:	401a      	ands	r2, r3
 80036b2:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <HAL_RCC_ClockConfig+0x204>)
 80036b4:	0092      	lsls	r2, r2, #2
 80036b6:	58d3      	ldr	r3, [r2, r3]
 80036b8:	221f      	movs	r2, #31
 80036ba:	4013      	ands	r3, r2
 80036bc:	000a      	movs	r2, r1
 80036be:	40da      	lsrs	r2, r3
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_ClockConfig+0x208>)
 80036c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_RCC_ClockConfig+0x20c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fd fd09 	bl	80010e0 <HAL_InitTick>
 80036ce:	0003      	movs	r3, r0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b004      	add	sp, #16
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022000 	.word	0x40022000
 80036dc:	00001388 	.word	0x00001388
 80036e0:	40021000 	.word	0x40021000
 80036e4:	fffff0ff 	.word	0xfffff0ff
 80036e8:	ffff8fff 	.word	0xffff8fff
 80036ec:	08006bec 	.word	0x08006bec
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b3c      	ldr	r3, [pc, #240]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2238      	movs	r2, #56	@ 0x38
 8003704:	4013      	ands	r3, r2
 8003706:	d10f      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003708:	4b39      	ldr	r3, [pc, #228]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0adb      	lsrs	r3, r3, #11
 800370e:	2207      	movs	r2, #7
 8003710:	4013      	ands	r3, r2
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	0013      	movs	r3, r2
 8003718:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	4835      	ldr	r0, [pc, #212]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800371e:	f7fc fcfb 	bl	8000118 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e05d      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003728:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2238      	movs	r2, #56	@ 0x38
 800372e:	4013      	ands	r3, r2
 8003730:	2b08      	cmp	r3, #8
 8003732:	d102      	bne.n	800373a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003734:	4b30      	ldr	r3, [pc, #192]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	e054      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373a:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2238      	movs	r2, #56	@ 0x38
 8003740:	4013      	ands	r3, r2
 8003742:	2b10      	cmp	r3, #16
 8003744:	d138      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003746:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2203      	movs	r2, #3
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003750:	4b27      	ldr	r3, [pc, #156]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	2207      	movs	r2, #7
 8003758:	4013      	ands	r3, r2
 800375a:	3301      	adds	r3, #1
 800375c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4824      	ldr	r0, [pc, #144]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003768:	f7fc fcd6 	bl	8000118 <__udivsi3>
 800376c:	0003      	movs	r3, r0
 800376e:	0019      	movs	r1, r3
 8003770:	4b1f      	ldr	r3, [pc, #124]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	227f      	movs	r2, #127	@ 0x7f
 8003778:	4013      	ands	r3, r2
 800377a:	434b      	muls	r3, r1
 800377c:	617b      	str	r3, [r7, #20]
        break;
 800377e:	e00d      	b.n	800379c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	481c      	ldr	r0, [pc, #112]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003784:	f7fc fcc8 	bl	8000118 <__udivsi3>
 8003788:	0003      	movs	r3, r0
 800378a:	0019      	movs	r1, r3
 800378c:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	227f      	movs	r2, #127	@ 0x7f
 8003794:	4013      	ands	r3, r2
 8003796:	434b      	muls	r3, r1
 8003798:	617b      	str	r3, [r7, #20]
        break;
 800379a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800379c:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0f5b      	lsrs	r3, r3, #29
 80037a2:	2207      	movs	r2, #7
 80037a4:	4013      	ands	r3, r2
 80037a6:	3301      	adds	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7fc fcb3 	bl	8000118 <__udivsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e015      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037b8:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2238      	movs	r2, #56	@ 0x38
 80037be:	4013      	ands	r3, r2
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d103      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037cc:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2238      	movs	r2, #56	@ 0x38
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b18      	cmp	r3, #24
 80037d6:	d103      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037d8:	23fa      	movs	r3, #250	@ 0xfa
 80037da:	01db      	lsls	r3, r3, #7
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e001      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037e4:	693b      	ldr	r3, [r7, #16]
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b006      	add	sp, #24
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	40021000 	.word	0x40021000
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b02      	ldr	r3, [pc, #8]	@ (800380c <HAL_RCC_GetHCLKFreq+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	20000000 	.word	0x20000000

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003814:	f7ff fff2 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003818:	0004      	movs	r4, r0
 800381a:	f7ff fb3f 	bl	8002e9c <LL_RCC_GetAPB1Prescaler>
 800381e:	0003      	movs	r3, r0
 8003820:	0b1a      	lsrs	r2, r3, #12
 8003822:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	58d3      	ldr	r3, [r2, r3]
 8003828:	221f      	movs	r2, #31
 800382a:	4013      	ands	r3, r2
 800382c:	40dc      	lsrs	r4, r3
 800382e:	0023      	movs	r3, r4
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	08006c2c 	.word	0x08006c2c

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003844:	2313      	movs	r3, #19
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800384c:	2312      	movs	r3, #18
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	029b      	lsls	r3, r3, #10
 800385c:	4013      	ands	r3, r2
 800385e:	d100      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003860:	e0a3      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2011      	movs	r0, #17
 8003864:	183b      	adds	r3, r7, r0
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4bc3      	ldr	r3, [pc, #780]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800386c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	055b      	lsls	r3, r3, #21
 8003872:	4013      	ands	r3, r2
 8003874:	d110      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4bc0      	ldr	r3, [pc, #768]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800387a:	4bbf      	ldr	r3, [pc, #764]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800387c:	2180      	movs	r1, #128	@ 0x80
 800387e:	0549      	lsls	r1, r1, #21
 8003880:	430a      	orrs	r2, r1
 8003882:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003884:	4bbc      	ldr	r3, [pc, #752]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	055b      	lsls	r3, r3, #21
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003892:	183b      	adds	r3, r7, r0
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003898:	4bb8      	ldr	r3, [pc, #736]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4bb7      	ldr	r3, [pc, #732]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800389e:	2180      	movs	r1, #128	@ 0x80
 80038a0:	0049      	lsls	r1, r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a6:	f7fd fc77 	bl	8001198 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ae:	e00b      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fd fc72 	bl	8001198 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d904      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80038be:	2313      	movs	r3, #19
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2203      	movs	r2, #3
 80038c4:	701a      	strb	r2, [r3, #0]
        break;
 80038c6:	e005      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c8:	4bac      	ldr	r3, [pc, #688]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	@ 0x80
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4013      	ands	r3, r2
 80038d2:	d0ed      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80038d4:	2313      	movs	r3, #19
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d154      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038de:	4ba6      	ldr	r3, [pc, #664]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d019      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d014      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038fa:	4b9f      	ldr	r3, [pc, #636]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fe:	4aa0      	ldr	r2, [pc, #640]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003900:	4013      	ands	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003904:	4b9c      	ldr	r3, [pc, #624]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003906:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003908:	4b9b      	ldr	r3, [pc, #620]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800390a:	2180      	movs	r1, #128	@ 0x80
 800390c:	0249      	lsls	r1, r1, #9
 800390e:	430a      	orrs	r2, r1
 8003910:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003912:	4b99      	ldr	r3, [pc, #612]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003914:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003916:	4b98      	ldr	r3, [pc, #608]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003918:	499a      	ldr	r1, [pc, #616]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800391a:	400a      	ands	r2, r1
 800391c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800391e:	4b96      	ldr	r3, [pc, #600]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2201      	movs	r2, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d016      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd fc34 	bl	8001198 <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003934:	e00c      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fd fc2f 	bl	8001198 <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	4a91      	ldr	r2, [pc, #580]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d904      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003946:	2313      	movs	r3, #19
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2203      	movs	r2, #3
 800394c:	701a      	strb	r2, [r3, #0]
            break;
 800394e:	e004      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003950:	4b89      	ldr	r3, [pc, #548]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d0ed      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800395a:	2313      	movs	r3, #19
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003964:	4b84      	ldr	r3, [pc, #528]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	4a85      	ldr	r2, [pc, #532]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003972:	4b81      	ldr	r3, [pc, #516]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003974:	430a      	orrs	r2, r1
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003978:	e00c      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800397a:	2312      	movs	r3, #18
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	2213      	movs	r2, #19
 8003980:	18ba      	adds	r2, r7, r2
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e005      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	2312      	movs	r3, #18
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2213      	movs	r2, #19
 800398e:	18ba      	adds	r2, r7, r2
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003994:	2311      	movs	r3, #17
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b76      	ldr	r3, [pc, #472]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a2:	4b75      	ldr	r3, [pc, #468]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a4:	4979      	ldr	r1, [pc, #484]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80039a6:	400a      	ands	r2, r1
 80039a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039b4:	4b70      	ldr	r3, [pc, #448]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	2203      	movs	r2, #3
 80039ba:	4393      	bics	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c4:	430a      	orrs	r2, r1
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2202      	movs	r2, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d2:	4b69      	ldr	r3, [pc, #420]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d6:	220c      	movs	r2, #12
 80039d8:	4393      	bics	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	4b65      	ldr	r3, [pc, #404]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e2:	430a      	orrs	r2, r1
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	4013      	ands	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f0:	4b61      	ldr	r3, [pc, #388]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	4a66      	ldr	r2, [pc, #408]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	@ 0x80
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	4a5f      	ldr	r2, [pc, #380]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	4b56      	ldr	r3, [pc, #344]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a20:	430a      	orrs	r2, r1
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	@ 0x80
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a30:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	4a52      	ldr	r2, [pc, #328]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	4b46      	ldr	r3, [pc, #280]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	01db      	lsls	r3, r3, #7
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6e:	4b42      	ldr	r3, [pc, #264]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	0899      	lsrs	r1, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	4b39      	ldr	r3, [pc, #228]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a92:	2180      	movs	r1, #128	@ 0x80
 8003a94:	0249      	lsls	r1, r1, #9
 8003a96:	430a      	orrs	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	031b      	lsls	r3, r3, #12
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aa6:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	4393      	bics	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab4:	4b30      	ldr	r3, [pc, #192]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	039b      	lsls	r3, r3, #14
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	4a35      	ldr	r2, [pc, #212]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ad4:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	03db      	lsls	r3, r3, #15
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aec:	2180      	movs	r1, #128	@ 0x80
 8003aee:	0449      	lsls	r1, r1, #17
 8003af0:	430a      	orrs	r2, r1
 8003af2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	03db      	lsls	r3, r3, #15
 8003afc:	4013      	ands	r3, r2
 8003afe:	d016      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b00:	4b1d      	ldr	r3, [pc, #116]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	4a27      	ldr	r2, [pc, #156]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	0019      	movs	r1, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b18:	2380      	movs	r3, #128	@ 0x80
 8003b1a:	045b      	lsls	r3, r3, #17
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b20:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b26:	2180      	movs	r1, #128	@ 0x80
 8003b28:	0449      	lsls	r1, r1, #17
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	4013      	ands	r3, r2
 8003b38:	d016      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	01db      	lsls	r3, r3, #7
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d106      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b5a:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	0249      	lsls	r1, r1, #9
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b68:	2312      	movs	r3, #18
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	781b      	ldrb	r3, [r3, #0]
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b006      	add	sp, #24
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	fffffcff 	.word	0xfffffcff
 8003b84:	fffeffff 	.word	0xfffeffff
 8003b88:	00001388 	.word	0x00001388
 8003b8c:	efffffff 	.word	0xefffffff
 8003b90:	fffff3ff 	.word	0xfffff3ff
 8003b94:	fff3ffff 	.word	0xfff3ffff
 8003b98:	ffcfffff 	.word	0xffcfffff
 8003b9c:	ffffcfff 	.word	0xffffcfff
 8003ba0:	ffbfffff 	.word	0xffbfffff
 8003ba4:	feffffff 	.word	0xfeffffff
 8003ba8:	ffff3fff 	.word	0xffff3fff

08003bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e04a      	b.n	8003c54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223d      	movs	r2, #61	@ 0x3d
 8003bc2:	5c9b      	ldrb	r3, [r3, r2]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	223c      	movs	r2, #60	@ 0x3c
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fd f923 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	223d      	movs	r2, #61	@ 0x3d
 8003bde:	2102      	movs	r1, #2
 8003be0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f000 fcd9 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2248      	movs	r2, #72	@ 0x48
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	223e      	movs	r2, #62	@ 0x3e
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	223f      	movs	r2, #63	@ 0x3f
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	2101      	movs	r1, #1
 8003c10:	5499      	strb	r1, [r3, r2]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2241      	movs	r2, #65	@ 0x41
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2242      	movs	r2, #66	@ 0x42
 8003c1e:	2101      	movs	r1, #1
 8003c20:	5499      	strb	r1, [r3, r2]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2243      	movs	r2, #67	@ 0x43
 8003c26:	2101      	movs	r1, #1
 8003c28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2244      	movs	r2, #68	@ 0x44
 8003c2e:	2101      	movs	r1, #1
 8003c30:	5499      	strb	r1, [r3, r2]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2245      	movs	r2, #69	@ 0x45
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2246      	movs	r2, #70	@ 0x46
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2247      	movs	r2, #71	@ 0x47
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	223d      	movs	r2, #61	@ 0x3d
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	223d      	movs	r2, #61	@ 0x3d
 8003c68:	5c9b      	ldrb	r3, [r3, r2]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e042      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	223d      	movs	r2, #61	@ 0x3d
 8003c78:	2102      	movs	r1, #2
 8003c7a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_TIM_Base_Start_IT+0xa8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00f      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x5a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2380      	movs	r3, #128	@ 0x80
 8003c9c:	05db      	lsls	r3, r3, #23
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x5a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <HAL_TIM_Base_Start_IT+0xac>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_Base_Start_IT+0x5a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	@ (8003d0c <HAL_TIM_Base_Start_IT+0xb0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d116      	bne.n	8003ce4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <HAL_TIM_Base_Start_IT+0xb4>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d016      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x9a>
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	2380      	movs	r3, #128	@ 0x80
 8003ccc:	025b      	lsls	r3, r3, #9
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d011      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	00010007 	.word	0x00010007

08003d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e04a      	b.n	8003dbc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	223d      	movs	r2, #61	@ 0x3d
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223c      	movs	r2, #60	@ 0x3c
 8003d36:	2100      	movs	r1, #0
 8003d38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f000 f841 	bl	8003dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223d      	movs	r2, #61	@ 0x3d
 8003d46:	2102      	movs	r1, #2
 8003d48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	0019      	movs	r1, r3
 8003d54:	0010      	movs	r0, r2
 8003d56:	f000 fc25 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2248      	movs	r2, #72	@ 0x48
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	223e      	movs	r2, #62	@ 0x3e
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223f      	movs	r2, #63	@ 0x3f
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2240      	movs	r2, #64	@ 0x40
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	@ 0x41
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2242      	movs	r2, #66	@ 0x42
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2243      	movs	r2, #67	@ 0x43
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2244      	movs	r2, #68	@ 0x44
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2245      	movs	r2, #69	@ 0x45
 8003d9e:	2101      	movs	r1, #1
 8003da0:	5499      	strb	r1, [r3, r2]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2246      	movs	r2, #70	@ 0x46
 8003da6:	2101      	movs	r1, #1
 8003da8:	5499      	strb	r1, [r3, r2]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2247      	movs	r2, #71	@ 0x47
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	223d      	movs	r2, #61	@ 0x3d
 8003db6:	2101      	movs	r1, #1
 8003db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_TIM_PWM_Start+0x22>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	223e      	movs	r2, #62	@ 0x3e
 8003de8:	5c9b      	ldrb	r3, [r3, r2]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	1e5a      	subs	r2, r3, #1
 8003df0:	4193      	sbcs	r3, r2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e037      	b.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d108      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	223f      	movs	r2, #63	@ 0x3f
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	4193      	sbcs	r3, r2
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e02b      	b.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d108      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x52>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2240      	movs	r2, #64	@ 0x40
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	4193      	sbcs	r3, r2
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e01f      	b.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d108      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x6a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2241      	movs	r2, #65	@ 0x41
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	4193      	sbcs	r3, r2
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d108      	bne.n	8003e56 <HAL_TIM_PWM_Start+0x82>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2242      	movs	r2, #66	@ 0x42
 8003e48:	5c9b      	ldrb	r3, [r3, r2]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	4193      	sbcs	r3, r2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e007      	b.n	8003e66 <HAL_TIM_PWM_Start+0x92>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2243      	movs	r2, #67	@ 0x43
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	4193      	sbcs	r3, r2
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e08b      	b.n	8003f86 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xaa>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	223e      	movs	r2, #62	@ 0x3e
 8003e78:	2102      	movs	r1, #2
 8003e7a:	5499      	strb	r1, [r3, r2]
 8003e7c:	e023      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xf2>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xba>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	223f      	movs	r2, #63	@ 0x3f
 8003e88:	2102      	movs	r1, #2
 8003e8a:	5499      	strb	r1, [r3, r2]
 8003e8c:	e01b      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xf2>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xca>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2240      	movs	r2, #64	@ 0x40
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]
 8003e9c:	e013      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xf2>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0xda>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2241      	movs	r2, #65	@ 0x41
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	e00b      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xf2>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0xea>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2242      	movs	r2, #66	@ 0x42
 8003eb8:	2102      	movs	r1, #2
 8003eba:	5499      	strb	r1, [r3, r2]
 8003ebc:	e003      	b.n	8003ec6 <HAL_TIM_PWM_Start+0xf2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2243      	movs	r2, #67	@ 0x43
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 ff56 	bl	8004d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <HAL_TIM_PWM_Start+0x1bc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_PWM_Start+0x128>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f94 <HAL_TIM_PWM_Start+0x1c0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_PWM_Start+0x128>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <HAL_TIM_PWM_Start+0x1c4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_PWM_Start+0x128>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <HAL_TIM_PWM_Start+0x1c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_PWM_Start+0x12c>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_TIM_PWM_Start+0x12e>
 8003f00:	2300      	movs	r3, #0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2180      	movs	r1, #128	@ 0x80
 8003f12:	0209      	lsls	r1, r1, #8
 8003f14:	430a      	orrs	r2, r1
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f90 <HAL_TIM_PWM_Start+0x1bc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x16e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x16e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <HAL_TIM_PWM_Start+0x1cc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x16e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <HAL_TIM_PWM_Start+0x1c0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d116      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <HAL_TIM_PWM_Start+0x1d0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d016      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1ae>
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	2380      	movs	r3, #128	@ 0x80
 8003f58:	025b      	lsls	r3, r3, #9
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d011      	beq.n	8003f82 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	e008      	b.n	8003f82 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b004      	add	sp, #16
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	00010007 	.word	0x00010007

08003fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d021      	beq.n	800400c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d01d      	beq.n	800400c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	4252      	negs	r2, r2
 8003fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 fac0 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e007      	b.n	8004006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 fab3 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0018      	movs	r0, r3
 8004002:	f000 fabf 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2204      	movs	r2, #4
 8004018:	4013      	ands	r3, r2
 800401a:	d01e      	beq.n	800405a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2205      	movs	r2, #5
 8004022:	4252      	negs	r2, r2
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	23c0      	movs	r3, #192	@ 0xc0
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4013      	ands	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 fa99 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 8004042:	e007      	b.n	8004054 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0018      	movs	r0, r3
 8004048:	f000 fa8c 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fa98 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2208      	movs	r2, #8
 800405e:	4013      	ands	r3, r2
 8004060:	d021      	beq.n	80040a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2208      	movs	r2, #8
 8004066:	4013      	ands	r3, r2
 8004068:	d01d      	beq.n	80040a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2209      	movs	r2, #9
 8004070:	4252      	negs	r2, r2
 8004072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2203      	movs	r2, #3
 8004082:	4013      	ands	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fa73 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 800408e:	e007      	b.n	80040a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fa66 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f000 fa72 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2210      	movs	r2, #16
 80040aa:	4013      	ands	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2210      	movs	r2, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	d01e      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2211      	movs	r2, #17
 80040bc:	4252      	negs	r2, r2
 80040be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2208      	movs	r2, #8
 80040c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69da      	ldr	r2, [r3, #28]
 80040cc:	23c0      	movs	r3, #192	@ 0xc0
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 fa4c 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e007      	b.n	80040ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 fa3f 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 fa4b 	bl	8004584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2201      	movs	r2, #1
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00c      	beq.n	8004116 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d008      	beq.n	8004116 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2202      	movs	r2, #2
 800410a:	4252      	negs	r2, r2
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f7fc fced 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2280      	movs	r2, #128	@ 0x80
 800411a:	4013      	ands	r3, r2
 800411c:	d104      	bne.n	8004128 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	019b      	lsls	r3, r3, #6
 8004124:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004126:	d00b      	beq.n	8004140 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2280      	movs	r2, #128	@ 0x80
 800412c:	4013      	ands	r3, r2
 800412e:	d007      	beq.n	8004140 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <HAL_TIM_IRQHandler+0x208>)
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 feba 	bl	8004eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d00b      	beq.n	8004162 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	4013      	ands	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_TIM_IRQHandler+0x20c>)
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 feb1 	bl	8004ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2240      	movs	r2, #64	@ 0x40
 8004166:	4013      	ands	r3, r2
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	4013      	ands	r3, r2
 8004170:	d008      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2241      	movs	r2, #65	@ 0x41
 8004178:	4252      	negs	r2, r2
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fa08 	bl	8004594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	d00c      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	4013      	ands	r3, r2
 8004192:	d008      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2221      	movs	r2, #33	@ 0x21
 800419a:	4252      	negs	r2, r2
 800419c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 fe7f 	bl	8004ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	ffffdf7f 	.word	0xffffdf7f
 80041b4:	fffffeff 	.word	0xfffffeff

080041b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2317      	movs	r3, #23
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	223c      	movs	r2, #60	@ 0x3c
 80041d0:	5c9b      	ldrb	r3, [r3, r2]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_TIM_PWM_ConfigChannel+0x22>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e0e5      	b.n	80043a6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	223c      	movs	r2, #60	@ 0x3c
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b14      	cmp	r3, #20
 80041e6:	d900      	bls.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80041e8:	e0d1      	b.n	800438e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	009a      	lsls	r2, r3, #2
 80041ee:	4b70      	ldr	r3, [pc, #448]	@ (80043b0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 fa5e 	bl	80046c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2108      	movs	r1, #8
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2104      	movs	r1, #4
 8004220:	438a      	bics	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	619a      	str	r2, [r3, #24]
      break;
 8004236:	e0af      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	0011      	movs	r1, r2
 8004240:	0018      	movs	r0, r3
 8004242:	f000 fac7 	bl	80047d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	0109      	lsls	r1, r1, #4
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4954      	ldr	r1, [pc, #336]	@ (80043b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004264:	400a      	ands	r2, r1
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
      break;
 800427c:	e08c      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	0011      	movs	r1, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f000 fb28 	bl	80048dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2108      	movs	r1, #8
 8004298:	430a      	orrs	r2, r1
 800429a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2104      	movs	r1, #4
 80042a8:	438a      	bics	r2, r1
 80042aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69d9      	ldr	r1, [r3, #28]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	61da      	str	r2, [r3, #28]
      break;
 80042be:	e06b      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	0011      	movs	r1, r2
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 fb8f 	bl	80049ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2180      	movs	r1, #128	@ 0x80
 80042da:	0109      	lsls	r1, r1, #4
 80042dc:	430a      	orrs	r2, r1
 80042de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4932      	ldr	r1, [pc, #200]	@ (80043b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042ec:	400a      	ands	r2, r1
 80042ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69d9      	ldr	r1, [r3, #28]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
      break;
 8004304:	e048      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	0011      	movs	r1, r2
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fbd6 	bl	8004ac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2108      	movs	r1, #8
 8004320:	430a      	orrs	r2, r1
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2104      	movs	r1, #4
 8004330:	438a      	bics	r2, r1
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004346:	e027      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	0011      	movs	r1, r2
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fc15 	bl	8004b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2180      	movs	r1, #128	@ 0x80
 8004362:	0109      	lsls	r1, r1, #4
 8004364:	430a      	orrs	r2, r1
 8004366:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4910      	ldr	r1, [pc, #64]	@ (80043b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004374:	400a      	ands	r2, r1
 8004376:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800438c:	e004      	b.n	8004398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800438e:	2317      	movs	r3, #23
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
      break;
 8004396:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	223c      	movs	r2, #60	@ 0x3c
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

  return status;
 80043a0:	2317      	movs	r3, #23
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	781b      	ldrb	r3, [r3, #0]
}
 80043a6:	0018      	movs	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b006      	add	sp, #24
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	08006c4c 	.word	0x08006c4c
 80043b4:	fffffbff 	.word	0xfffffbff

080043b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223c      	movs	r2, #60	@ 0x3c
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_ConfigClockSource+0x20>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0bc      	b.n	8004552 <HAL_TIM_ConfigClockSource+0x19a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	223c      	movs	r2, #60	@ 0x3c
 80043dc:	2101      	movs	r1, #1
 80043de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	223d      	movs	r2, #61	@ 0x3d
 80043e4:	2102      	movs	r1, #2
 80043e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a5a      	ldr	r2, [pc, #360]	@ (800455c <HAL_TIM_ConfigClockSource+0x1a4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a59      	ldr	r2, [pc, #356]	@ (8004560 <HAL_TIM_ConfigClockSource+0x1a8>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	0192      	lsls	r2, r2, #6
 8004410:	4293      	cmp	r3, r2
 8004412:	d040      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0xde>
 8004414:	2280      	movs	r2, #128	@ 0x80
 8004416:	0192      	lsls	r2, r2, #6
 8004418:	4293      	cmp	r3, r2
 800441a:	d900      	bls.n	800441e <HAL_TIM_ConfigClockSource+0x66>
 800441c:	e088      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	0152      	lsls	r2, r2, #5
 8004422:	4293      	cmp	r3, r2
 8004424:	d100      	bne.n	8004428 <HAL_TIM_ConfigClockSource+0x70>
 8004426:	e088      	b.n	800453a <HAL_TIM_ConfigClockSource+0x182>
 8004428:	2280      	movs	r2, #128	@ 0x80
 800442a:	0152      	lsls	r2, r2, #5
 800442c:	4293      	cmp	r3, r2
 800442e:	d900      	bls.n	8004432 <HAL_TIM_ConfigClockSource+0x7a>
 8004430:	e07e      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004432:	2b70      	cmp	r3, #112	@ 0x70
 8004434:	d018      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0xb0>
 8004436:	d900      	bls.n	800443a <HAL_TIM_ConfigClockSource+0x82>
 8004438:	e07a      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800443a:	2b60      	cmp	r3, #96	@ 0x60
 800443c:	d04f      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x126>
 800443e:	d900      	bls.n	8004442 <HAL_TIM_ConfigClockSource+0x8a>
 8004440:	e076      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004442:	2b50      	cmp	r3, #80	@ 0x50
 8004444:	d03b      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x106>
 8004446:	d900      	bls.n	800444a <HAL_TIM_ConfigClockSource+0x92>
 8004448:	e072      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d057      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x146>
 800444e:	d900      	bls.n	8004452 <HAL_TIM_ConfigClockSource+0x9a>
 8004450:	e06e      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004452:	2b30      	cmp	r3, #48	@ 0x30
 8004454:	d063      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 800445c:	d868      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d05d      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004462:	2b10      	cmp	r3, #16
 8004464:	d05b      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x166>
 8004466:	e063      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	f000 fc62 	bl	8004d40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2277      	movs	r2, #119	@ 0x77
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
      break;
 8004494:	e052      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044a6:	f000 fc4b 	bl	8004d40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2180      	movs	r1, #128	@ 0x80
 80044b6:	01c9      	lsls	r1, r1, #7
 80044b8:	430a      	orrs	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	001a      	movs	r2, r3
 80044cc:	f000 fbbc 	bl	8004c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	@ 0x50
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fc16 	bl	8004d08 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ea:	001a      	movs	r2, r3
 80044ec:	f000 fbda 	bl	8004ca4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	@ 0x60
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 fc06 	bl	8004d08 <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	001a      	movs	r2, r3
 800450c:	f000 fb9c 	bl	8004c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	@ 0x40
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fbf6 	bl	8004d08 <TIM_ITRx_SetConfig>
      break;
 800451c:	e00e      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f000 fbed 	bl	8004d08 <TIM_ITRx_SetConfig>
      break;
 800452e:	e005      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
      break;
 8004538:	e000      	b.n	800453c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800453a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	223d      	movs	r2, #61	@ 0x3d
 8004540:	2101      	movs	r1, #1
 8004542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	223c      	movs	r2, #60	@ 0x3c
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

  return status;
 800454c:	230f      	movs	r3, #15
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	ffceff88 	.word	0xffceff88
 8004560:	ffff00ff 	.word	0xffff00ff

08004564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456c:	46c0      	nop			@ (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458c:	46c0      	nop			@ (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b002      	add	sp, #8
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <TIM_Base_SetConfig+0x100>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d008      	beq.n	80045ce <TIM_Base_SetConfig+0x2a>
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	2380      	movs	r3, #128	@ 0x80
 80045c0:	05db      	lsls	r3, r3, #23
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0x2a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a37      	ldr	r2, [pc, #220]	@ (80046a8 <TIM_Base_SetConfig+0x104>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2270      	movs	r2, #112	@ 0x70
 80045d2:	4393      	bics	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a30      	ldr	r2, [pc, #192]	@ (80046a4 <TIM_Base_SetConfig+0x100>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	05db      	lsls	r3, r3, #23
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d013      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2c      	ldr	r2, [pc, #176]	@ (80046a8 <TIM_Base_SetConfig+0x104>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00f      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2b      	ldr	r2, [pc, #172]	@ (80046ac <TIM_Base_SetConfig+0x108>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2a      	ldr	r2, [pc, #168]	@ (80046b0 <TIM_Base_SetConfig+0x10c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a29      	ldr	r2, [pc, #164]	@ (80046b4 <TIM_Base_SetConfig+0x110>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0x76>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a28      	ldr	r2, [pc, #160]	@ (80046b8 <TIM_Base_SetConfig+0x114>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a27      	ldr	r2, [pc, #156]	@ (80046bc <TIM_Base_SetConfig+0x118>)
 800461e:	4013      	ands	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	4393      	bics	r3, r2
 8004632:	001a      	movs	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a13      	ldr	r2, [pc, #76]	@ (80046a4 <TIM_Base_SetConfig+0x100>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00b      	beq.n	8004672 <TIM_Base_SetConfig+0xce>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <TIM_Base_SetConfig+0x10c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <TIM_Base_SetConfig+0xce>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <TIM_Base_SetConfig+0x110>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_Base_SetConfig+0xce>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <TIM_Base_SetConfig+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d103      	bne.n	800467a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2201      	movs	r2, #1
 8004686:	4013      	ands	r3, r2
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2201      	movs	r2, #1
 8004692:	4393      	bics	r3, r2
 8004694:	001a      	movs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]
  }
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b004      	add	sp, #16
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40002000 	.word	0x40002000
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800
 80046bc:	fffffcff 	.word	0xfffffcff

080046c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4393      	bics	r3, r2
 80046d8:	001a      	movs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <TIM_OC1_SetConfig+0xf8>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2203      	movs	r2, #3
 80046f6:	4393      	bics	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2202      	movs	r2, #2
 8004708:	4393      	bics	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a28      	ldr	r2, [pc, #160]	@ (80047bc <TIM_OC1_SetConfig+0xfc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_OC1_SetConfig+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a27      	ldr	r2, [pc, #156]	@ (80047c0 <TIM_OC1_SetConfig+0x100>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_OC1_SetConfig+0x76>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a26      	ldr	r2, [pc, #152]	@ (80047c4 <TIM_OC1_SetConfig+0x104>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC1_SetConfig+0x76>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a25      	ldr	r2, [pc, #148]	@ (80047c8 <TIM_OC1_SetConfig+0x108>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2208      	movs	r2, #8
 800473a:	4393      	bics	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2204      	movs	r2, #4
 800474c:	4393      	bics	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <TIM_OC1_SetConfig+0xfc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_OC1_SetConfig+0xb0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <TIM_OC1_SetConfig+0x100>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_OC1_SetConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <TIM_OC1_SetConfig+0x104>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC1_SetConfig+0xb0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <TIM_OC1_SetConfig+0x108>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d111      	bne.n	8004794 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4a16      	ldr	r2, [pc, #88]	@ (80047cc <TIM_OC1_SetConfig+0x10c>)
 8004774:	4013      	ands	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <TIM_OC1_SetConfig+0x110>)
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	fffeff8f 	.word	0xfffeff8f
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	fffffeff 	.word	0xfffffeff
 80047d0:	fffffdff 	.word	0xfffffdff

080047d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	2210      	movs	r2, #16
 80047ea:	4393      	bics	r3, r2
 80047ec:	001a      	movs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4a2e      	ldr	r2, [pc, #184]	@ (80048bc <TIM_OC2_SetConfig+0xe8>)
 8004802:	4013      	ands	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a2d      	ldr	r2, [pc, #180]	@ (80048c0 <TIM_OC2_SetConfig+0xec>)
 800480a:	4013      	ands	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2220      	movs	r2, #32
 800481e:	4393      	bics	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a24      	ldr	r2, [pc, #144]	@ (80048c4 <TIM_OC2_SetConfig+0xf0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10d      	bne.n	8004852 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2280      	movs	r2, #128	@ 0x80
 800483a:	4393      	bics	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	4393      	bics	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <TIM_OC2_SetConfig+0xf0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_OC2_SetConfig+0x9e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <TIM_OC2_SetConfig+0xf4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_OC2_SetConfig+0x9e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <TIM_OC2_SetConfig+0xf8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_OC2_SetConfig+0x9e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <TIM_OC2_SetConfig+0xfc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d113      	bne.n	800489a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <TIM_OC2_SetConfig+0x100>)
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	4a16      	ldr	r2, [pc, #88]	@ (80048d8 <TIM_OC2_SetConfig+0x104>)
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b006      	add	sp, #24
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	feff8fff 	.word	0xfeff8fff
 80048c0:	fffffcff 	.word	0xfffffcff
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800
 80048d4:	fffffbff 	.word	0xfffffbff
 80048d8:	fffff7ff 	.word	0xfffff7ff

080048dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	4a33      	ldr	r2, [pc, #204]	@ (80049c0 <TIM_OC3_SetConfig+0xe4>)
 80048f2:	401a      	ands	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a2f      	ldr	r2, [pc, #188]	@ (80049c4 <TIM_OC3_SetConfig+0xe8>)
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2203      	movs	r2, #3
 8004910:	4393      	bics	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4a29      	ldr	r2, [pc, #164]	@ (80049c8 <TIM_OC3_SetConfig+0xec>)
 8004922:	4013      	ands	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a25      	ldr	r2, [pc, #148]	@ (80049cc <TIM_OC3_SetConfig+0xf0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10d      	bne.n	8004956 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a24      	ldr	r2, [pc, #144]	@ (80049d0 <TIM_OC3_SetConfig+0xf4>)
 800493e:	4013      	ands	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4a20      	ldr	r2, [pc, #128]	@ (80049d4 <TIM_OC3_SetConfig+0xf8>)
 8004952:	4013      	ands	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <TIM_OC3_SetConfig+0xf0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_OC3_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1d      	ldr	r2, [pc, #116]	@ (80049d8 <TIM_OC3_SetConfig+0xfc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_OC3_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <TIM_OC3_SetConfig+0x100>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_OC3_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <TIM_OC3_SetConfig+0x104>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d113      	bne.n	800499e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4a1a      	ldr	r2, [pc, #104]	@ (80049e4 <TIM_OC3_SetConfig+0x108>)
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <TIM_OC3_SetConfig+0x10c>)
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	621a      	str	r2, [r3, #32]
}
 80049b8:	46c0      	nop			@ (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b006      	add	sp, #24
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffffeff 	.word	0xfffffeff
 80049c4:	fffeff8f 	.word	0xfffeff8f
 80049c8:	fffffdff 	.word	0xfffffdff
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	fffff7ff 	.word	0xfffff7ff
 80049d4:	fffffbff 	.word	0xfffffbff
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	ffffefff 	.word	0xffffefff
 80049e8:	ffffdfff 	.word	0xffffdfff

080049ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	4a26      	ldr	r2, [pc, #152]	@ (8004a9c <TIM_OC4_SetConfig+0xb0>)
 8004a02:	401a      	ands	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <TIM_OC4_SetConfig+0xb4>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <TIM_OC4_SetConfig+0xb8>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <TIM_OC4_SetConfig+0xbc>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <TIM_OC4_SetConfig+0xc0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_OC4_SetConfig+0x78>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <TIM_OC4_SetConfig+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_OC4_SetConfig+0x78>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a17      	ldr	r2, [pc, #92]	@ (8004ab4 <TIM_OC4_SetConfig+0xc8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_OC4_SetConfig+0x78>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <TIM_OC4_SetConfig+0xcc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d109      	bne.n	8004a78 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <TIM_OC4_SetConfig+0xd0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b006      	add	sp, #24
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	ffffefff 	.word	0xffffefff
 8004aa0:	feff8fff 	.word	0xfeff8fff
 8004aa4:	fffffcff 	.word	0xfffffcff
 8004aa8:	ffffdfff 	.word	0xffffdfff
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	ffffbfff 	.word	0xffffbfff

08004ac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	@ (8004b64 <TIM_OC5_SetConfig+0xa4>)
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a1f      	ldr	r2, [pc, #124]	@ (8004b68 <TIM_OC5_SetConfig+0xa8>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <TIM_OC5_SetConfig+0xac>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a17      	ldr	r2, [pc, #92]	@ (8004b70 <TIM_OC5_SetConfig+0xb0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <TIM_OC5_SetConfig+0x6e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <TIM_OC5_SetConfig+0xb4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <TIM_OC5_SetConfig+0x6e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <TIM_OC5_SetConfig+0xb8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_OC5_SetConfig+0x6e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a14      	ldr	r2, [pc, #80]	@ (8004b7c <TIM_OC5_SetConfig+0xbc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d109      	bne.n	8004b42 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <TIM_OC5_SetConfig+0xa4>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b006      	add	sp, #24
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	fffeffff 	.word	0xfffeffff
 8004b68:	fffeff8f 	.word	0xfffeff8f
 8004b6c:	fffdffff 	.word	0xfffdffff
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4a24      	ldr	r2, [pc, #144]	@ (8004c28 <TIM_OC6_SetConfig+0xa8>)
 8004b96:	401a      	ands	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a20      	ldr	r2, [pc, #128]	@ (8004c2c <TIM_OC6_SetConfig+0xac>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <TIM_OC6_SetConfig+0xb0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	051b      	lsls	r3, r3, #20
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <TIM_OC6_SetConfig+0xb4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x70>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <TIM_OC6_SetConfig+0xb8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x70>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a16      	ldr	r2, [pc, #88]	@ (8004c3c <TIM_OC6_SetConfig+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC6_SetConfig+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a15      	ldr	r2, [pc, #84]	@ (8004c40 <TIM_OC6_SetConfig+0xc0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d109      	bne.n	8004c04 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4a14      	ldr	r2, [pc, #80]	@ (8004c44 <TIM_OC6_SetConfig+0xc4>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b006      	add	sp, #24
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	ffefffff 	.word	0xffefffff
 8004c2c:	feff8fff 	.word	0xfeff8fff
 8004c30:	ffdfffff 	.word	0xffdfffff
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800
 8004c44:	fffbffff 	.word	0xfffbffff

08004c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4393      	bics	r3, r2
 8004c62:	001a      	movs	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	22f0      	movs	r2, #240	@ 0xf0
 8004c72:	4393      	bics	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	220a      	movs	r2, #10
 8004c84:	4393      	bics	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	621a      	str	r2, [r3, #32]
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	4393      	bics	r3, r2
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d04 <TIM_TI2_ConfigInputStage+0x60>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	031b      	lsls	r3, r3, #12
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	22a0      	movs	r2, #160	@ 0xa0
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	ffff0fff 	.word	0xffff0fff

08004d08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <TIM_ITRx_SetConfig+0x34>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	2207      	movs	r2, #7
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	609a      	str	r2, [r3, #8]
}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	ffcfff8f 	.word	0xffcfff8f

08004d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4a09      	ldr	r2, [pc, #36]	@ (8004d7c <TIM_ETR_SetConfig+0x3c>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	021a      	lsls	r2, r3, #8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b006      	add	sp, #24
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	ffff00ff 	.word	0xffff00ff

08004d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	221f      	movs	r2, #31
 8004d90:	4013      	ands	r3, r2
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	0013      	movs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	43d2      	mvns	r2, r2
 8004da2:	401a      	ands	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	211f      	movs	r1, #31
 8004db0:	400b      	ands	r3, r1
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4099      	lsls	r1, r3
 8004db6:	000b      	movs	r3, r1
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	621a      	str	r2, [r3, #32]
}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b006      	add	sp, #24
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	223c      	movs	r2, #60	@ 0x3c
 8004dd6:	5c9b      	ldrb	r3, [r3, r2]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e055      	b.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	223c      	movs	r2, #60	@ 0x3c
 8004de4:	2101      	movs	r1, #1
 8004de6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223d      	movs	r2, #61	@ 0x3d
 8004dec:	2102      	movs	r1, #2
 8004dee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a23      	ldr	r2, [pc, #140]	@ (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a22      	ldr	r2, [pc, #136]	@ (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2270      	movs	r2, #112	@ 0x70
 8004e20:	4393      	bics	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00f      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	05db      	lsls	r3, r3, #23
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a12      	ldr	r2, [pc, #72]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10c      	bne.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	4393      	bics	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	223d      	movs	r2, #61	@ 0x3d
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	223c      	movs	r2, #60	@ 0x3c
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	ff0fffff 	.word	0xff0fffff
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40014000 	.word	0x40014000

08004ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e046      	b.n	8004f74 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2288      	movs	r2, #136	@ 0x88
 8004eea:	589b      	ldr	r3, [r3, r2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2284      	movs	r2, #132	@ 0x84
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7fc f842 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2288      	movs	r2, #136	@ 0x88
 8004f04:	2124      	movs	r1, #36	@ 0x24
 8004f06:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2101      	movs	r1, #1
 8004f14:	438a      	bics	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 fb8e 	bl	8005644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 f8cc 	bl	80050c8 <UART_SetConfig>
 8004f30:	0003      	movs	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e01c      	b.n	8004f74 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	490d      	ldr	r1, [pc, #52]	@ (8004f7c <HAL_UART_Init+0xa8>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	212a      	movs	r1, #42	@ 0x2a
 8004f56:	438a      	bics	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2101      	movs	r1, #1
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 fc1d 	bl	80057ac <UART_CheckIdleState>
 8004f72:	0003      	movs	r3, r0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b002      	add	sp, #8
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	ffffb7ff 	.word	0xffffb7ff

08004f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	1dbb      	adds	r3, r7, #6
 8004f8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2288      	movs	r2, #136	@ 0x88
 8004f94:	589b      	ldr	r3, [r3, r2]
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d000      	beq.n	8004f9c <HAL_UART_Transmit+0x1c>
 8004f9a:	e090      	b.n	80050be <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_UART_Transmit+0x2a>
 8004fa2:	1dbb      	adds	r3, r7, #6
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e088      	b.n	80050c0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	015b      	lsls	r3, r3, #5
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d109      	bne.n	8004fce <HAL_UART_Transmit+0x4e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d001      	beq.n	8004fce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e078      	b.n	80050c0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2290      	movs	r2, #144	@ 0x90
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2288      	movs	r2, #136	@ 0x88
 8004fda:	2121      	movs	r1, #33	@ 0x21
 8004fdc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fde:	f7fc f8db 	bl	8001198 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1dba      	adds	r2, r7, #6
 8004fea:	2154      	movs	r1, #84	@ 0x54
 8004fec:	8812      	ldrh	r2, [r2, #0]
 8004fee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1dba      	adds	r2, r7, #6
 8004ff4:	2156      	movs	r1, #86	@ 0x56
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	015b      	lsls	r3, r3, #5
 8005002:	429a      	cmp	r2, r3
 8005004:	d108      	bne.n	8005018 <HAL_UART_Transmit+0x98>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	e003      	b.n	8005020 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005020:	e030      	b.n	8005084 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	0013      	movs	r3, r2
 800502c:	2200      	movs	r2, #0
 800502e:	2180      	movs	r1, #128	@ 0x80
 8005030:	f000 fc66 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 8005034:	1e03      	subs	r3, r0, #0
 8005036:	d005      	beq.n	8005044 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2288      	movs	r2, #136	@ 0x88
 800503c:	2120      	movs	r1, #32
 800503e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e03d      	b.n	80050c0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	001a      	movs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	05d2      	lsls	r2, r2, #23
 8005056:	0dd2      	lsrs	r2, r2, #23
 8005058:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	3302      	adds	r3, #2
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e007      	b.n	8005072 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	3301      	adds	r3, #1
 8005070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2256      	movs	r2, #86	@ 0x56
 8005076:	5a9b      	ldrh	r3, [r3, r2]
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b299      	uxth	r1, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2256      	movs	r2, #86	@ 0x56
 8005082:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2256      	movs	r2, #86	@ 0x56
 8005088:	5a9b      	ldrh	r3, [r3, r2]
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1c8      	bne.n	8005022 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	0013      	movs	r3, r2
 800509a:	2200      	movs	r2, #0
 800509c:	2140      	movs	r1, #64	@ 0x40
 800509e:	f000 fc2f 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2288      	movs	r2, #136	@ 0x88
 80050aa:	2120      	movs	r1, #32
 80050ac:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e006      	b.n	80050c0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2288      	movs	r2, #136	@ 0x88
 80050b6:	2120      	movs	r1, #32
 80050b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	0018      	movs	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b008      	add	sp, #32
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	b090      	sub	sp, #64	@ 0x40
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050d0:	231a      	movs	r3, #26
 80050d2:	2220      	movs	r2, #32
 80050d4:	189b      	adds	r3, r3, r2
 80050d6:	19db      	adds	r3, r3, r7
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4aaf      	ldr	r2, [pc, #700]	@ (80053b8 <UART_SetConfig+0x2f0>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005106:	430b      	orrs	r3, r1
 8005108:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4aaa      	ldr	r2, [pc, #680]	@ (80053bc <UART_SetConfig+0x2f4>)
 8005112:	4013      	ands	r3, r2
 8005114:	0018      	movs	r0, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	68d9      	ldr	r1, [r3, #12]
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	0003      	movs	r3, r0
 8005120:	430b      	orrs	r3, r1
 8005122:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4aa4      	ldr	r2, [pc, #656]	@ (80053c0 <UART_SetConfig+0x2f8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800513a:	4313      	orrs	r3, r2
 800513c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a9f      	ldr	r2, [pc, #636]	@ (80053c4 <UART_SetConfig+0x2fc>)
 8005146:	4013      	ands	r3, r2
 8005148:	0019      	movs	r1, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	430b      	orrs	r3, r1
 8005152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	220f      	movs	r2, #15
 800515c:	4393      	bics	r3, r2
 800515e:	0018      	movs	r0, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	0003      	movs	r3, r0
 800516a:	430b      	orrs	r3, r1
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a95      	ldr	r2, [pc, #596]	@ (80053c8 <UART_SetConfig+0x300>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d131      	bne.n	80051dc <UART_SetConfig+0x114>
 8005178:	4b94      	ldr	r3, [pc, #592]	@ (80053cc <UART_SetConfig+0x304>)
 800517a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517c:	2203      	movs	r2, #3
 800517e:	4013      	ands	r3, r2
 8005180:	2b03      	cmp	r3, #3
 8005182:	d01d      	beq.n	80051c0 <UART_SetConfig+0xf8>
 8005184:	d823      	bhi.n	80051ce <UART_SetConfig+0x106>
 8005186:	2b02      	cmp	r3, #2
 8005188:	d00c      	beq.n	80051a4 <UART_SetConfig+0xdc>
 800518a:	d820      	bhi.n	80051ce <UART_SetConfig+0x106>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <UART_SetConfig+0xce>
 8005190:	2b01      	cmp	r3, #1
 8005192:	d00e      	beq.n	80051b2 <UART_SetConfig+0xea>
 8005194:	e01b      	b.n	80051ce <UART_SetConfig+0x106>
 8005196:	231b      	movs	r3, #27
 8005198:	2220      	movs	r2, #32
 800519a:	189b      	adds	r3, r3, r2
 800519c:	19db      	adds	r3, r3, r7
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e0b4      	b.n	800530e <UART_SetConfig+0x246>
 80051a4:	231b      	movs	r3, #27
 80051a6:	2220      	movs	r2, #32
 80051a8:	189b      	adds	r3, r3, r2
 80051aa:	19db      	adds	r3, r3, r7
 80051ac:	2202      	movs	r2, #2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e0ad      	b.n	800530e <UART_SetConfig+0x246>
 80051b2:	231b      	movs	r3, #27
 80051b4:	2220      	movs	r2, #32
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	19db      	adds	r3, r3, r7
 80051ba:	2204      	movs	r2, #4
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e0a6      	b.n	800530e <UART_SetConfig+0x246>
 80051c0:	231b      	movs	r3, #27
 80051c2:	2220      	movs	r2, #32
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	19db      	adds	r3, r3, r7
 80051c8:	2208      	movs	r2, #8
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e09f      	b.n	800530e <UART_SetConfig+0x246>
 80051ce:	231b      	movs	r3, #27
 80051d0:	2220      	movs	r2, #32
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	19db      	adds	r3, r3, r7
 80051d6:	2210      	movs	r2, #16
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e098      	b.n	800530e <UART_SetConfig+0x246>
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a7b      	ldr	r2, [pc, #492]	@ (80053d0 <UART_SetConfig+0x308>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d131      	bne.n	800524a <UART_SetConfig+0x182>
 80051e6:	4b79      	ldr	r3, [pc, #484]	@ (80053cc <UART_SetConfig+0x304>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	220c      	movs	r2, #12
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d01d      	beq.n	800522e <UART_SetConfig+0x166>
 80051f2:	d823      	bhi.n	800523c <UART_SetConfig+0x174>
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d00c      	beq.n	8005212 <UART_SetConfig+0x14a>
 80051f8:	d820      	bhi.n	800523c <UART_SetConfig+0x174>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <UART_SetConfig+0x13c>
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d00e      	beq.n	8005220 <UART_SetConfig+0x158>
 8005202:	e01b      	b.n	800523c <UART_SetConfig+0x174>
 8005204:	231b      	movs	r3, #27
 8005206:	2220      	movs	r2, #32
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e07d      	b.n	800530e <UART_SetConfig+0x246>
 8005212:	231b      	movs	r3, #27
 8005214:	2220      	movs	r2, #32
 8005216:	189b      	adds	r3, r3, r2
 8005218:	19db      	adds	r3, r3, r7
 800521a:	2202      	movs	r2, #2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e076      	b.n	800530e <UART_SetConfig+0x246>
 8005220:	231b      	movs	r3, #27
 8005222:	2220      	movs	r2, #32
 8005224:	189b      	adds	r3, r3, r2
 8005226:	19db      	adds	r3, r3, r7
 8005228:	2204      	movs	r2, #4
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e06f      	b.n	800530e <UART_SetConfig+0x246>
 800522e:	231b      	movs	r3, #27
 8005230:	2220      	movs	r2, #32
 8005232:	189b      	adds	r3, r3, r2
 8005234:	19db      	adds	r3, r3, r7
 8005236:	2208      	movs	r2, #8
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e068      	b.n	800530e <UART_SetConfig+0x246>
 800523c:	231b      	movs	r3, #27
 800523e:	2220      	movs	r2, #32
 8005240:	189b      	adds	r3, r3, r2
 8005242:	19db      	adds	r3, r3, r7
 8005244:	2210      	movs	r2, #16
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e061      	b.n	800530e <UART_SetConfig+0x246>
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <UART_SetConfig+0x30c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d106      	bne.n	8005262 <UART_SetConfig+0x19a>
 8005254:	231b      	movs	r3, #27
 8005256:	2220      	movs	r2, #32
 8005258:	189b      	adds	r3, r3, r2
 800525a:	19db      	adds	r3, r3, r7
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e055      	b.n	800530e <UART_SetConfig+0x246>
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <UART_SetConfig+0x310>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d106      	bne.n	800527a <UART_SetConfig+0x1b2>
 800526c:	231b      	movs	r3, #27
 800526e:	2220      	movs	r2, #32
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e049      	b.n	800530e <UART_SetConfig+0x246>
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a50      	ldr	r2, [pc, #320]	@ (80053c0 <UART_SetConfig+0x2f8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d13e      	bne.n	8005302 <UART_SetConfig+0x23a>
 8005284:	4b51      	ldr	r3, [pc, #324]	@ (80053cc <UART_SetConfig+0x304>)
 8005286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005288:	23c0      	movs	r3, #192	@ 0xc0
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	4013      	ands	r3, r2
 800528e:	22c0      	movs	r2, #192	@ 0xc0
 8005290:	0112      	lsls	r2, r2, #4
 8005292:	4293      	cmp	r3, r2
 8005294:	d027      	beq.n	80052e6 <UART_SetConfig+0x21e>
 8005296:	22c0      	movs	r2, #192	@ 0xc0
 8005298:	0112      	lsls	r2, r2, #4
 800529a:	4293      	cmp	r3, r2
 800529c:	d82a      	bhi.n	80052f4 <UART_SetConfig+0x22c>
 800529e:	2280      	movs	r2, #128	@ 0x80
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d011      	beq.n	80052ca <UART_SetConfig+0x202>
 80052a6:	2280      	movs	r2, #128	@ 0x80
 80052a8:	0112      	lsls	r2, r2, #4
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d822      	bhi.n	80052f4 <UART_SetConfig+0x22c>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <UART_SetConfig+0x1f4>
 80052b2:	2280      	movs	r2, #128	@ 0x80
 80052b4:	00d2      	lsls	r2, r2, #3
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00e      	beq.n	80052d8 <UART_SetConfig+0x210>
 80052ba:	e01b      	b.n	80052f4 <UART_SetConfig+0x22c>
 80052bc:	231b      	movs	r3, #27
 80052be:	2220      	movs	r2, #32
 80052c0:	189b      	adds	r3, r3, r2
 80052c2:	19db      	adds	r3, r3, r7
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	e021      	b.n	800530e <UART_SetConfig+0x246>
 80052ca:	231b      	movs	r3, #27
 80052cc:	2220      	movs	r2, #32
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	19db      	adds	r3, r3, r7
 80052d2:	2202      	movs	r2, #2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e01a      	b.n	800530e <UART_SetConfig+0x246>
 80052d8:	231b      	movs	r3, #27
 80052da:	2220      	movs	r2, #32
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	2204      	movs	r2, #4
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e013      	b.n	800530e <UART_SetConfig+0x246>
 80052e6:	231b      	movs	r3, #27
 80052e8:	2220      	movs	r2, #32
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	19db      	adds	r3, r3, r7
 80052ee:	2208      	movs	r2, #8
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e00c      	b.n	800530e <UART_SetConfig+0x246>
 80052f4:	231b      	movs	r3, #27
 80052f6:	2220      	movs	r2, #32
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	19db      	adds	r3, r3, r7
 80052fc:	2210      	movs	r2, #16
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e005      	b.n	800530e <UART_SetConfig+0x246>
 8005302:	231b      	movs	r3, #27
 8005304:	2220      	movs	r2, #32
 8005306:	189b      	adds	r3, r3, r2
 8005308:	19db      	adds	r3, r3, r7
 800530a:	2210      	movs	r2, #16
 800530c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a2b      	ldr	r2, [pc, #172]	@ (80053c0 <UART_SetConfig+0x2f8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d000      	beq.n	800531a <UART_SetConfig+0x252>
 8005318:	e0a9      	b.n	800546e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800531a:	231b      	movs	r3, #27
 800531c:	2220      	movs	r2, #32
 800531e:	189b      	adds	r3, r3, r2
 8005320:	19db      	adds	r3, r3, r7
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d015      	beq.n	8005354 <UART_SetConfig+0x28c>
 8005328:	dc18      	bgt.n	800535c <UART_SetConfig+0x294>
 800532a:	2b04      	cmp	r3, #4
 800532c:	d00d      	beq.n	800534a <UART_SetConfig+0x282>
 800532e:	dc15      	bgt.n	800535c <UART_SetConfig+0x294>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <UART_SetConfig+0x272>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d005      	beq.n	8005344 <UART_SetConfig+0x27c>
 8005338:	e010      	b.n	800535c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533a:	f7fe fa69 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 800533e:	0003      	movs	r3, r0
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005342:	e014      	b.n	800536e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <UART_SetConfig+0x314>)
 8005346:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005348:	e011      	b.n	800536e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fe f9d5 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 800534e:	0003      	movs	r3, r0
 8005350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005352:	e00c      	b.n	800536e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800535a:	e008      	b.n	800536e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005360:	231a      	movs	r3, #26
 8005362:	2220      	movs	r2, #32
 8005364:	189b      	adds	r3, r3, r2
 8005366:	19db      	adds	r3, r3, r7
 8005368:	2201      	movs	r2, #1
 800536a:	701a      	strb	r2, [r3, #0]
        break;
 800536c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d100      	bne.n	8005376 <UART_SetConfig+0x2ae>
 8005374:	e14b      	b.n	800560e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <UART_SetConfig+0x318>)
 800537c:	0052      	lsls	r2, r2, #1
 800537e:	5ad3      	ldrh	r3, [r2, r3]
 8005380:	0019      	movs	r1, r3
 8005382:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005384:	f7fa fec8 	bl	8000118 <__udivsi3>
 8005388:	0003      	movs	r3, r0
 800538a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	0013      	movs	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	189b      	adds	r3, r3, r2
 8005396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005398:	429a      	cmp	r2, r3
 800539a:	d305      	bcc.n	80053a8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d91d      	bls.n	80053e4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80053a8:	231a      	movs	r3, #26
 80053aa:	2220      	movs	r2, #32
 80053ac:	189b      	adds	r3, r3, r2
 80053ae:	19db      	adds	r3, r3, r7
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e12b      	b.n	800560e <UART_SetConfig+0x546>
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	cfff69f3 	.word	0xcfff69f3
 80053bc:	ffffcfff 	.word	0xffffcfff
 80053c0:	40008000 	.word	0x40008000
 80053c4:	11fff4ff 	.word	0x11fff4ff
 80053c8:	40013800 	.word	0x40013800
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40004400 	.word	0x40004400
 80053d4:	40004800 	.word	0x40004800
 80053d8:	40004c00 	.word	0x40004c00
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	08006ca0 	.word	0x08006ca0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	2300      	movs	r3, #0
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f0:	4b92      	ldr	r3, [pc, #584]	@ (800563c <UART_SetConfig+0x574>)
 80053f2:	0052      	lsls	r2, r2, #1
 80053f4:	5ad3      	ldrh	r3, [r2, r3]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	69b8      	ldr	r0, [r7, #24]
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	f7fa fffe 	bl	8000404 <__aeabi_uldivmod>
 8005408:	0002      	movs	r2, r0
 800540a:	000b      	movs	r3, r1
 800540c:	0e11      	lsrs	r1, r2, #24
 800540e:	021d      	lsls	r5, r3, #8
 8005410:	430d      	orrs	r5, r1
 8005412:	0214      	lsls	r4, r2, #8
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68b8      	ldr	r0, [r7, #8]
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	1900      	adds	r0, r0, r4
 8005426:	4169      	adcs	r1, r5
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f7fa ffe5 	bl	8000404 <__aeabi_uldivmod>
 800543a:	0002      	movs	r2, r0
 800543c:	000b      	movs	r3, r1
 800543e:	0013      	movs	r3, r2
 8005440:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	23c0      	movs	r3, #192	@ 0xc0
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	429a      	cmp	r2, r3
 800544a:	d309      	bcc.n	8005460 <UART_SetConfig+0x398>
 800544c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	035b      	lsls	r3, r3, #13
 8005452:	429a      	cmp	r2, r3
 8005454:	d204      	bcs.n	8005460 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	e0d6      	b.n	800560e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005460:	231a      	movs	r3, #26
 8005462:	2220      	movs	r2, #32
 8005464:	189b      	adds	r3, r3, r2
 8005466:	19db      	adds	r3, r3, r7
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e0cf      	b.n	800560e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	2380      	movs	r3, #128	@ 0x80
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d000      	beq.n	800547c <UART_SetConfig+0x3b4>
 800547a:	e070      	b.n	800555e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800547c:	231b      	movs	r3, #27
 800547e:	2220      	movs	r2, #32
 8005480:	189b      	adds	r3, r3, r2
 8005482:	19db      	adds	r3, r3, r7
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d015      	beq.n	80054b6 <UART_SetConfig+0x3ee>
 800548a:	dc18      	bgt.n	80054be <UART_SetConfig+0x3f6>
 800548c:	2b04      	cmp	r3, #4
 800548e:	d00d      	beq.n	80054ac <UART_SetConfig+0x3e4>
 8005490:	dc15      	bgt.n	80054be <UART_SetConfig+0x3f6>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <UART_SetConfig+0x3d4>
 8005496:	2b02      	cmp	r3, #2
 8005498:	d005      	beq.n	80054a6 <UART_SetConfig+0x3de>
 800549a:	e010      	b.n	80054be <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fe f9b8 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80054a0:	0003      	movs	r3, r0
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054a4:	e014      	b.n	80054d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a6:	4b66      	ldr	r3, [pc, #408]	@ (8005640 <UART_SetConfig+0x578>)
 80054a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054aa:	e011      	b.n	80054d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ac:	f7fe f924 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80054b0:	0003      	movs	r3, r0
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054b4:	e00c      	b.n	80054d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054bc:	e008      	b.n	80054d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80054c2:	231a      	movs	r3, #26
 80054c4:	2220      	movs	r2, #32
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	19db      	adds	r3, r3, r7
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
        break;
 80054ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d100      	bne.n	80054d8 <UART_SetConfig+0x410>
 80054d6:	e09a      	b.n	800560e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054dc:	4b57      	ldr	r3, [pc, #348]	@ (800563c <UART_SetConfig+0x574>)
 80054de:	0052      	lsls	r2, r2, #1
 80054e0:	5ad3      	ldrh	r3, [r2, r3]
 80054e2:	0019      	movs	r1, r3
 80054e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80054e6:	f7fa fe17 	bl	8000118 <__udivsi3>
 80054ea:	0003      	movs	r3, r0
 80054ec:	005a      	lsls	r2, r3, #1
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	18d2      	adds	r2, r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0019      	movs	r1, r3
 80054fc:	0010      	movs	r0, r2
 80054fe:	f7fa fe0b 	bl	8000118 <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d921      	bls.n	8005550 <UART_SetConfig+0x488>
 800550c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800550e:	2380      	movs	r3, #128	@ 0x80
 8005510:	025b      	lsls	r3, r3, #9
 8005512:	429a      	cmp	r2, r3
 8005514:	d21c      	bcs.n	8005550 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	b29a      	uxth	r2, r3
 800551a:	200e      	movs	r0, #14
 800551c:	2420      	movs	r4, #32
 800551e:	1903      	adds	r3, r0, r4
 8005520:	19db      	adds	r3, r3, r7
 8005522:	210f      	movs	r1, #15
 8005524:	438a      	bics	r2, r1
 8005526:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	2207      	movs	r2, #7
 8005530:	4013      	ands	r3, r2
 8005532:	b299      	uxth	r1, r3
 8005534:	1903      	adds	r3, r0, r4
 8005536:	19db      	adds	r3, r3, r7
 8005538:	1902      	adds	r2, r0, r4
 800553a:	19d2      	adds	r2, r2, r7
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	1902      	adds	r2, r0, r4
 8005548:	19d2      	adds	r2, r2, r7
 800554a:	8812      	ldrh	r2, [r2, #0]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e05e      	b.n	800560e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	231a      	movs	r3, #26
 8005552:	2220      	movs	r2, #32
 8005554:	189b      	adds	r3, r3, r2
 8005556:	19db      	adds	r3, r3, r7
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e057      	b.n	800560e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800555e:	231b      	movs	r3, #27
 8005560:	2220      	movs	r2, #32
 8005562:	189b      	adds	r3, r3, r2
 8005564:	19db      	adds	r3, r3, r7
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d015      	beq.n	8005598 <UART_SetConfig+0x4d0>
 800556c:	dc18      	bgt.n	80055a0 <UART_SetConfig+0x4d8>
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00d      	beq.n	800558e <UART_SetConfig+0x4c6>
 8005572:	dc15      	bgt.n	80055a0 <UART_SetConfig+0x4d8>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <UART_SetConfig+0x4b6>
 8005578:	2b02      	cmp	r3, #2
 800557a:	d005      	beq.n	8005588 <UART_SetConfig+0x4c0>
 800557c:	e010      	b.n	80055a0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557e:	f7fe f947 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 8005582:	0003      	movs	r3, r0
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005586:	e014      	b.n	80055b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005588:	4b2d      	ldr	r3, [pc, #180]	@ (8005640 <UART_SetConfig+0x578>)
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800558c:	e011      	b.n	80055b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558e:	f7fe f8b3 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8005592:	0003      	movs	r3, r0
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005596:	e00c      	b.n	80055b2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800559e:	e008      	b.n	80055b2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80055a4:	231a      	movs	r3, #26
 80055a6:	2220      	movs	r2, #32
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
        break;
 80055b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02a      	beq.n	800560e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055bc:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <UART_SetConfig+0x574>)
 80055be:	0052      	lsls	r2, r2, #1
 80055c0:	5ad3      	ldrh	r3, [r2, r3]
 80055c2:	0019      	movs	r1, r3
 80055c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80055c6:	f7fa fda7 	bl	8000118 <__udivsi3>
 80055ca:	0003      	movs	r3, r0
 80055cc:	001a      	movs	r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	18d2      	adds	r2, r2, r3
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	0019      	movs	r1, r3
 80055dc:	0010      	movs	r0, r2
 80055de:	f7fa fd9b 	bl	8000118 <__udivsi3>
 80055e2:	0003      	movs	r3, r0
 80055e4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2b0f      	cmp	r3, #15
 80055ea:	d90a      	bls.n	8005602 <UART_SetConfig+0x53a>
 80055ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	025b      	lsls	r3, r3, #9
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d205      	bcs.n	8005602 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e005      	b.n	800560e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005602:	231a      	movs	r3, #26
 8005604:	2220      	movs	r2, #32
 8005606:	189b      	adds	r3, r3, r2
 8005608:	19db      	adds	r3, r3, r7
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	226a      	movs	r2, #106	@ 0x6a
 8005612:	2101      	movs	r1, #1
 8005614:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	2268      	movs	r2, #104	@ 0x68
 800561a:	2101      	movs	r1, #1
 800561c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	2200      	movs	r2, #0
 8005622:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	2200      	movs	r2, #0
 8005628:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800562a:	231a      	movs	r3, #26
 800562c:	2220      	movs	r2, #32
 800562e:	189b      	adds	r3, r3, r2
 8005630:	19db      	adds	r3, r3, r7
 8005632:	781b      	ldrb	r3, [r3, #0]
}
 8005634:	0018      	movs	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	b010      	add	sp, #64	@ 0x40
 800563a:	bdb0      	pop	{r4, r5, r7, pc}
 800563c:	08006ca0 	.word	0x08006ca0
 8005640:	00f42400 	.word	0x00f42400

08005644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	2208      	movs	r2, #8
 8005652:	4013      	ands	r3, r2
 8005654:	d00b      	beq.n	800566e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a4a      	ldr	r2, [pc, #296]	@ (8005788 <UART_AdvFeatureConfig+0x144>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	2201      	movs	r2, #1
 8005674:	4013      	ands	r3, r2
 8005676:	d00b      	beq.n	8005690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4a43      	ldr	r2, [pc, #268]	@ (800578c <UART_AdvFeatureConfig+0x148>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	2202      	movs	r2, #2
 8005696:	4013      	ands	r3, r2
 8005698:	d00b      	beq.n	80056b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005790 <UART_AdvFeatureConfig+0x14c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b6:	2204      	movs	r2, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4a34      	ldr	r2, [pc, #208]	@ (8005794 <UART_AdvFeatureConfig+0x150>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	2210      	movs	r2, #16
 80056da:	4013      	ands	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005798 <UART_AdvFeatureConfig+0x154>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	0019      	movs	r1, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	2220      	movs	r2, #32
 80056fc:	4013      	ands	r3, r2
 80056fe:	d00b      	beq.n	8005718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	4a25      	ldr	r2, [pc, #148]	@ (800579c <UART_AdvFeatureConfig+0x158>)
 8005708:	4013      	ands	r3, r2
 800570a:	0019      	movs	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571c:	2240      	movs	r2, #64	@ 0x40
 800571e:	4013      	ands	r3, r2
 8005720:	d01d      	beq.n	800575e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <UART_AdvFeatureConfig+0x15c>)
 800572a:	4013      	ands	r3, r2
 800572c:	0019      	movs	r1, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	035b      	lsls	r3, r3, #13
 8005742:	429a      	cmp	r2, r3
 8005744:	d10b      	bne.n	800575e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <UART_AdvFeatureConfig+0x160>)
 800574e:	4013      	ands	r3, r2
 8005750:	0019      	movs	r1, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	2280      	movs	r2, #128	@ 0x80
 8005764:	4013      	ands	r3, r2
 8005766:	d00b      	beq.n	8005780 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4a0e      	ldr	r2, [pc, #56]	@ (80057a8 <UART_AdvFeatureConfig+0x164>)
 8005770:	4013      	ands	r3, r2
 8005772:	0019      	movs	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }
}
 8005780:	46c0      	nop			@ (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	b002      	add	sp, #8
 8005786:	bd80      	pop	{r7, pc}
 8005788:	ffff7fff 	.word	0xffff7fff
 800578c:	fffdffff 	.word	0xfffdffff
 8005790:	fffeffff 	.word	0xfffeffff
 8005794:	fffbffff 	.word	0xfffbffff
 8005798:	ffffefff 	.word	0xffffefff
 800579c:	ffffdfff 	.word	0xffffdfff
 80057a0:	ffefffff 	.word	0xffefffff
 80057a4:	ff9fffff 	.word	0xff9fffff
 80057a8:	fff7ffff 	.word	0xfff7ffff

080057ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b092      	sub	sp, #72	@ 0x48
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2290      	movs	r2, #144	@ 0x90
 80057b8:	2100      	movs	r1, #0
 80057ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057bc:	f7fb fcec 	bl	8001198 <HAL_GetTick>
 80057c0:	0003      	movs	r3, r0
 80057c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d12d      	bne.n	800582e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d4:	2280      	movs	r2, #128	@ 0x80
 80057d6:	0391      	lsls	r1, r2, #14
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4a47      	ldr	r2, [pc, #284]	@ (80058f8 <UART_CheckIdleState+0x14c>)
 80057dc:	9200      	str	r2, [sp, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 f88e 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d022      	beq.n	800582e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057f2:	2301      	movs	r3, #1
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	f383 8810 	msr	PRIMASK, r3
}
 80057fc:	46c0      	nop			@ (mov r8, r8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2180      	movs	r1, #128	@ 0x80
 800580a:	438a      	bics	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	f383 8810 	msr	PRIMASK, r3
}
 8005818:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2288      	movs	r2, #136	@ 0x88
 800581e:	2120      	movs	r1, #32
 8005820:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2284      	movs	r2, #132	@ 0x84
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e060      	b.n	80058f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2204      	movs	r2, #4
 8005836:	4013      	ands	r3, r2
 8005838:	2b04      	cmp	r3, #4
 800583a:	d146      	bne.n	80058ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	2280      	movs	r2, #128	@ 0x80
 8005840:	03d1      	lsls	r1, r2, #15
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4a2c      	ldr	r2, [pc, #176]	@ (80058f8 <UART_CheckIdleState+0x14c>)
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	f000 f859 	bl	8005900 <UART_WaitOnFlagUntilTimeout>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d03b      	beq.n	80058ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005852:	f3ef 8310 	mrs	r3, PRIMASK
 8005856:	60fb      	str	r3, [r7, #12]
  return(result);
 8005858:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
 800585c:	2301      	movs	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f383 8810 	msr	PRIMASK, r3
}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4922      	ldr	r1, [pc, #136]	@ (80058fc <UART_CheckIdleState+0x150>)
 8005874:	400a      	ands	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005884:	f3ef 8310 	mrs	r3, PRIMASK
 8005888:	61bb      	str	r3, [r7, #24]
  return(result);
 800588a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	633b      	str	r3, [r7, #48]	@ 0x30
 800588e:	2301      	movs	r3, #1
 8005890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f383 8810 	msr	PRIMASK, r3
}
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	438a      	bics	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f383 8810 	msr	PRIMASK, r3
}
 80058b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	228c      	movs	r2, #140	@ 0x8c
 80058ba:	2120      	movs	r1, #32
 80058bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2284      	movs	r2, #132	@ 0x84
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e012      	b.n	80058f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2288      	movs	r2, #136	@ 0x88
 80058ce:	2120      	movs	r1, #32
 80058d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	228c      	movs	r2, #140	@ 0x8c
 80058d6:	2120      	movs	r1, #32
 80058d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2284      	movs	r2, #132	@ 0x84
 80058ea:	2100      	movs	r1, #0
 80058ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b010      	add	sp, #64	@ 0x40
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	01ffffff 	.word	0x01ffffff
 80058fc:	fffffedf 	.word	0xfffffedf

08005900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	1dfb      	adds	r3, r7, #7
 800590e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	e051      	b.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	3301      	adds	r3, #1
 8005916:	d04e      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fb fc3e 	bl	8001198 <HAL_GetTick>
 800591c:	0002      	movs	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e051      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2204      	movs	r2, #4
 800593a:	4013      	ands	r3, r2
 800593c:	d03b      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b80      	cmp	r3, #128	@ 0x80
 8005942:	d038      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d035      	beq.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	2208      	movs	r2, #8
 8005952:	4013      	ands	r3, r2
 8005954:	2b08      	cmp	r3, #8
 8005956:	d111      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2208      	movs	r2, #8
 800595e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	0018      	movs	r0, r3
 8005964:	f000 f83c 	bl	80059e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2290      	movs	r2, #144	@ 0x90
 800596c:	2108      	movs	r1, #8
 800596e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2284      	movs	r2, #132	@ 0x84
 8005974:	2100      	movs	r1, #0
 8005976:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e02c      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69da      	ldr	r2, [r3, #28]
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	401a      	ands	r2, r3
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	429a      	cmp	r2, r3
 800598e:	d112      	bne.n	80059b6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2280      	movs	r2, #128	@ 0x80
 8005996:	0112      	lsls	r2, r2, #4
 8005998:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	0018      	movs	r0, r3
 800599e:	f000 f81f 	bl	80059e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2290      	movs	r2, #144	@ 0x90
 80059a6:	2120      	movs	r1, #32
 80059a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2284      	movs	r2, #132	@ 0x84
 80059ae:	2100      	movs	r1, #0
 80059b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00f      	b.n	80059d6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	425a      	negs	r2, r3
 80059c6:	4153      	adcs	r3, r2
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	001a      	movs	r2, r3
 80059cc:	1dfb      	adds	r3, r7, #7
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d09e      	beq.n	8005912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b004      	add	sp, #16
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08e      	sub	sp, #56	@ 0x38
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e8:	f3ef 8310 	mrs	r3, PRIMASK
 80059ec:	617b      	str	r3, [r7, #20]
  return(result);
 80059ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f2:	2301      	movs	r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4926      	ldr	r1, [pc, #152]	@ (8005aa4 <UART_EndRxTransfer+0xc4>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f383 8810 	msr	PRIMASK, r3
}
 8005a18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	491b      	ldr	r1, [pc, #108]	@ (8005aa8 <UART_EndRxTransfer+0xc8>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d118      	bne.n	8005a86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a54:	f3ef 8310 	mrs	r3, PRIMASK
 8005a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2110      	movs	r1, #16
 8005a76:	438a      	bics	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	228c      	movs	r2, #140	@ 0x8c
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b00e      	add	sp, #56	@ 0x38
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	fffffedf 	.word	0xfffffedf
 8005aa8:	effffffe 	.word	0xeffffffe

08005aac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2284      	movs	r2, #132	@ 0x84
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e027      	b.n	8005b12 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2284      	movs	r2, #132	@ 0x84
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2288      	movs	r2, #136	@ 0x88
 8005ace:	2124      	movs	r1, #36	@ 0x24
 8005ad0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	438a      	bics	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a0b      	ldr	r2, [pc, #44]	@ (8005b1c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2288      	movs	r2, #136	@ 0x88
 8005b04:	2120      	movs	r1, #32
 8005b06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2284      	movs	r2, #132	@ 0x84
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b004      	add	sp, #16
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	dfffffff 	.word	0xdfffffff

08005b20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2284      	movs	r2, #132	@ 0x84
 8005b2e:	5c9b      	ldrb	r3, [r3, r2]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e02e      	b.n	8005b96 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2284      	movs	r2, #132	@ 0x84
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2288      	movs	r2, #136	@ 0x88
 8005b44:	2124      	movs	r1, #36	@ 0x24
 8005b46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	438a      	bics	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	08d9      	lsrs	r1, r3, #3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f000 f854 	bl	8005c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2288      	movs	r2, #136	@ 0x88
 8005b88:	2120      	movs	r1, #32
 8005b8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2284      	movs	r2, #132	@ 0x84
 8005b90:	2100      	movs	r1, #0
 8005b92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	0018      	movs	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b004      	add	sp, #16
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2284      	movs	r2, #132	@ 0x84
 8005bae:	5c9b      	ldrb	r3, [r3, r2]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e02f      	b.n	8005c18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2284      	movs	r2, #132	@ 0x84
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2288      	movs	r2, #136	@ 0x88
 8005bc4:	2124      	movs	r1, #36	@ 0x24
 8005bc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	438a      	bics	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4a0e      	ldr	r2, [pc, #56]	@ (8005c20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f000 f813 	bl	8005c24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2288      	movs	r2, #136	@ 0x88
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2284      	movs	r2, #132	@ 0x84
 8005c12:	2100      	movs	r1, #0
 8005c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b004      	add	sp, #16
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	f1ffffff 	.word	0xf1ffffff

08005c24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d108      	bne.n	8005c46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	226a      	movs	r2, #106	@ 0x6a
 8005c38:	2101      	movs	r1, #1
 8005c3a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2268      	movs	r2, #104	@ 0x68
 8005c40:	2101      	movs	r1, #1
 8005c42:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c44:	e043      	b.n	8005cce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c46:	260f      	movs	r6, #15
 8005c48:	19bb      	adds	r3, r7, r6
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c4e:	200e      	movs	r0, #14
 8005c50:	183b      	adds	r3, r7, r0
 8005c52:	2208      	movs	r2, #8
 8005c54:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	0e5b      	lsrs	r3, r3, #25
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	240d      	movs	r4, #13
 8005c62:	193b      	adds	r3, r7, r4
 8005c64:	2107      	movs	r1, #7
 8005c66:	400a      	ands	r2, r1
 8005c68:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	0f5b      	lsrs	r3, r3, #29
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	250c      	movs	r5, #12
 8005c76:	197b      	adds	r3, r7, r5
 8005c78:	2107      	movs	r1, #7
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	197a      	adds	r2, r7, r5
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	4914      	ldr	r1, [pc, #80]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c88:	5c8a      	ldrb	r2, [r1, r2]
 8005c8a:	435a      	muls	r2, r3
 8005c8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8e:	197b      	adds	r3, r7, r5
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4a12      	ldr	r2, [pc, #72]	@ (8005cdc <UARTEx_SetNbDataToProcess+0xb8>)
 8005c94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c96:	0019      	movs	r1, r3
 8005c98:	f7fa fac8 	bl	800022c <__divsi3>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	b299      	uxth	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	226a      	movs	r2, #106	@ 0x6a
 8005ca4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca6:	19bb      	adds	r3, r7, r6
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	193a      	adds	r2, r7, r4
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	490a      	ldr	r1, [pc, #40]	@ (8005cd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005cb0:	5c8a      	ldrb	r2, [r1, r2]
 8005cb2:	435a      	muls	r2, r3
 8005cb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4a08      	ldr	r2, [pc, #32]	@ (8005cdc <UARTEx_SetNbDataToProcess+0xb8>)
 8005cbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	f7fa fab4 	bl	800022c <__divsi3>
 8005cc4:	0003      	movs	r3, r0
 8005cc6:	b299      	uxth	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2268      	movs	r2, #104	@ 0x68
 8005ccc:	5299      	strh	r1, [r3, r2]
}
 8005cce:	46c0      	nop			@ (mov r8, r8)
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b005      	add	sp, #20
 8005cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	08006cb8 	.word	0x08006cb8
 8005cdc:	08006cc0 	.word	0x08006cc0

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	0004      	movs	r4, r0
 8005ce6:	6003      	str	r3, [r0, #0]
 8005ce8:	6043      	str	r3, [r0, #4]
 8005cea:	6083      	str	r3, [r0, #8]
 8005cec:	8181      	strh	r1, [r0, #12]
 8005cee:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cf0:	81c2      	strh	r2, [r0, #14]
 8005cf2:	6103      	str	r3, [r0, #16]
 8005cf4:	6143      	str	r3, [r0, #20]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	@ 0x5c
 8005cfe:	f000 f90f 	bl	8005f20 <memset>
 8005d02:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <std+0x50>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d08:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <std+0x54>)
 8005d0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d38 <std+0x58>)
 8005d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <std+0x5c>)
 8005d12:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <std+0x60>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d005      	beq.n	8005d26 <std+0x46>
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <std+0x64>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d002      	beq.n	8005d26 <std+0x46>
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <std+0x68>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d103      	bne.n	8005d2e <std+0x4e>
 8005d26:	0020      	movs	r0, r4
 8005d28:	3058      	adds	r0, #88	@ 0x58
 8005d2a:	f000 f979 	bl	8006020 <__retarget_lock_init_recursive>
 8005d2e:	bd10      	pop	{r4, pc}
 8005d30:	08005e89 	.word	0x08005e89
 8005d34:	08005eb1 	.word	0x08005eb1
 8005d38:	08005ee9 	.word	0x08005ee9
 8005d3c:	08005f15 	.word	0x08005f15
 8005d40:	20000234 	.word	0x20000234
 8005d44:	2000029c 	.word	0x2000029c
 8005d48:	20000304 	.word	0x20000304

08005d4c <stdio_exit_handler>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4a03      	ldr	r2, [pc, #12]	@ (8005d5c <stdio_exit_handler+0x10>)
 8005d50:	4903      	ldr	r1, [pc, #12]	@ (8005d60 <stdio_exit_handler+0x14>)
 8005d52:	4804      	ldr	r0, [pc, #16]	@ (8005d64 <stdio_exit_handler+0x18>)
 8005d54:	f000 f86c 	bl	8005e30 <_fwalk_sglue>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	2000000c 	.word	0x2000000c
 8005d60:	080068ad 	.word	0x080068ad
 8005d64:	2000001c 	.word	0x2000001c

08005d68 <cleanup_stdio>:
 8005d68:	6841      	ldr	r1, [r0, #4]
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <cleanup_stdio+0x30>)
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	0004      	movs	r4, r0
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d001      	beq.n	8005d78 <cleanup_stdio+0x10>
 8005d74:	f000 fd9a 	bl	80068ac <_fflush_r>
 8005d78:	68a1      	ldr	r1, [r4, #8]
 8005d7a:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <cleanup_stdio+0x34>)
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	d002      	beq.n	8005d86 <cleanup_stdio+0x1e>
 8005d80:	0020      	movs	r0, r4
 8005d82:	f000 fd93 	bl	80068ac <_fflush_r>
 8005d86:	68e1      	ldr	r1, [r4, #12]
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <cleanup_stdio+0x38>)
 8005d8a:	4299      	cmp	r1, r3
 8005d8c:	d002      	beq.n	8005d94 <cleanup_stdio+0x2c>
 8005d8e:	0020      	movs	r0, r4
 8005d90:	f000 fd8c 	bl	80068ac <_fflush_r>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	20000234 	.word	0x20000234
 8005d9c:	2000029c 	.word	0x2000029c
 8005da0:	20000304 	.word	0x20000304

08005da4 <global_stdio_init.part.0>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <global_stdio_init.part.0+0x28>)
 8005da8:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <global_stdio_init.part.0+0x2c>)
 8005daa:	2104      	movs	r1, #4
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	4809      	ldr	r0, [pc, #36]	@ (8005dd4 <global_stdio_init.part.0+0x30>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	f7ff ff95 	bl	8005ce0 <std>
 8005db6:	2201      	movs	r2, #1
 8005db8:	2109      	movs	r1, #9
 8005dba:	4807      	ldr	r0, [pc, #28]	@ (8005dd8 <global_stdio_init.part.0+0x34>)
 8005dbc:	f7ff ff90 	bl	8005ce0 <std>
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	2112      	movs	r1, #18
 8005dc4:	4805      	ldr	r0, [pc, #20]	@ (8005ddc <global_stdio_init.part.0+0x38>)
 8005dc6:	f7ff ff8b 	bl	8005ce0 <std>
 8005dca:	bd10      	pop	{r4, pc}
 8005dcc:	2000036c 	.word	0x2000036c
 8005dd0:	08005d4d 	.word	0x08005d4d
 8005dd4:	20000234 	.word	0x20000234
 8005dd8:	2000029c 	.word	0x2000029c
 8005ddc:	20000304 	.word	0x20000304

08005de0 <__sfp_lock_acquire>:
 8005de0:	b510      	push	{r4, lr}
 8005de2:	4802      	ldr	r0, [pc, #8]	@ (8005dec <__sfp_lock_acquire+0xc>)
 8005de4:	f000 f91d 	bl	8006022 <__retarget_lock_acquire_recursive>
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	20000375 	.word	0x20000375

08005df0 <__sfp_lock_release>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4802      	ldr	r0, [pc, #8]	@ (8005dfc <__sfp_lock_release+0xc>)
 8005df4:	f000 f916 	bl	8006024 <__retarget_lock_release_recursive>
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	20000375 	.word	0x20000375

08005e00 <__sinit>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	0004      	movs	r4, r0
 8005e04:	f7ff ffec 	bl	8005de0 <__sfp_lock_acquire>
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <__sinit+0x14>
 8005e0e:	f7ff ffef 	bl	8005df0 <__sfp_lock_release>
 8005e12:	bd10      	pop	{r4, pc}
 8005e14:	4b04      	ldr	r3, [pc, #16]	@ (8005e28 <__sinit+0x28>)
 8005e16:	6223      	str	r3, [r4, #32]
 8005e18:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <__sinit+0x2c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f6      	bne.n	8005e0e <__sinit+0xe>
 8005e20:	f7ff ffc0 	bl	8005da4 <global_stdio_init.part.0>
 8005e24:	e7f3      	b.n	8005e0e <__sinit+0xe>
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	08005d69 	.word	0x08005d69
 8005e2c:	2000036c 	.word	0x2000036c

08005e30 <_fwalk_sglue>:
 8005e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e32:	0014      	movs	r4, r2
 8005e34:	2600      	movs	r6, #0
 8005e36:	9000      	str	r0, [sp, #0]
 8005e38:	9101      	str	r1, [sp, #4]
 8005e3a:	68a5      	ldr	r5, [r4, #8]
 8005e3c:	6867      	ldr	r7, [r4, #4]
 8005e3e:	3f01      	subs	r7, #1
 8005e40:	d504      	bpl.n	8005e4c <_fwalk_sglue+0x1c>
 8005e42:	6824      	ldr	r4, [r4, #0]
 8005e44:	2c00      	cmp	r4, #0
 8005e46:	d1f8      	bne.n	8005e3a <_fwalk_sglue+0xa>
 8005e48:	0030      	movs	r0, r6
 8005e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e4c:	89ab      	ldrh	r3, [r5, #12]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d908      	bls.n	8005e64 <_fwalk_sglue+0x34>
 8005e52:	220e      	movs	r2, #14
 8005e54:	5eab      	ldrsh	r3, [r5, r2]
 8005e56:	3301      	adds	r3, #1
 8005e58:	d004      	beq.n	8005e64 <_fwalk_sglue+0x34>
 8005e5a:	0029      	movs	r1, r5
 8005e5c:	9800      	ldr	r0, [sp, #0]
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	4798      	blx	r3
 8005e62:	4306      	orrs	r6, r0
 8005e64:	3568      	adds	r5, #104	@ 0x68
 8005e66:	e7ea      	b.n	8005e3e <_fwalk_sglue+0xe>

08005e68 <iprintf>:
 8005e68:	b40f      	push	{r0, r1, r2, r3}
 8005e6a:	b507      	push	{r0, r1, r2, lr}
 8005e6c:	4905      	ldr	r1, [pc, #20]	@ (8005e84 <iprintf+0x1c>)
 8005e6e:	ab04      	add	r3, sp, #16
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	cb04      	ldmia	r3!, {r2}
 8005e74:	6881      	ldr	r1, [r0, #8]
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f000 f9fa 	bl	8006270 <_vfiprintf_r>
 8005e7c:	b003      	add	sp, #12
 8005e7e:	bc08      	pop	{r3}
 8005e80:	b004      	add	sp, #16
 8005e82:	4718      	bx	r3
 8005e84:	20000018 	.word	0x20000018

08005e88 <__sread>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	000c      	movs	r4, r1
 8005e8c:	250e      	movs	r5, #14
 8005e8e:	5f49      	ldrsh	r1, [r1, r5]
 8005e90:	f000 f874 	bl	8005f7c <_read_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	db03      	blt.n	8005ea0 <__sread+0x18>
 8005e98:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005e9a:	181b      	adds	r3, r3, r0
 8005e9c:	6563      	str	r3, [r4, #84]	@ 0x54
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	4a02      	ldr	r2, [pc, #8]	@ (8005eac <__sread+0x24>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	e7f9      	b.n	8005e9e <__sread+0x16>
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	ffffefff 	.word	0xffffefff

08005eb0 <__swrite>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	001f      	movs	r7, r3
 8005eb4:	898b      	ldrh	r3, [r1, #12]
 8005eb6:	0005      	movs	r5, r0
 8005eb8:	000c      	movs	r4, r1
 8005eba:	0016      	movs	r6, r2
 8005ebc:	05db      	lsls	r3, r3, #23
 8005ebe:	d505      	bpl.n	8005ecc <__swrite+0x1c>
 8005ec0:	230e      	movs	r3, #14
 8005ec2:	5ec9      	ldrsh	r1, [r1, r3]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	f000 f844 	bl	8005f54 <_lseek_r>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	4a05      	ldr	r2, [pc, #20]	@ (8005ee4 <__swrite+0x34>)
 8005ed0:	0028      	movs	r0, r5
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	0032      	movs	r2, r6
 8005ed8:	230e      	movs	r3, #14
 8005eda:	5ee1      	ldrsh	r1, [r4, r3]
 8005edc:	003b      	movs	r3, r7
 8005ede:	f000 f861 	bl	8005fa4 <_write_r>
 8005ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee4:	ffffefff 	.word	0xffffefff

08005ee8 <__sseek>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	000c      	movs	r4, r1
 8005eec:	250e      	movs	r5, #14
 8005eee:	5f49      	ldrsh	r1, [r1, r5]
 8005ef0:	f000 f830 	bl	8005f54 <_lseek_r>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	1c42      	adds	r2, r0, #1
 8005ef8:	d103      	bne.n	8005f02 <__sseek+0x1a>
 8005efa:	4a05      	ldr	r2, [pc, #20]	@ (8005f10 <__sseek+0x28>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	2280      	movs	r2, #128	@ 0x80
 8005f04:	0152      	lsls	r2, r2, #5
 8005f06:	4313      	orrs	r3, r2
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f0c:	e7f8      	b.n	8005f00 <__sseek+0x18>
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	ffffefff 	.word	0xffffefff

08005f14 <__sclose>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	230e      	movs	r3, #14
 8005f18:	5ec9      	ldrsh	r1, [r1, r3]
 8005f1a:	f000 f809 	bl	8005f30 <_close_r>
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <memset>:
 8005f20:	0003      	movs	r3, r0
 8005f22:	1882      	adds	r2, r0, r2
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d100      	bne.n	8005f2a <memset+0xa>
 8005f28:	4770      	bx	lr
 8005f2a:	7019      	strb	r1, [r3, #0]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	e7f9      	b.n	8005f24 <memset+0x4>

08005f30 <_close_r>:
 8005f30:	2300      	movs	r3, #0
 8005f32:	b570      	push	{r4, r5, r6, lr}
 8005f34:	4d06      	ldr	r5, [pc, #24]	@ (8005f50 <_close_r+0x20>)
 8005f36:	0004      	movs	r4, r0
 8005f38:	0008      	movs	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fa fe8d 	bl	8000c5a <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d103      	bne.n	8005f4c <_close_r+0x1c>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d000      	beq.n	8005f4c <_close_r+0x1c>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	20000370 	.word	0x20000370

08005f54 <_lseek_r>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	0004      	movs	r4, r0
 8005f58:	0008      	movs	r0, r1
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	001a      	movs	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	4d05      	ldr	r5, [pc, #20]	@ (8005f78 <_lseek_r+0x24>)
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fa fe9a 	bl	8000c9c <_lseek>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d103      	bne.n	8005f74 <_lseek_r+0x20>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d000      	beq.n	8005f74 <_lseek_r+0x20>
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	20000370 	.word	0x20000370

08005f7c <_read_r>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	0004      	movs	r4, r0
 8005f80:	0008      	movs	r0, r1
 8005f82:	0011      	movs	r1, r2
 8005f84:	001a      	movs	r2, r3
 8005f86:	2300      	movs	r3, #0
 8005f88:	4d05      	ldr	r5, [pc, #20]	@ (8005fa0 <_read_r+0x24>)
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	f7fa fe2c 	bl	8000be8 <_read>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d103      	bne.n	8005f9c <_read_r+0x20>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d000      	beq.n	8005f9c <_read_r+0x20>
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	20000370 	.word	0x20000370

08005fa4 <_write_r>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	0004      	movs	r4, r0
 8005fa8:	0008      	movs	r0, r1
 8005faa:	0011      	movs	r1, r2
 8005fac:	001a      	movs	r2, r3
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4d05      	ldr	r5, [pc, #20]	@ (8005fc8 <_write_r+0x24>)
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	f7fa fe35 	bl	8000c22 <_write>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d103      	bne.n	8005fc4 <_write_r+0x20>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d000      	beq.n	8005fc4 <_write_r+0x20>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd70      	pop	{r4, r5, r6, pc}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	20000370 	.word	0x20000370

08005fcc <__errno>:
 8005fcc:	4b01      	ldr	r3, [pc, #4]	@ (8005fd4 <__errno+0x8>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	4770      	bx	lr
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	20000018 	.word	0x20000018

08005fd8 <__libc_init_array>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	2600      	movs	r6, #0
 8005fdc:	4c0c      	ldr	r4, [pc, #48]	@ (8006010 <__libc_init_array+0x38>)
 8005fde:	4d0d      	ldr	r5, [pc, #52]	@ (8006014 <__libc_init_array+0x3c>)
 8005fe0:	1b64      	subs	r4, r4, r5
 8005fe2:	10a4      	asrs	r4, r4, #2
 8005fe4:	42a6      	cmp	r6, r4
 8005fe6:	d109      	bne.n	8005ffc <__libc_init_array+0x24>
 8005fe8:	2600      	movs	r6, #0
 8005fea:	f000 fdd9 	bl	8006ba0 <_init>
 8005fee:	4c0a      	ldr	r4, [pc, #40]	@ (8006018 <__libc_init_array+0x40>)
 8005ff0:	4d0a      	ldr	r5, [pc, #40]	@ (800601c <__libc_init_array+0x44>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	42a6      	cmp	r6, r4
 8005ff8:	d105      	bne.n	8006006 <__libc_init_array+0x2e>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	00b3      	lsls	r3, r6, #2
 8005ffe:	58eb      	ldr	r3, [r5, r3]
 8006000:	4798      	blx	r3
 8006002:	3601      	adds	r6, #1
 8006004:	e7ee      	b.n	8005fe4 <__libc_init_array+0xc>
 8006006:	00b3      	lsls	r3, r6, #2
 8006008:	58eb      	ldr	r3, [r5, r3]
 800600a:	4798      	blx	r3
 800600c:	3601      	adds	r6, #1
 800600e:	e7f2      	b.n	8005ff6 <__libc_init_array+0x1e>
 8006010:	08006d04 	.word	0x08006d04
 8006014:	08006d04 	.word	0x08006d04
 8006018:	08006d08 	.word	0x08006d08
 800601c:	08006d04 	.word	0x08006d04

08006020 <__retarget_lock_init_recursive>:
 8006020:	4770      	bx	lr

08006022 <__retarget_lock_acquire_recursive>:
 8006022:	4770      	bx	lr

08006024 <__retarget_lock_release_recursive>:
 8006024:	4770      	bx	lr
	...

08006028 <_free_r>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	0005      	movs	r5, r0
 800602c:	1e0c      	subs	r4, r1, #0
 800602e:	d010      	beq.n	8006052 <_free_r+0x2a>
 8006030:	3c04      	subs	r4, #4
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	da00      	bge.n	800603a <_free_r+0x12>
 8006038:	18e4      	adds	r4, r4, r3
 800603a:	0028      	movs	r0, r5
 800603c:	f000 f8e0 	bl	8006200 <__malloc_lock>
 8006040:	4a1d      	ldr	r2, [pc, #116]	@ (80060b8 <_free_r+0x90>)
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <_free_r+0x2c>
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	6014      	str	r4, [r2, #0]
 800604c:	0028      	movs	r0, r5
 800604e:	f000 f8df 	bl	8006210 <__malloc_unlock>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	42a3      	cmp	r3, r4
 8006056:	d908      	bls.n	800606a <_free_r+0x42>
 8006058:	6820      	ldr	r0, [r4, #0]
 800605a:	1821      	adds	r1, r4, r0
 800605c:	428b      	cmp	r3, r1
 800605e:	d1f3      	bne.n	8006048 <_free_r+0x20>
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	1809      	adds	r1, r1, r0
 8006066:	6021      	str	r1, [r4, #0]
 8006068:	e7ee      	b.n	8006048 <_free_r+0x20>
 800606a:	001a      	movs	r2, r3
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <_free_r+0x4e>
 8006072:	42a3      	cmp	r3, r4
 8006074:	d9f9      	bls.n	800606a <_free_r+0x42>
 8006076:	6811      	ldr	r1, [r2, #0]
 8006078:	1850      	adds	r0, r2, r1
 800607a:	42a0      	cmp	r0, r4
 800607c:	d10b      	bne.n	8006096 <_free_r+0x6e>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	1809      	adds	r1, r1, r0
 8006082:	1850      	adds	r0, r2, r1
 8006084:	6011      	str	r1, [r2, #0]
 8006086:	4283      	cmp	r3, r0
 8006088:	d1e0      	bne.n	800604c <_free_r+0x24>
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	1841      	adds	r1, r0, r1
 8006090:	6011      	str	r1, [r2, #0]
 8006092:	6053      	str	r3, [r2, #4]
 8006094:	e7da      	b.n	800604c <_free_r+0x24>
 8006096:	42a0      	cmp	r0, r4
 8006098:	d902      	bls.n	80060a0 <_free_r+0x78>
 800609a:	230c      	movs	r3, #12
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	e7d5      	b.n	800604c <_free_r+0x24>
 80060a0:	6820      	ldr	r0, [r4, #0]
 80060a2:	1821      	adds	r1, r4, r0
 80060a4:	428b      	cmp	r3, r1
 80060a6:	d103      	bne.n	80060b0 <_free_r+0x88>
 80060a8:	6819      	ldr	r1, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	1809      	adds	r1, r1, r0
 80060ae:	6021      	str	r1, [r4, #0]
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6054      	str	r4, [r2, #4]
 80060b4:	e7ca      	b.n	800604c <_free_r+0x24>
 80060b6:	46c0      	nop			@ (mov r8, r8)
 80060b8:	2000037c 	.word	0x2000037c

080060bc <sbrk_aligned>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	4e0f      	ldr	r6, [pc, #60]	@ (80060fc <sbrk_aligned+0x40>)
 80060c0:	000d      	movs	r5, r1
 80060c2:	6831      	ldr	r1, [r6, #0]
 80060c4:	0004      	movs	r4, r0
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d102      	bne.n	80060d0 <sbrk_aligned+0x14>
 80060ca:	f000 fcbb 	bl	8006a44 <_sbrk_r>
 80060ce:	6030      	str	r0, [r6, #0]
 80060d0:	0029      	movs	r1, r5
 80060d2:	0020      	movs	r0, r4
 80060d4:	f000 fcb6 	bl	8006a44 <_sbrk_r>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d103      	bne.n	80060e4 <sbrk_aligned+0x28>
 80060dc:	2501      	movs	r5, #1
 80060de:	426d      	negs	r5, r5
 80060e0:	0028      	movs	r0, r5
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	2303      	movs	r3, #3
 80060e6:	1cc5      	adds	r5, r0, #3
 80060e8:	439d      	bics	r5, r3
 80060ea:	42a8      	cmp	r0, r5
 80060ec:	d0f8      	beq.n	80060e0 <sbrk_aligned+0x24>
 80060ee:	1a29      	subs	r1, r5, r0
 80060f0:	0020      	movs	r0, r4
 80060f2:	f000 fca7 	bl	8006a44 <_sbrk_r>
 80060f6:	3001      	adds	r0, #1
 80060f8:	d1f2      	bne.n	80060e0 <sbrk_aligned+0x24>
 80060fa:	e7ef      	b.n	80060dc <sbrk_aligned+0x20>
 80060fc:	20000378 	.word	0x20000378

08006100 <_malloc_r>:
 8006100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006102:	2203      	movs	r2, #3
 8006104:	1ccb      	adds	r3, r1, #3
 8006106:	4393      	bics	r3, r2
 8006108:	3308      	adds	r3, #8
 800610a:	0005      	movs	r5, r0
 800610c:	001f      	movs	r7, r3
 800610e:	2b0c      	cmp	r3, #12
 8006110:	d234      	bcs.n	800617c <_malloc_r+0x7c>
 8006112:	270c      	movs	r7, #12
 8006114:	42b9      	cmp	r1, r7
 8006116:	d833      	bhi.n	8006180 <_malloc_r+0x80>
 8006118:	0028      	movs	r0, r5
 800611a:	f000 f871 	bl	8006200 <__malloc_lock>
 800611e:	4e37      	ldr	r6, [pc, #220]	@ (80061fc <_malloc_r+0xfc>)
 8006120:	6833      	ldr	r3, [r6, #0]
 8006122:	001c      	movs	r4, r3
 8006124:	2c00      	cmp	r4, #0
 8006126:	d12f      	bne.n	8006188 <_malloc_r+0x88>
 8006128:	0039      	movs	r1, r7
 800612a:	0028      	movs	r0, r5
 800612c:	f7ff ffc6 	bl	80060bc <sbrk_aligned>
 8006130:	0004      	movs	r4, r0
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d15f      	bne.n	80061f6 <_malloc_r+0xf6>
 8006136:	6834      	ldr	r4, [r6, #0]
 8006138:	9400      	str	r4, [sp, #0]
 800613a:	9b00      	ldr	r3, [sp, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d14a      	bne.n	80061d6 <_malloc_r+0xd6>
 8006140:	2c00      	cmp	r4, #0
 8006142:	d052      	beq.n	80061ea <_malloc_r+0xea>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	0028      	movs	r0, r5
 8006148:	18e3      	adds	r3, r4, r3
 800614a:	9900      	ldr	r1, [sp, #0]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	f000 fc79 	bl	8006a44 <_sbrk_r>
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	4283      	cmp	r3, r0
 8006156:	d148      	bne.n	80061ea <_malloc_r+0xea>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	0028      	movs	r0, r5
 800615c:	1aff      	subs	r7, r7, r3
 800615e:	0039      	movs	r1, r7
 8006160:	f7ff ffac 	bl	80060bc <sbrk_aligned>
 8006164:	3001      	adds	r0, #1
 8006166:	d040      	beq.n	80061ea <_malloc_r+0xea>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	19db      	adds	r3, r3, r7
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	6833      	ldr	r3, [r6, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	2a00      	cmp	r2, #0
 8006174:	d133      	bne.n	80061de <_malloc_r+0xde>
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	e019      	b.n	80061b0 <_malloc_r+0xb0>
 800617c:	2b00      	cmp	r3, #0
 800617e:	dac9      	bge.n	8006114 <_malloc_r+0x14>
 8006180:	230c      	movs	r3, #12
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	2000      	movs	r0, #0
 8006186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006188:	6821      	ldr	r1, [r4, #0]
 800618a:	1bc9      	subs	r1, r1, r7
 800618c:	d420      	bmi.n	80061d0 <_malloc_r+0xd0>
 800618e:	290b      	cmp	r1, #11
 8006190:	d90a      	bls.n	80061a8 <_malloc_r+0xa8>
 8006192:	19e2      	adds	r2, r4, r7
 8006194:	6027      	str	r7, [r4, #0]
 8006196:	42a3      	cmp	r3, r4
 8006198:	d104      	bne.n	80061a4 <_malloc_r+0xa4>
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	6863      	ldr	r3, [r4, #4]
 800619e:	6011      	str	r1, [r2, #0]
 80061a0:	6053      	str	r3, [r2, #4]
 80061a2:	e005      	b.n	80061b0 <_malloc_r+0xb0>
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e7f9      	b.n	800619c <_malloc_r+0x9c>
 80061a8:	6862      	ldr	r2, [r4, #4]
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	d10e      	bne.n	80061cc <_malloc_r+0xcc>
 80061ae:	6032      	str	r2, [r6, #0]
 80061b0:	0028      	movs	r0, r5
 80061b2:	f000 f82d 	bl	8006210 <__malloc_unlock>
 80061b6:	0020      	movs	r0, r4
 80061b8:	2207      	movs	r2, #7
 80061ba:	300b      	adds	r0, #11
 80061bc:	1d23      	adds	r3, r4, #4
 80061be:	4390      	bics	r0, r2
 80061c0:	1ac2      	subs	r2, r0, r3
 80061c2:	4298      	cmp	r0, r3
 80061c4:	d0df      	beq.n	8006186 <_malloc_r+0x86>
 80061c6:	1a1b      	subs	r3, r3, r0
 80061c8:	50a3      	str	r3, [r4, r2]
 80061ca:	e7dc      	b.n	8006186 <_malloc_r+0x86>
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e7ef      	b.n	80061b0 <_malloc_r+0xb0>
 80061d0:	0023      	movs	r3, r4
 80061d2:	6864      	ldr	r4, [r4, #4]
 80061d4:	e7a6      	b.n	8006124 <_malloc_r+0x24>
 80061d6:	9c00      	ldr	r4, [sp, #0]
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	e7ad      	b.n	800613a <_malloc_r+0x3a>
 80061de:	001a      	movs	r2, r3
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	d1fb      	bne.n	80061de <_malloc_r+0xde>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e7da      	b.n	80061a0 <_malloc_r+0xa0>
 80061ea:	230c      	movs	r3, #12
 80061ec:	0028      	movs	r0, r5
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f000 f80e 	bl	8006210 <__malloc_unlock>
 80061f4:	e7c6      	b.n	8006184 <_malloc_r+0x84>
 80061f6:	6007      	str	r7, [r0, #0]
 80061f8:	e7da      	b.n	80061b0 <_malloc_r+0xb0>
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	2000037c 	.word	0x2000037c

08006200 <__malloc_lock>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4802      	ldr	r0, [pc, #8]	@ (800620c <__malloc_lock+0xc>)
 8006204:	f7ff ff0d 	bl	8006022 <__retarget_lock_acquire_recursive>
 8006208:	bd10      	pop	{r4, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	20000374 	.word	0x20000374

08006210 <__malloc_unlock>:
 8006210:	b510      	push	{r4, lr}
 8006212:	4802      	ldr	r0, [pc, #8]	@ (800621c <__malloc_unlock+0xc>)
 8006214:	f7ff ff06 	bl	8006024 <__retarget_lock_release_recursive>
 8006218:	bd10      	pop	{r4, pc}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	20000374 	.word	0x20000374

08006220 <__sfputc_r>:
 8006220:	6893      	ldr	r3, [r2, #8]
 8006222:	b510      	push	{r4, lr}
 8006224:	3b01      	subs	r3, #1
 8006226:	6093      	str	r3, [r2, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da04      	bge.n	8006236 <__sfputc_r+0x16>
 800622c:	6994      	ldr	r4, [r2, #24]
 800622e:	42a3      	cmp	r3, r4
 8006230:	db07      	blt.n	8006242 <__sfputc_r+0x22>
 8006232:	290a      	cmp	r1, #10
 8006234:	d005      	beq.n	8006242 <__sfputc_r+0x22>
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	1c58      	adds	r0, r3, #1
 800623a:	6010      	str	r0, [r2, #0]
 800623c:	7019      	strb	r1, [r3, #0]
 800623e:	0008      	movs	r0, r1
 8006240:	bd10      	pop	{r4, pc}
 8006242:	f000 fb5e 	bl	8006902 <__swbuf_r>
 8006246:	0001      	movs	r1, r0
 8006248:	e7f9      	b.n	800623e <__sfputc_r+0x1e>

0800624a <__sfputs_r>:
 800624a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624c:	0006      	movs	r6, r0
 800624e:	000f      	movs	r7, r1
 8006250:	0014      	movs	r4, r2
 8006252:	18d5      	adds	r5, r2, r3
 8006254:	42ac      	cmp	r4, r5
 8006256:	d101      	bne.n	800625c <__sfputs_r+0x12>
 8006258:	2000      	movs	r0, #0
 800625a:	e007      	b.n	800626c <__sfputs_r+0x22>
 800625c:	7821      	ldrb	r1, [r4, #0]
 800625e:	003a      	movs	r2, r7
 8006260:	0030      	movs	r0, r6
 8006262:	f7ff ffdd 	bl	8006220 <__sfputc_r>
 8006266:	3401      	adds	r4, #1
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d1f3      	bne.n	8006254 <__sfputs_r+0xa>
 800626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006270 <_vfiprintf_r>:
 8006270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006272:	b0a1      	sub	sp, #132	@ 0x84
 8006274:	000f      	movs	r7, r1
 8006276:	0015      	movs	r5, r2
 8006278:	001e      	movs	r6, r3
 800627a:	9003      	str	r0, [sp, #12]
 800627c:	2800      	cmp	r0, #0
 800627e:	d004      	beq.n	800628a <_vfiprintf_r+0x1a>
 8006280:	6a03      	ldr	r3, [r0, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <_vfiprintf_r+0x1a>
 8006286:	f7ff fdbb 	bl	8005e00 <__sinit>
 800628a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800628c:	07db      	lsls	r3, r3, #31
 800628e:	d405      	bmi.n	800629c <_vfiprintf_r+0x2c>
 8006290:	89bb      	ldrh	r3, [r7, #12]
 8006292:	059b      	lsls	r3, r3, #22
 8006294:	d402      	bmi.n	800629c <_vfiprintf_r+0x2c>
 8006296:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006298:	f7ff fec3 	bl	8006022 <__retarget_lock_acquire_recursive>
 800629c:	89bb      	ldrh	r3, [r7, #12]
 800629e:	071b      	lsls	r3, r3, #28
 80062a0:	d502      	bpl.n	80062a8 <_vfiprintf_r+0x38>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d113      	bne.n	80062d0 <_vfiprintf_r+0x60>
 80062a8:	0039      	movs	r1, r7
 80062aa:	9803      	ldr	r0, [sp, #12]
 80062ac:	f000 fb6c 	bl	8006988 <__swsetup_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d00d      	beq.n	80062d0 <_vfiprintf_r+0x60>
 80062b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b6:	07db      	lsls	r3, r3, #31
 80062b8:	d503      	bpl.n	80062c2 <_vfiprintf_r+0x52>
 80062ba:	2001      	movs	r0, #1
 80062bc:	4240      	negs	r0, r0
 80062be:	b021      	add	sp, #132	@ 0x84
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c2:	89bb      	ldrh	r3, [r7, #12]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	d4f8      	bmi.n	80062ba <_vfiprintf_r+0x4a>
 80062c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80062ca:	f7ff feab 	bl	8006024 <__retarget_lock_release_recursive>
 80062ce:	e7f4      	b.n	80062ba <_vfiprintf_r+0x4a>
 80062d0:	2300      	movs	r3, #0
 80062d2:	ac08      	add	r4, sp, #32
 80062d4:	6163      	str	r3, [r4, #20]
 80062d6:	3320      	adds	r3, #32
 80062d8:	7663      	strb	r3, [r4, #25]
 80062da:	3310      	adds	r3, #16
 80062dc:	76a3      	strb	r3, [r4, #26]
 80062de:	9607      	str	r6, [sp, #28]
 80062e0:	002e      	movs	r6, r5
 80062e2:	7833      	ldrb	r3, [r6, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <_vfiprintf_r+0x7c>
 80062e8:	2b25      	cmp	r3, #37	@ 0x25
 80062ea:	d148      	bne.n	800637e <_vfiprintf_r+0x10e>
 80062ec:	1b73      	subs	r3, r6, r5
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	42ae      	cmp	r6, r5
 80062f2:	d00b      	beq.n	800630c <_vfiprintf_r+0x9c>
 80062f4:	002a      	movs	r2, r5
 80062f6:	0039      	movs	r1, r7
 80062f8:	9803      	ldr	r0, [sp, #12]
 80062fa:	f7ff ffa6 	bl	800624a <__sfputs_r>
 80062fe:	3001      	adds	r0, #1
 8006300:	d100      	bne.n	8006304 <_vfiprintf_r+0x94>
 8006302:	e0ae      	b.n	8006462 <_vfiprintf_r+0x1f2>
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	9a05      	ldr	r2, [sp, #20]
 8006308:	189b      	adds	r3, r3, r2
 800630a:	6163      	str	r3, [r4, #20]
 800630c:	7833      	ldrb	r3, [r6, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d100      	bne.n	8006314 <_vfiprintf_r+0xa4>
 8006312:	e0a6      	b.n	8006462 <_vfiprintf_r+0x1f2>
 8006314:	2201      	movs	r2, #1
 8006316:	2300      	movs	r3, #0
 8006318:	4252      	negs	r2, r2
 800631a:	6062      	str	r2, [r4, #4]
 800631c:	a904      	add	r1, sp, #16
 800631e:	3254      	adds	r2, #84	@ 0x54
 8006320:	1852      	adds	r2, r2, r1
 8006322:	1c75      	adds	r5, r6, #1
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	60e3      	str	r3, [r4, #12]
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	7013      	strb	r3, [r2, #0]
 800632c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800632e:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <_vfiprintf_r+0x224>)
 8006330:	2205      	movs	r2, #5
 8006332:	0018      	movs	r0, r3
 8006334:	7829      	ldrb	r1, [r5, #0]
 8006336:	9305      	str	r3, [sp, #20]
 8006338:	f000 fb96 	bl	8006a68 <memchr>
 800633c:	1c6e      	adds	r6, r5, #1
 800633e:	2800      	cmp	r0, #0
 8006340:	d11f      	bne.n	8006382 <_vfiprintf_r+0x112>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	06d3      	lsls	r3, r2, #27
 8006346:	d504      	bpl.n	8006352 <_vfiprintf_r+0xe2>
 8006348:	2353      	movs	r3, #83	@ 0x53
 800634a:	a904      	add	r1, sp, #16
 800634c:	185b      	adds	r3, r3, r1
 800634e:	2120      	movs	r1, #32
 8006350:	7019      	strb	r1, [r3, #0]
 8006352:	0713      	lsls	r3, r2, #28
 8006354:	d504      	bpl.n	8006360 <_vfiprintf_r+0xf0>
 8006356:	2353      	movs	r3, #83	@ 0x53
 8006358:	a904      	add	r1, sp, #16
 800635a:	185b      	adds	r3, r3, r1
 800635c:	212b      	movs	r1, #43	@ 0x2b
 800635e:	7019      	strb	r1, [r3, #0]
 8006360:	782b      	ldrb	r3, [r5, #0]
 8006362:	2b2a      	cmp	r3, #42	@ 0x2a
 8006364:	d016      	beq.n	8006394 <_vfiprintf_r+0x124>
 8006366:	002e      	movs	r6, r5
 8006368:	2100      	movs	r1, #0
 800636a:	200a      	movs	r0, #10
 800636c:	68e3      	ldr	r3, [r4, #12]
 800636e:	7832      	ldrb	r2, [r6, #0]
 8006370:	1c75      	adds	r5, r6, #1
 8006372:	3a30      	subs	r2, #48	@ 0x30
 8006374:	2a09      	cmp	r2, #9
 8006376:	d950      	bls.n	800641a <_vfiprintf_r+0x1aa>
 8006378:	2900      	cmp	r1, #0
 800637a:	d111      	bne.n	80063a0 <_vfiprintf_r+0x130>
 800637c:	e017      	b.n	80063ae <_vfiprintf_r+0x13e>
 800637e:	3601      	adds	r6, #1
 8006380:	e7af      	b.n	80062e2 <_vfiprintf_r+0x72>
 8006382:	9b05      	ldr	r3, [sp, #20]
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	1ac0      	subs	r0, r0, r3
 8006388:	2301      	movs	r3, #1
 800638a:	4083      	lsls	r3, r0
 800638c:	4313      	orrs	r3, r2
 800638e:	0035      	movs	r5, r6
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	e7cc      	b.n	800632e <_vfiprintf_r+0xbe>
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	1d19      	adds	r1, r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	9107      	str	r1, [sp, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db01      	blt.n	80063a4 <_vfiprintf_r+0x134>
 80063a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063a2:	e004      	b.n	80063ae <_vfiprintf_r+0x13e>
 80063a4:	425b      	negs	r3, r3
 80063a6:	60e3      	str	r3, [r4, #12]
 80063a8:	2302      	movs	r3, #2
 80063aa:	4313      	orrs	r3, r2
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	7833      	ldrb	r3, [r6, #0]
 80063b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80063b2:	d10c      	bne.n	80063ce <_vfiprintf_r+0x15e>
 80063b4:	7873      	ldrb	r3, [r6, #1]
 80063b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80063b8:	d134      	bne.n	8006424 <_vfiprintf_r+0x1b4>
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	3602      	adds	r6, #2
 80063be:	1d1a      	adds	r2, r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	da01      	bge.n	80063cc <_vfiprintf_r+0x15c>
 80063c8:	2301      	movs	r3, #1
 80063ca:	425b      	negs	r3, r3
 80063cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ce:	4d32      	ldr	r5, [pc, #200]	@ (8006498 <_vfiprintf_r+0x228>)
 80063d0:	2203      	movs	r2, #3
 80063d2:	0028      	movs	r0, r5
 80063d4:	7831      	ldrb	r1, [r6, #0]
 80063d6:	f000 fb47 	bl	8006a68 <memchr>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d006      	beq.n	80063ec <_vfiprintf_r+0x17c>
 80063de:	2340      	movs	r3, #64	@ 0x40
 80063e0:	1b40      	subs	r0, r0, r5
 80063e2:	4083      	lsls	r3, r0
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	3601      	adds	r6, #1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	7831      	ldrb	r1, [r6, #0]
 80063ee:	2206      	movs	r2, #6
 80063f0:	482a      	ldr	r0, [pc, #168]	@ (800649c <_vfiprintf_r+0x22c>)
 80063f2:	1c75      	adds	r5, r6, #1
 80063f4:	7621      	strb	r1, [r4, #24]
 80063f6:	f000 fb37 	bl	8006a68 <memchr>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d040      	beq.n	8006480 <_vfiprintf_r+0x210>
 80063fe:	4b28      	ldr	r3, [pc, #160]	@ (80064a0 <_vfiprintf_r+0x230>)
 8006400:	2b00      	cmp	r3, #0
 8006402:	d122      	bne.n	800644a <_vfiprintf_r+0x1da>
 8006404:	2207      	movs	r2, #7
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	3307      	adds	r3, #7
 800640a:	4393      	bics	r3, r2
 800640c:	3308      	adds	r3, #8
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	6963      	ldr	r3, [r4, #20]
 8006412:	9a04      	ldr	r2, [sp, #16]
 8006414:	189b      	adds	r3, r3, r2
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	e762      	b.n	80062e0 <_vfiprintf_r+0x70>
 800641a:	4343      	muls	r3, r0
 800641c:	002e      	movs	r6, r5
 800641e:	2101      	movs	r1, #1
 8006420:	189b      	adds	r3, r3, r2
 8006422:	e7a4      	b.n	800636e <_vfiprintf_r+0xfe>
 8006424:	2300      	movs	r3, #0
 8006426:	200a      	movs	r0, #10
 8006428:	0019      	movs	r1, r3
 800642a:	3601      	adds	r6, #1
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	7832      	ldrb	r2, [r6, #0]
 8006430:	1c75      	adds	r5, r6, #1
 8006432:	3a30      	subs	r2, #48	@ 0x30
 8006434:	2a09      	cmp	r2, #9
 8006436:	d903      	bls.n	8006440 <_vfiprintf_r+0x1d0>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0c8      	beq.n	80063ce <_vfiprintf_r+0x15e>
 800643c:	9109      	str	r1, [sp, #36]	@ 0x24
 800643e:	e7c6      	b.n	80063ce <_vfiprintf_r+0x15e>
 8006440:	4341      	muls	r1, r0
 8006442:	002e      	movs	r6, r5
 8006444:	2301      	movs	r3, #1
 8006446:	1889      	adds	r1, r1, r2
 8006448:	e7f1      	b.n	800642e <_vfiprintf_r+0x1be>
 800644a:	aa07      	add	r2, sp, #28
 800644c:	9200      	str	r2, [sp, #0]
 800644e:	0021      	movs	r1, r4
 8006450:	003a      	movs	r2, r7
 8006452:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <_vfiprintf_r+0x234>)
 8006454:	9803      	ldr	r0, [sp, #12]
 8006456:	e000      	b.n	800645a <_vfiprintf_r+0x1ea>
 8006458:	bf00      	nop
 800645a:	9004      	str	r0, [sp, #16]
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	3301      	adds	r3, #1
 8006460:	d1d6      	bne.n	8006410 <_vfiprintf_r+0x1a0>
 8006462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006464:	07db      	lsls	r3, r3, #31
 8006466:	d405      	bmi.n	8006474 <_vfiprintf_r+0x204>
 8006468:	89bb      	ldrh	r3, [r7, #12]
 800646a:	059b      	lsls	r3, r3, #22
 800646c:	d402      	bmi.n	8006474 <_vfiprintf_r+0x204>
 800646e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006470:	f7ff fdd8 	bl	8006024 <__retarget_lock_release_recursive>
 8006474:	89bb      	ldrh	r3, [r7, #12]
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	d500      	bpl.n	800647c <_vfiprintf_r+0x20c>
 800647a:	e71e      	b.n	80062ba <_vfiprintf_r+0x4a>
 800647c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800647e:	e71e      	b.n	80062be <_vfiprintf_r+0x4e>
 8006480:	aa07      	add	r2, sp, #28
 8006482:	9200      	str	r2, [sp, #0]
 8006484:	0021      	movs	r1, r4
 8006486:	003a      	movs	r2, r7
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <_vfiprintf_r+0x234>)
 800648a:	9803      	ldr	r0, [sp, #12]
 800648c:	f000 f87c 	bl	8006588 <_printf_i>
 8006490:	e7e3      	b.n	800645a <_vfiprintf_r+0x1ea>
 8006492:	46c0      	nop			@ (mov r8, r8)
 8006494:	08006cc8 	.word	0x08006cc8
 8006498:	08006cce 	.word	0x08006cce
 800649c:	08006cd2 	.word	0x08006cd2
 80064a0:	00000000 	.word	0x00000000
 80064a4:	0800624b 	.word	0x0800624b

080064a8 <_printf_common>:
 80064a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064aa:	0016      	movs	r6, r2
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	688a      	ldr	r2, [r1, #8]
 80064b0:	690b      	ldr	r3, [r1, #16]
 80064b2:	000c      	movs	r4, r1
 80064b4:	9000      	str	r0, [sp, #0]
 80064b6:	4293      	cmp	r3, r2
 80064b8:	da00      	bge.n	80064bc <_printf_common+0x14>
 80064ba:	0013      	movs	r3, r2
 80064bc:	0022      	movs	r2, r4
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	3243      	adds	r2, #67	@ 0x43
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d001      	beq.n	80064cc <_printf_common+0x24>
 80064c8:	3301      	adds	r3, #1
 80064ca:	6033      	str	r3, [r6, #0]
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	069b      	lsls	r3, r3, #26
 80064d0:	d502      	bpl.n	80064d8 <_printf_common+0x30>
 80064d2:	6833      	ldr	r3, [r6, #0]
 80064d4:	3302      	adds	r3, #2
 80064d6:	6033      	str	r3, [r6, #0]
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	2306      	movs	r3, #6
 80064dc:	0015      	movs	r5, r2
 80064de:	401d      	ands	r5, r3
 80064e0:	421a      	tst	r2, r3
 80064e2:	d027      	beq.n	8006534 <_printf_common+0x8c>
 80064e4:	0023      	movs	r3, r4
 80064e6:	3343      	adds	r3, #67	@ 0x43
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	4193      	sbcs	r3, r2
 80064ee:	6822      	ldr	r2, [r4, #0]
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d430      	bmi.n	8006556 <_printf_common+0xae>
 80064f4:	0022      	movs	r2, r4
 80064f6:	9901      	ldr	r1, [sp, #4]
 80064f8:	9800      	ldr	r0, [sp, #0]
 80064fa:	9d08      	ldr	r5, [sp, #32]
 80064fc:	3243      	adds	r2, #67	@ 0x43
 80064fe:	47a8      	blx	r5
 8006500:	3001      	adds	r0, #1
 8006502:	d025      	beq.n	8006550 <_printf_common+0xa8>
 8006504:	2206      	movs	r2, #6
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	2500      	movs	r5, #0
 800650a:	4013      	ands	r3, r2
 800650c:	2b04      	cmp	r3, #4
 800650e:	d105      	bne.n	800651c <_printf_common+0x74>
 8006510:	6833      	ldr	r3, [r6, #0]
 8006512:	68e5      	ldr	r5, [r4, #12]
 8006514:	1aed      	subs	r5, r5, r3
 8006516:	43eb      	mvns	r3, r5
 8006518:	17db      	asrs	r3, r3, #31
 800651a:	401d      	ands	r5, r3
 800651c:	68a3      	ldr	r3, [r4, #8]
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	4293      	cmp	r3, r2
 8006522:	dd01      	ble.n	8006528 <_printf_common+0x80>
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	18ed      	adds	r5, r5, r3
 8006528:	2600      	movs	r6, #0
 800652a:	42b5      	cmp	r5, r6
 800652c:	d120      	bne.n	8006570 <_printf_common+0xc8>
 800652e:	2000      	movs	r0, #0
 8006530:	e010      	b.n	8006554 <_printf_common+0xac>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	6832      	ldr	r2, [r6, #0]
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	42ab      	cmp	r3, r5
 800653c:	ddd2      	ble.n	80064e4 <_printf_common+0x3c>
 800653e:	0022      	movs	r2, r4
 8006540:	2301      	movs	r3, #1
 8006542:	9901      	ldr	r1, [sp, #4]
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	9f08      	ldr	r7, [sp, #32]
 8006548:	3219      	adds	r2, #25
 800654a:	47b8      	blx	r7
 800654c:	3001      	adds	r0, #1
 800654e:	d1f0      	bne.n	8006532 <_printf_common+0x8a>
 8006550:	2001      	movs	r0, #1
 8006552:	4240      	negs	r0, r0
 8006554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006556:	2030      	movs	r0, #48	@ 0x30
 8006558:	18e1      	adds	r1, r4, r3
 800655a:	3143      	adds	r1, #67	@ 0x43
 800655c:	7008      	strb	r0, [r1, #0]
 800655e:	0021      	movs	r1, r4
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	3145      	adds	r1, #69	@ 0x45
 8006564:	7809      	ldrb	r1, [r1, #0]
 8006566:	18a2      	adds	r2, r4, r2
 8006568:	3243      	adds	r2, #67	@ 0x43
 800656a:	3302      	adds	r3, #2
 800656c:	7011      	strb	r1, [r2, #0]
 800656e:	e7c1      	b.n	80064f4 <_printf_common+0x4c>
 8006570:	0022      	movs	r2, r4
 8006572:	2301      	movs	r3, #1
 8006574:	9901      	ldr	r1, [sp, #4]
 8006576:	9800      	ldr	r0, [sp, #0]
 8006578:	9f08      	ldr	r7, [sp, #32]
 800657a:	321a      	adds	r2, #26
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	d0e6      	beq.n	8006550 <_printf_common+0xa8>
 8006582:	3601      	adds	r6, #1
 8006584:	e7d1      	b.n	800652a <_printf_common+0x82>
	...

08006588 <_printf_i>:
 8006588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658a:	b08b      	sub	sp, #44	@ 0x2c
 800658c:	9206      	str	r2, [sp, #24]
 800658e:	000a      	movs	r2, r1
 8006590:	3243      	adds	r2, #67	@ 0x43
 8006592:	9307      	str	r3, [sp, #28]
 8006594:	9005      	str	r0, [sp, #20]
 8006596:	9203      	str	r2, [sp, #12]
 8006598:	7e0a      	ldrb	r2, [r1, #24]
 800659a:	000c      	movs	r4, r1
 800659c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800659e:	2a78      	cmp	r2, #120	@ 0x78
 80065a0:	d809      	bhi.n	80065b6 <_printf_i+0x2e>
 80065a2:	2a62      	cmp	r2, #98	@ 0x62
 80065a4:	d80b      	bhi.n	80065be <_printf_i+0x36>
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	d100      	bne.n	80065ac <_printf_i+0x24>
 80065aa:	e0ba      	b.n	8006722 <_printf_i+0x19a>
 80065ac:	497a      	ldr	r1, [pc, #488]	@ (8006798 <_printf_i+0x210>)
 80065ae:	9104      	str	r1, [sp, #16]
 80065b0:	2a58      	cmp	r2, #88	@ 0x58
 80065b2:	d100      	bne.n	80065b6 <_printf_i+0x2e>
 80065b4:	e08e      	b.n	80066d4 <_printf_i+0x14c>
 80065b6:	0025      	movs	r5, r4
 80065b8:	3542      	adds	r5, #66	@ 0x42
 80065ba:	702a      	strb	r2, [r5, #0]
 80065bc:	e022      	b.n	8006604 <_printf_i+0x7c>
 80065be:	0010      	movs	r0, r2
 80065c0:	3863      	subs	r0, #99	@ 0x63
 80065c2:	2815      	cmp	r0, #21
 80065c4:	d8f7      	bhi.n	80065b6 <_printf_i+0x2e>
 80065c6:	f7f9 fd9d 	bl	8000104 <__gnu_thumb1_case_shi>
 80065ca:	0016      	.short	0x0016
 80065cc:	fff6001f 	.word	0xfff6001f
 80065d0:	fff6fff6 	.word	0xfff6fff6
 80065d4:	001ffff6 	.word	0x001ffff6
 80065d8:	fff6fff6 	.word	0xfff6fff6
 80065dc:	fff6fff6 	.word	0xfff6fff6
 80065e0:	0036009f 	.word	0x0036009f
 80065e4:	fff6007e 	.word	0xfff6007e
 80065e8:	00b0fff6 	.word	0x00b0fff6
 80065ec:	0036fff6 	.word	0x0036fff6
 80065f0:	fff6fff6 	.word	0xfff6fff6
 80065f4:	0082      	.short	0x0082
 80065f6:	0025      	movs	r5, r4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	3542      	adds	r5, #66	@ 0x42
 80065fc:	1d11      	adds	r1, r2, #4
 80065fe:	6019      	str	r1, [r3, #0]
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	702b      	strb	r3, [r5, #0]
 8006604:	2301      	movs	r3, #1
 8006606:	e09e      	b.n	8006746 <_printf_i+0x1be>
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	6809      	ldr	r1, [r1, #0]
 800660c:	1d02      	adds	r2, r0, #4
 800660e:	060d      	lsls	r5, r1, #24
 8006610:	d50b      	bpl.n	800662a <_printf_i+0xa2>
 8006612:	6806      	ldr	r6, [r0, #0]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	2e00      	cmp	r6, #0
 8006618:	da03      	bge.n	8006622 <_printf_i+0x9a>
 800661a:	232d      	movs	r3, #45	@ 0x2d
 800661c:	9a03      	ldr	r2, [sp, #12]
 800661e:	4276      	negs	r6, r6
 8006620:	7013      	strb	r3, [r2, #0]
 8006622:	4b5d      	ldr	r3, [pc, #372]	@ (8006798 <_printf_i+0x210>)
 8006624:	270a      	movs	r7, #10
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	e018      	b.n	800665c <_printf_i+0xd4>
 800662a:	6806      	ldr	r6, [r0, #0]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	0649      	lsls	r1, r1, #25
 8006630:	d5f1      	bpl.n	8006616 <_printf_i+0x8e>
 8006632:	b236      	sxth	r6, r6
 8006634:	e7ef      	b.n	8006616 <_printf_i+0x8e>
 8006636:	6808      	ldr	r0, [r1, #0]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	c940      	ldmia	r1!, {r6}
 800663c:	0605      	lsls	r5, r0, #24
 800663e:	d402      	bmi.n	8006646 <_printf_i+0xbe>
 8006640:	0640      	lsls	r0, r0, #25
 8006642:	d500      	bpl.n	8006646 <_printf_i+0xbe>
 8006644:	b2b6      	uxth	r6, r6
 8006646:	6019      	str	r1, [r3, #0]
 8006648:	4b53      	ldr	r3, [pc, #332]	@ (8006798 <_printf_i+0x210>)
 800664a:	270a      	movs	r7, #10
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006650:	d100      	bne.n	8006654 <_printf_i+0xcc>
 8006652:	3f02      	subs	r7, #2
 8006654:	0023      	movs	r3, r4
 8006656:	2200      	movs	r2, #0
 8006658:	3343      	adds	r3, #67	@ 0x43
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	db06      	blt.n	8006672 <_printf_i+0xea>
 8006664:	2104      	movs	r1, #4
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	9d03      	ldr	r5, [sp, #12]
 800666a:	438a      	bics	r2, r1
 800666c:	6022      	str	r2, [r4, #0]
 800666e:	4333      	orrs	r3, r6
 8006670:	d00c      	beq.n	800668c <_printf_i+0x104>
 8006672:	9d03      	ldr	r5, [sp, #12]
 8006674:	0030      	movs	r0, r6
 8006676:	0039      	movs	r1, r7
 8006678:	f7f9 fdd4 	bl	8000224 <__aeabi_uidivmod>
 800667c:	9b04      	ldr	r3, [sp, #16]
 800667e:	3d01      	subs	r5, #1
 8006680:	5c5b      	ldrb	r3, [r3, r1]
 8006682:	702b      	strb	r3, [r5, #0]
 8006684:	0033      	movs	r3, r6
 8006686:	0006      	movs	r6, r0
 8006688:	429f      	cmp	r7, r3
 800668a:	d9f3      	bls.n	8006674 <_printf_i+0xec>
 800668c:	2f08      	cmp	r7, #8
 800668e:	d109      	bne.n	80066a4 <_printf_i+0x11c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	07db      	lsls	r3, r3, #31
 8006694:	d506      	bpl.n	80066a4 <_printf_i+0x11c>
 8006696:	6862      	ldr	r2, [r4, #4]
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	dc02      	bgt.n	80066a4 <_printf_i+0x11c>
 800669e:	2330      	movs	r3, #48	@ 0x30
 80066a0:	3d01      	subs	r5, #1
 80066a2:	702b      	strb	r3, [r5, #0]
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	1b5b      	subs	r3, r3, r5
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	0021      	movs	r1, r4
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	9805      	ldr	r0, [sp, #20]
 80066b2:	9b06      	ldr	r3, [sp, #24]
 80066b4:	aa09      	add	r2, sp, #36	@ 0x24
 80066b6:	f7ff fef7 	bl	80064a8 <_printf_common>
 80066ba:	3001      	adds	r0, #1
 80066bc:	d148      	bne.n	8006750 <_printf_i+0x1c8>
 80066be:	2001      	movs	r0, #1
 80066c0:	4240      	negs	r0, r0
 80066c2:	b00b      	add	sp, #44	@ 0x2c
 80066c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c6:	2220      	movs	r2, #32
 80066c8:	6809      	ldr	r1, [r1, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	6022      	str	r2, [r4, #0]
 80066ce:	2278      	movs	r2, #120	@ 0x78
 80066d0:	4932      	ldr	r1, [pc, #200]	@ (800679c <_printf_i+0x214>)
 80066d2:	9104      	str	r1, [sp, #16]
 80066d4:	0021      	movs	r1, r4
 80066d6:	3145      	adds	r1, #69	@ 0x45
 80066d8:	700a      	strb	r2, [r1, #0]
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	c940      	ldmia	r1!, {r6}
 80066e0:	0610      	lsls	r0, r2, #24
 80066e2:	d402      	bmi.n	80066ea <_printf_i+0x162>
 80066e4:	0650      	lsls	r0, r2, #25
 80066e6:	d500      	bpl.n	80066ea <_printf_i+0x162>
 80066e8:	b2b6      	uxth	r6, r6
 80066ea:	6019      	str	r1, [r3, #0]
 80066ec:	07d3      	lsls	r3, r2, #31
 80066ee:	d502      	bpl.n	80066f6 <_printf_i+0x16e>
 80066f0:	2320      	movs	r3, #32
 80066f2:	4313      	orrs	r3, r2
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	2e00      	cmp	r6, #0
 80066f8:	d001      	beq.n	80066fe <_printf_i+0x176>
 80066fa:	2710      	movs	r7, #16
 80066fc:	e7aa      	b.n	8006654 <_printf_i+0xcc>
 80066fe:	2220      	movs	r2, #32
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	4393      	bics	r3, r2
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	e7f8      	b.n	80066fa <_printf_i+0x172>
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	680d      	ldr	r5, [r1, #0]
 800670c:	1d10      	adds	r0, r2, #4
 800670e:	6949      	ldr	r1, [r1, #20]
 8006710:	6018      	str	r0, [r3, #0]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	062e      	lsls	r6, r5, #24
 8006716:	d501      	bpl.n	800671c <_printf_i+0x194>
 8006718:	6019      	str	r1, [r3, #0]
 800671a:	e002      	b.n	8006722 <_printf_i+0x19a>
 800671c:	066d      	lsls	r5, r5, #25
 800671e:	d5fb      	bpl.n	8006718 <_printf_i+0x190>
 8006720:	8019      	strh	r1, [r3, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	9d03      	ldr	r5, [sp, #12]
 8006726:	6123      	str	r3, [r4, #16]
 8006728:	e7bf      	b.n	80066aa <_printf_i+0x122>
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	1d11      	adds	r1, r2, #4
 800672e:	6019      	str	r1, [r3, #0]
 8006730:	6815      	ldr	r5, [r2, #0]
 8006732:	2100      	movs	r1, #0
 8006734:	0028      	movs	r0, r5
 8006736:	6862      	ldr	r2, [r4, #4]
 8006738:	f000 f996 	bl	8006a68 <memchr>
 800673c:	2800      	cmp	r0, #0
 800673e:	d001      	beq.n	8006744 <_printf_i+0x1bc>
 8006740:	1b40      	subs	r0, r0, r5
 8006742:	6060      	str	r0, [r4, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	2300      	movs	r3, #0
 800674a:	9a03      	ldr	r2, [sp, #12]
 800674c:	7013      	strb	r3, [r2, #0]
 800674e:	e7ac      	b.n	80066aa <_printf_i+0x122>
 8006750:	002a      	movs	r2, r5
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	9906      	ldr	r1, [sp, #24]
 8006756:	9805      	ldr	r0, [sp, #20]
 8006758:	9d07      	ldr	r5, [sp, #28]
 800675a:	47a8      	blx	r5
 800675c:	3001      	adds	r0, #1
 800675e:	d0ae      	beq.n	80066be <_printf_i+0x136>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	079b      	lsls	r3, r3, #30
 8006764:	d415      	bmi.n	8006792 <_printf_i+0x20a>
 8006766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006768:	68e0      	ldr	r0, [r4, #12]
 800676a:	4298      	cmp	r0, r3
 800676c:	daa9      	bge.n	80066c2 <_printf_i+0x13a>
 800676e:	0018      	movs	r0, r3
 8006770:	e7a7      	b.n	80066c2 <_printf_i+0x13a>
 8006772:	0022      	movs	r2, r4
 8006774:	2301      	movs	r3, #1
 8006776:	9906      	ldr	r1, [sp, #24]
 8006778:	9805      	ldr	r0, [sp, #20]
 800677a:	9e07      	ldr	r6, [sp, #28]
 800677c:	3219      	adds	r2, #25
 800677e:	47b0      	blx	r6
 8006780:	3001      	adds	r0, #1
 8006782:	d09c      	beq.n	80066be <_printf_i+0x136>
 8006784:	3501      	adds	r5, #1
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	42ab      	cmp	r3, r5
 800678e:	dcf0      	bgt.n	8006772 <_printf_i+0x1ea>
 8006790:	e7e9      	b.n	8006766 <_printf_i+0x1de>
 8006792:	2500      	movs	r5, #0
 8006794:	e7f7      	b.n	8006786 <_printf_i+0x1fe>
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	08006cd9 	.word	0x08006cd9
 800679c:	08006cea 	.word	0x08006cea

080067a0 <__sflush_r>:
 80067a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a2:	220c      	movs	r2, #12
 80067a4:	5e8b      	ldrsh	r3, [r1, r2]
 80067a6:	0005      	movs	r5, r0
 80067a8:	000c      	movs	r4, r1
 80067aa:	071a      	lsls	r2, r3, #28
 80067ac:	d456      	bmi.n	800685c <__sflush_r+0xbc>
 80067ae:	684a      	ldr	r2, [r1, #4]
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	dc02      	bgt.n	80067ba <__sflush_r+0x1a>
 80067b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80067b6:	2a00      	cmp	r2, #0
 80067b8:	dd4e      	ble.n	8006858 <__sflush_r+0xb8>
 80067ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d04b      	beq.n	8006858 <__sflush_r+0xb8>
 80067c0:	2200      	movs	r2, #0
 80067c2:	2080      	movs	r0, #128	@ 0x80
 80067c4:	682e      	ldr	r6, [r5, #0]
 80067c6:	602a      	str	r2, [r5, #0]
 80067c8:	001a      	movs	r2, r3
 80067ca:	0140      	lsls	r0, r0, #5
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	4002      	ands	r2, r0
 80067d0:	4203      	tst	r3, r0
 80067d2:	d033      	beq.n	800683c <__sflush_r+0x9c>
 80067d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	075b      	lsls	r3, r3, #29
 80067da:	d506      	bpl.n	80067ea <__sflush_r+0x4a>
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <__sflush_r+0x4a>
 80067e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067e8:	1ad2      	subs	r2, r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	0028      	movs	r0, r5
 80067ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80067f0:	6a21      	ldr	r1, [r4, #32]
 80067f2:	47b8      	blx	r7
 80067f4:	89a2      	ldrh	r2, [r4, #12]
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d106      	bne.n	8006808 <__sflush_r+0x68>
 80067fa:	6829      	ldr	r1, [r5, #0]
 80067fc:	291d      	cmp	r1, #29
 80067fe:	d846      	bhi.n	800688e <__sflush_r+0xee>
 8006800:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <__sflush_r+0x108>)
 8006802:	40cb      	lsrs	r3, r1
 8006804:	07db      	lsls	r3, r3, #31
 8006806:	d542      	bpl.n	800688e <__sflush_r+0xee>
 8006808:	2300      	movs	r3, #0
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	04d2      	lsls	r2, r2, #19
 8006812:	d505      	bpl.n	8006820 <__sflush_r+0x80>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <__sflush_r+0x7e>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d100      	bne.n	8006820 <__sflush_r+0x80>
 800681e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006822:	602e      	str	r6, [r5, #0]
 8006824:	2900      	cmp	r1, #0
 8006826:	d017      	beq.n	8006858 <__sflush_r+0xb8>
 8006828:	0023      	movs	r3, r4
 800682a:	3344      	adds	r3, #68	@ 0x44
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <__sflush_r+0x96>
 8006830:	0028      	movs	r0, r5
 8006832:	f7ff fbf9 	bl	8006028 <_free_r>
 8006836:	2300      	movs	r3, #0
 8006838:	6363      	str	r3, [r4, #52]	@ 0x34
 800683a:	e00d      	b.n	8006858 <__sflush_r+0xb8>
 800683c:	2301      	movs	r3, #1
 800683e:	0028      	movs	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	0002      	movs	r2, r0
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d1c6      	bne.n	80067d6 <__sflush_r+0x36>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0c3      	beq.n	80067d6 <__sflush_r+0x36>
 800684e:	2b1d      	cmp	r3, #29
 8006850:	d001      	beq.n	8006856 <__sflush_r+0xb6>
 8006852:	2b16      	cmp	r3, #22
 8006854:	d11a      	bne.n	800688c <__sflush_r+0xec>
 8006856:	602e      	str	r6, [r5, #0]
 8006858:	2000      	movs	r0, #0
 800685a:	e01e      	b.n	800689a <__sflush_r+0xfa>
 800685c:	690e      	ldr	r6, [r1, #16]
 800685e:	2e00      	cmp	r6, #0
 8006860:	d0fa      	beq.n	8006858 <__sflush_r+0xb8>
 8006862:	680f      	ldr	r7, [r1, #0]
 8006864:	600e      	str	r6, [r1, #0]
 8006866:	1bba      	subs	r2, r7, r6
 8006868:	9201      	str	r2, [sp, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	079b      	lsls	r3, r3, #30
 800686e:	d100      	bne.n	8006872 <__sflush_r+0xd2>
 8006870:	694a      	ldr	r2, [r1, #20]
 8006872:	60a2      	str	r2, [r4, #8]
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	ddee      	ble.n	8006858 <__sflush_r+0xb8>
 800687a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800687c:	0032      	movs	r2, r6
 800687e:	001f      	movs	r7, r3
 8006880:	0028      	movs	r0, r5
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	47b8      	blx	r7
 8006888:	2800      	cmp	r0, #0
 800688a:	dc07      	bgt.n	800689c <__sflush_r+0xfc>
 800688c:	89a2      	ldrh	r2, [r4, #12]
 800688e:	2340      	movs	r3, #64	@ 0x40
 8006890:	2001      	movs	r0, #1
 8006892:	4313      	orrs	r3, r2
 8006894:	b21b      	sxth	r3, r3
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	4240      	negs	r0, r0
 800689a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800689c:	9b01      	ldr	r3, [sp, #4]
 800689e:	1836      	adds	r6, r6, r0
 80068a0:	1a1b      	subs	r3, r3, r0
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	e7e6      	b.n	8006874 <__sflush_r+0xd4>
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	20400001 	.word	0x20400001

080068ac <_fflush_r>:
 80068ac:	690b      	ldr	r3, [r1, #16]
 80068ae:	b570      	push	{r4, r5, r6, lr}
 80068b0:	0005      	movs	r5, r0
 80068b2:	000c      	movs	r4, r1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <_fflush_r+0x12>
 80068b8:	2500      	movs	r5, #0
 80068ba:	0028      	movs	r0, r5
 80068bc:	bd70      	pop	{r4, r5, r6, pc}
 80068be:	2800      	cmp	r0, #0
 80068c0:	d004      	beq.n	80068cc <_fflush_r+0x20>
 80068c2:	6a03      	ldr	r3, [r0, #32]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <_fflush_r+0x20>
 80068c8:	f7ff fa9a 	bl	8005e00 <__sinit>
 80068cc:	220c      	movs	r2, #12
 80068ce:	5ea3      	ldrsh	r3, [r4, r2]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0f1      	beq.n	80068b8 <_fflush_r+0xc>
 80068d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068d6:	07d2      	lsls	r2, r2, #31
 80068d8:	d404      	bmi.n	80068e4 <_fflush_r+0x38>
 80068da:	059b      	lsls	r3, r3, #22
 80068dc:	d402      	bmi.n	80068e4 <_fflush_r+0x38>
 80068de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068e0:	f7ff fb9f 	bl	8006022 <__retarget_lock_acquire_recursive>
 80068e4:	0028      	movs	r0, r5
 80068e6:	0021      	movs	r1, r4
 80068e8:	f7ff ff5a 	bl	80067a0 <__sflush_r>
 80068ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068ee:	0005      	movs	r5, r0
 80068f0:	07db      	lsls	r3, r3, #31
 80068f2:	d4e2      	bmi.n	80068ba <_fflush_r+0xe>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	059b      	lsls	r3, r3, #22
 80068f8:	d4df      	bmi.n	80068ba <_fflush_r+0xe>
 80068fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068fc:	f7ff fb92 	bl	8006024 <__retarget_lock_release_recursive>
 8006900:	e7db      	b.n	80068ba <_fflush_r+0xe>

08006902 <__swbuf_r>:
 8006902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006904:	0006      	movs	r6, r0
 8006906:	000d      	movs	r5, r1
 8006908:	0014      	movs	r4, r2
 800690a:	2800      	cmp	r0, #0
 800690c:	d004      	beq.n	8006918 <__swbuf_r+0x16>
 800690e:	6a03      	ldr	r3, [r0, #32]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <__swbuf_r+0x16>
 8006914:	f7ff fa74 	bl	8005e00 <__sinit>
 8006918:	69a3      	ldr	r3, [r4, #24]
 800691a:	60a3      	str	r3, [r4, #8]
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	071b      	lsls	r3, r3, #28
 8006920:	d502      	bpl.n	8006928 <__swbuf_r+0x26>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <__swbuf_r+0x3a>
 8006928:	0021      	movs	r1, r4
 800692a:	0030      	movs	r0, r6
 800692c:	f000 f82c 	bl	8006988 <__swsetup_r>
 8006930:	2800      	cmp	r0, #0
 8006932:	d003      	beq.n	800693c <__swbuf_r+0x3a>
 8006934:	2501      	movs	r5, #1
 8006936:	426d      	negs	r5, r5
 8006938:	0028      	movs	r0, r5
 800693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	6820      	ldr	r0, [r4, #0]
 8006940:	b2ef      	uxtb	r7, r5
 8006942:	1ac0      	subs	r0, r0, r3
 8006944:	6963      	ldr	r3, [r4, #20]
 8006946:	b2ed      	uxtb	r5, r5
 8006948:	4283      	cmp	r3, r0
 800694a:	dc05      	bgt.n	8006958 <__swbuf_r+0x56>
 800694c:	0021      	movs	r1, r4
 800694e:	0030      	movs	r0, r6
 8006950:	f7ff ffac 	bl	80068ac <_fflush_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	d1ed      	bne.n	8006934 <__swbuf_r+0x32>
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	3001      	adds	r0, #1
 800695c:	3b01      	subs	r3, #1
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	6022      	str	r2, [r4, #0]
 8006966:	701f      	strb	r7, [r3, #0]
 8006968:	6963      	ldr	r3, [r4, #20]
 800696a:	4283      	cmp	r3, r0
 800696c:	d004      	beq.n	8006978 <__swbuf_r+0x76>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	07db      	lsls	r3, r3, #31
 8006972:	d5e1      	bpl.n	8006938 <__swbuf_r+0x36>
 8006974:	2d0a      	cmp	r5, #10
 8006976:	d1df      	bne.n	8006938 <__swbuf_r+0x36>
 8006978:	0021      	movs	r1, r4
 800697a:	0030      	movs	r0, r6
 800697c:	f7ff ff96 	bl	80068ac <_fflush_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	d0d9      	beq.n	8006938 <__swbuf_r+0x36>
 8006984:	e7d6      	b.n	8006934 <__swbuf_r+0x32>
	...

08006988 <__swsetup_r>:
 8006988:	4b2d      	ldr	r3, [pc, #180]	@ (8006a40 <__swsetup_r+0xb8>)
 800698a:	b570      	push	{r4, r5, r6, lr}
 800698c:	0005      	movs	r5, r0
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	000c      	movs	r4, r1
 8006992:	2800      	cmp	r0, #0
 8006994:	d004      	beq.n	80069a0 <__swsetup_r+0x18>
 8006996:	6a03      	ldr	r3, [r0, #32]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <__swsetup_r+0x18>
 800699c:	f7ff fa30 	bl	8005e00 <__sinit>
 80069a0:	220c      	movs	r2, #12
 80069a2:	5ea3      	ldrsh	r3, [r4, r2]
 80069a4:	071a      	lsls	r2, r3, #28
 80069a6:	d423      	bmi.n	80069f0 <__swsetup_r+0x68>
 80069a8:	06da      	lsls	r2, r3, #27
 80069aa:	d407      	bmi.n	80069bc <__swsetup_r+0x34>
 80069ac:	2209      	movs	r2, #9
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	2240      	movs	r2, #64	@ 0x40
 80069b2:	2001      	movs	r0, #1
 80069b4:	4313      	orrs	r3, r2
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	4240      	negs	r0, r0
 80069ba:	e03a      	b.n	8006a32 <__swsetup_r+0xaa>
 80069bc:	075b      	lsls	r3, r3, #29
 80069be:	d513      	bpl.n	80069e8 <__swsetup_r+0x60>
 80069c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d008      	beq.n	80069d8 <__swsetup_r+0x50>
 80069c6:	0023      	movs	r3, r4
 80069c8:	3344      	adds	r3, #68	@ 0x44
 80069ca:	4299      	cmp	r1, r3
 80069cc:	d002      	beq.n	80069d4 <__swsetup_r+0x4c>
 80069ce:	0028      	movs	r0, r5
 80069d0:	f7ff fb2a 	bl	8006028 <_free_r>
 80069d4:	2300      	movs	r3, #0
 80069d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80069d8:	2224      	movs	r2, #36	@ 0x24
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	4393      	bics	r3, r2
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	2300      	movs	r3, #0
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	2308      	movs	r3, #8
 80069ea:	89a2      	ldrh	r2, [r4, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <__swsetup_r+0x86>
 80069f6:	21a0      	movs	r1, #160	@ 0xa0
 80069f8:	2280      	movs	r2, #128	@ 0x80
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	0089      	lsls	r1, r1, #2
 80069fe:	0092      	lsls	r2, r2, #2
 8006a00:	400b      	ands	r3, r1
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d003      	beq.n	8006a0e <__swsetup_r+0x86>
 8006a06:	0021      	movs	r1, r4
 8006a08:	0028      	movs	r0, r5
 8006a0a:	f000 f863 	bl	8006ad4 <__smakebuf_r>
 8006a0e:	220c      	movs	r2, #12
 8006a10:	5ea3      	ldrsh	r3, [r4, r2]
 8006a12:	2101      	movs	r1, #1
 8006a14:	001a      	movs	r2, r3
 8006a16:	400a      	ands	r2, r1
 8006a18:	420b      	tst	r3, r1
 8006a1a:	d00b      	beq.n	8006a34 <__swsetup_r+0xac>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60a2      	str	r2, [r4, #8]
 8006a20:	6962      	ldr	r2, [r4, #20]
 8006a22:	4252      	negs	r2, r2
 8006a24:	61a2      	str	r2, [r4, #24]
 8006a26:	2000      	movs	r0, #0
 8006a28:	6922      	ldr	r2, [r4, #16]
 8006a2a:	4282      	cmp	r2, r0
 8006a2c:	d101      	bne.n	8006a32 <__swsetup_r+0xaa>
 8006a2e:	061a      	lsls	r2, r3, #24
 8006a30:	d4be      	bmi.n	80069b0 <__swsetup_r+0x28>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	0799      	lsls	r1, r3, #30
 8006a36:	d400      	bmi.n	8006a3a <__swsetup_r+0xb2>
 8006a38:	6962      	ldr	r2, [r4, #20]
 8006a3a:	60a2      	str	r2, [r4, #8]
 8006a3c:	e7f3      	b.n	8006a26 <__swsetup_r+0x9e>
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	20000018 	.word	0x20000018

08006a44 <_sbrk_r>:
 8006a44:	2300      	movs	r3, #0
 8006a46:	b570      	push	{r4, r5, r6, lr}
 8006a48:	4d06      	ldr	r5, [pc, #24]	@ (8006a64 <_sbrk_r+0x20>)
 8006a4a:	0004      	movs	r4, r0
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fa f930 	bl	8000cb4 <_sbrk>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d103      	bne.n	8006a60 <_sbrk_r+0x1c>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d000      	beq.n	8006a60 <_sbrk_r+0x1c>
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	20000370 	.word	0x20000370

08006a68 <memchr>:
 8006a68:	b2c9      	uxtb	r1, r1
 8006a6a:	1882      	adds	r2, r0, r2
 8006a6c:	4290      	cmp	r0, r2
 8006a6e:	d101      	bne.n	8006a74 <memchr+0xc>
 8006a70:	2000      	movs	r0, #0
 8006a72:	4770      	bx	lr
 8006a74:	7803      	ldrb	r3, [r0, #0]
 8006a76:	428b      	cmp	r3, r1
 8006a78:	d0fb      	beq.n	8006a72 <memchr+0xa>
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	e7f6      	b.n	8006a6c <memchr+0x4>
	...

08006a80 <__swhatbuf_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	000e      	movs	r6, r1
 8006a84:	001d      	movs	r5, r3
 8006a86:	230e      	movs	r3, #14
 8006a88:	5ec9      	ldrsh	r1, [r1, r3]
 8006a8a:	0014      	movs	r4, r2
 8006a8c:	b096      	sub	sp, #88	@ 0x58
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	da0c      	bge.n	8006aac <__swhatbuf_r+0x2c>
 8006a92:	89b2      	ldrh	r2, [r6, #12]
 8006a94:	2380      	movs	r3, #128	@ 0x80
 8006a96:	0011      	movs	r1, r2
 8006a98:	4019      	ands	r1, r3
 8006a9a:	421a      	tst	r2, r3
 8006a9c:	d114      	bne.n	8006ac8 <__swhatbuf_r+0x48>
 8006a9e:	2380      	movs	r3, #128	@ 0x80
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	6029      	str	r1, [r5, #0]
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	b016      	add	sp, #88	@ 0x58
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	466a      	mov	r2, sp
 8006aae:	f000 f853 	bl	8006b58 <_fstat_r>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	dbed      	blt.n	8006a92 <__swhatbuf_r+0x12>
 8006ab6:	23f0      	movs	r3, #240	@ 0xf0
 8006ab8:	9901      	ldr	r1, [sp, #4]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	4019      	ands	r1, r3
 8006abe:	4b04      	ldr	r3, [pc, #16]	@ (8006ad0 <__swhatbuf_r+0x50>)
 8006ac0:	18c9      	adds	r1, r1, r3
 8006ac2:	424b      	negs	r3, r1
 8006ac4:	4159      	adcs	r1, r3
 8006ac6:	e7ea      	b.n	8006a9e <__swhatbuf_r+0x1e>
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2340      	movs	r3, #64	@ 0x40
 8006acc:	e7e9      	b.n	8006aa2 <__swhatbuf_r+0x22>
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	ffffe000 	.word	0xffffe000

08006ad4 <__smakebuf_r>:
 8006ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad6:	2602      	movs	r6, #2
 8006ad8:	898b      	ldrh	r3, [r1, #12]
 8006ada:	0005      	movs	r5, r0
 8006adc:	000c      	movs	r4, r1
 8006ade:	b085      	sub	sp, #20
 8006ae0:	4233      	tst	r3, r6
 8006ae2:	d007      	beq.n	8006af4 <__smakebuf_r+0x20>
 8006ae4:	0023      	movs	r3, r4
 8006ae6:	3347      	adds	r3, #71	@ 0x47
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	2301      	movs	r3, #1
 8006aee:	6163      	str	r3, [r4, #20]
 8006af0:	b005      	add	sp, #20
 8006af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af4:	ab03      	add	r3, sp, #12
 8006af6:	aa02      	add	r2, sp, #8
 8006af8:	f7ff ffc2 	bl	8006a80 <__swhatbuf_r>
 8006afc:	9f02      	ldr	r7, [sp, #8]
 8006afe:	9001      	str	r0, [sp, #4]
 8006b00:	0039      	movs	r1, r7
 8006b02:	0028      	movs	r0, r5
 8006b04:	f7ff fafc 	bl	8006100 <_malloc_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d108      	bne.n	8006b1e <__smakebuf_r+0x4a>
 8006b0c:	220c      	movs	r2, #12
 8006b0e:	5ea3      	ldrsh	r3, [r4, r2]
 8006b10:	059a      	lsls	r2, r3, #22
 8006b12:	d4ed      	bmi.n	8006af0 <__smakebuf_r+0x1c>
 8006b14:	2203      	movs	r2, #3
 8006b16:	4393      	bics	r3, r2
 8006b18:	431e      	orrs	r6, r3
 8006b1a:	81a6      	strh	r6, [r4, #12]
 8006b1c:	e7e2      	b.n	8006ae4 <__smakebuf_r+0x10>
 8006b1e:	2380      	movs	r3, #128	@ 0x80
 8006b20:	89a2      	ldrh	r2, [r4, #12]
 8006b22:	6020      	str	r0, [r4, #0]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	6120      	str	r0, [r4, #16]
 8006b2c:	6167      	str	r7, [r4, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <__smakebuf_r+0x78>
 8006b32:	0028      	movs	r0, r5
 8006b34:	230e      	movs	r3, #14
 8006b36:	5ee1      	ldrsh	r1, [r4, r3]
 8006b38:	f000 f820 	bl	8006b7c <_isatty_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d005      	beq.n	8006b4c <__smakebuf_r+0x78>
 8006b40:	2303      	movs	r3, #3
 8006b42:	89a2      	ldrh	r2, [r4, #12]
 8006b44:	439a      	bics	r2, r3
 8006b46:	3b02      	subs	r3, #2
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	9a01      	ldr	r2, [sp, #4]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	e7cc      	b.n	8006af0 <__smakebuf_r+0x1c>
	...

08006b58 <_fstat_r>:
 8006b58:	2300      	movs	r3, #0
 8006b5a:	b570      	push	{r4, r5, r6, lr}
 8006b5c:	4d06      	ldr	r5, [pc, #24]	@ (8006b78 <_fstat_r+0x20>)
 8006b5e:	0004      	movs	r4, r0
 8006b60:	0008      	movs	r0, r1
 8006b62:	0011      	movs	r1, r2
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	f7fa f882 	bl	8000c6e <_fstat>
 8006b6a:	1c43      	adds	r3, r0, #1
 8006b6c:	d103      	bne.n	8006b76 <_fstat_r+0x1e>
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d000      	beq.n	8006b76 <_fstat_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	20000370 	.word	0x20000370

08006b7c <_isatty_r>:
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	4d06      	ldr	r5, [pc, #24]	@ (8006b9c <_isatty_r+0x20>)
 8006b82:	0004      	movs	r4, r0
 8006b84:	0008      	movs	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa f87f 	bl	8000c8a <_isatty>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d103      	bne.n	8006b98 <_isatty_r+0x1c>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d000      	beq.n	8006b98 <_isatty_r+0x1c>
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	46c0      	nop			@ (mov r8, r8)
 8006b9c:	20000370 	.word	0x20000370

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
